// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.generic.template.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController",["sap/ui/base/Object"], function(BaseObject) {
	"use strict";
	/**
	 * Non draft transaction controller to be used in extensions of ListReport. Breakout coding can access an instance of
	 * this class via <code>EtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * Note: Only one object can be edited at a given point in time.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var sEditingStatus = "none";

		function fnEditFinished() {
			sEditingStatus = "none";
		}

		return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController.prototype */ {
			/**
			 * Start editing one list entry
			 * 
			 * @param {sap.ui.model.Context} oContext the context identifying the entry to be edited
			 * @public
			 */
			edit: function(oContext) {
				if (!oContext) {
					throw new Error("Nothing to edit provided");
				}
				if (sEditingStatus !== "none") {
					throw new Error("Attempt to edit multiple contexts (" + oContext + ")");
				}
				if (oController.getView().getModel().hasPendingChanges()) {
					throw new Error("Attempt to edit while already pending changes exist");
				}
				sEditingStatus = "editing";
			},
			/**
			 * Cancel editing
			 * 
			 * @public
			 */
			cancel: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				oTemplateUtils.oServices.oTransactionController.resetChanges();
				fnEditFinished();
			},
			/**
			 * Save the changes which have been applied to the OData model
			 * 
			 * @return {Promise} is resolved when entry is successfully saved and rejected when saving fails
			 * @public
			 */
			save: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				sEditingStatus = "saving";
				var oPromise = oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges();
				oPromise.then(fnEditFinished, function() {
					sEditingStatus = "editing";
				});
				return oPromise;
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",["sap/ui/base/Object"], function(BaseObject) {
	"use strict";
	/**
	 * Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the activate event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Detach a handler from the activate event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Attach a handler to the discard event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the discard event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			},
				/**
			 * Attach a handler to the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",["sap/ui/base/Object"], function(BaseObject) {
	"use strict";
	/**
	 * Non Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Detach a handler from the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Attach a handler to the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Attach a handler to the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			}		
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock",['sap/uxap/BlockBase'],
	function (BlockBase) {
		"use strict";

		var DummyBlock = BlockBase.extend("sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock", {
			metadata: {
				views: {
					Collapsed: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					},
					Expanded: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					}
				}
			}.fragments
		});

		return DummyBlock;

	});
}; // end of sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.UIMode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides inactive support for controls
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.UIMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/UIMode",[], function() {
    "use strict";
	/**
	 * Enumeration for uimode of SmartTemplates
	 * 
	 * The uimode describes the state of the UI in regards of the currently displayed
	 * object instance (e.g. a Sales Order, a Contact or a Purchasing Document)
	 * @readonly
	 * @enum {string}
	 */
	var UIMode = {
		//** The object instance has just been created */
		Create: "Create",
		//** The object instance is displayed read only
		Display: "Display",
		//** The object instance is open for editing
		Edit: "Edit"
	};

	return UIMode;
});
}; // end of sap/suite/ui/generic/template/extensionAPI/UIMode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelper') ) {
(function () {
	"use strict";
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained

	
	var UIMode = sap.ui.require("sap/suite/ui/generic/template/extensionAPI/UIMode");

	jQuery.sap.declare("sap.suite.ui.generic.template.js.AnnotationHelper");
	sap.suite.ui.generic.template.js.AnnotationHelper = {

		formatIndicatorValue : function(sValue){
			return parseFloat(sValue);
		},

		ratingIndicatorFormatter : function(oDataPoint, oValue){
			var sTargetValue;
			if (oDataPoint.Value.Decimal) {
				sTargetValue = oDataPoint.Value.Decimal;
			} else {
				sTargetValue = oDataPoint.Value.Path;
			}
			return "{parts: [{path: '" + sTargetValue + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatIndicatorValue'}";
		},

		createProgressFormatter : function(oDataPoint, oValue){

            var sDataPoint, sValue;
            if (!oDataPoint.Value){
                return;
            }

            if (oDataPoint.TargetValue){
                sDataPoint = oDataPoint.TargetValue.Path;
            }
            if (oValue["Org.OData.Measures.V1.Unit"]){
                sValue = oValue["Org.OData.Measures.V1.Unit"].Path;
            } else if (oValue["Org.OData.Measures.V1.ISOCurrency"]) {
                sValue = oValue["Org.OData.Measures.V1.ISOCurrency"].Path;
            }
            
            return "{parts: [{path: '" + oDataPoint.Value.Path + "'}, {path: '" + sDataPoint + "'}, {path: '" + sValue + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.calcProgressPerc'}";
	    },
	    
	    calcProgressPerc : function(sValue, sTargetValue, sUnitOfMeasure){
	        var sPercValue;
	        var sDisplayValue;
	        if (!sTargetValue){
	            sTargetValue = this.data("fixTargetValue");    
	        }
	        
	        var oResourceBundle = this.getModel("i18n").getResourceBundle();
	        
	        if (sUnitOfMeasure === "%") {
	            sPercValue = parseFloat(sValue);
	            sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_PERCENT", [sValue]);
	        } else if (sValue && sTargetValue){
	            if (sTargetValue !== "0"){
	                sPercValue = (parseFloat(sValue) / parseFloat(sTargetValue)) * 100;   
	            } else {
	                sPercValue = 0;
	            }
	            
	            if (sUnitOfMeasure){
	                sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT", [sValue, sTargetValue, sUnitOfMeasure]);
	            } else {
	                sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [sValue, sTargetValue]);
	            }
	            
	        } else {
	            sPercValue = 0;
	            if (sUnitOfMeasure){
	                sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT_NO_TARGET_VALUE", [sValue, sUnitOfMeasure]);
	            } else {
	                sDisplayValue = sValue;   
	            }
	        } 
	        
	        if (sPercValue > 100){
	            sPercValue = 100;
	        }
	        
	        this.setDisplayValue(sDisplayValue);
	        
	        return sPercValue;
	    },
	    
	    createProgressStateFormatter : function(sDataFieldCriticality, sDataPointCriticality){
	        var sCriticality = (sDataFieldCriticality) ? sDataFieldCriticality : sDataPointCriticality;
	        if (!sCriticality && !sCriticality.Path) {
	            return "";
	        }
	        
	        return "{path: '" + sCriticality.Path + "', formatter:'sap.suite.ui.generic.template.js.AnnotationHelper.formatProgressState'}";
	        
	    },
	    
	    formatProgressState : function(sCriticality){

	        if (sCriticality === "1" || sCriticality === "com.sap.vocabularies.UI.v1.CriticalityType/Negative"){
	            return sap.ui.core.ValueState.Error;
	        } else if (sCriticality === "2" || sCriticality === "com.sap.vocabularies.UI.v1.CriticalityType/Critical") {
	            return sap.ui.core.ValueState.Warning;
	        } else if (sCriticality === "3" || sCriticality === "com.sap.vocabularies.UI.v1.CriticalityType/Positive") {
	            return sap.ui.core.ValueState.Success;
	        } else {
	            return sap.ui.core.ValueState.None;
	        }
	    },

		getIdForMoreBlockContent : function(oFacet){			
			if (oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"] && oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
				return "::MoreContent";
			}
		},	
			
		checkMoreBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, false);
		},	
			
		checkBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, true);
		},
		
		checkFacetContent : function(oFacetContext, bBlock){
			var sPath;
			var oInterface = oFacetContext.getInterface(0);
			var aFacets = oFacetContext.getModel().getProperty("", oFacetContext);
			
			//for Reference Facets directly under UI-Facets we need to check facets one level higher - by removing the last part of the path
			var aForPathOfFacetOneLevelHigher = oFacetContext.getPath().split("/Facets");
			var sContextOfFacetOneLevelHigher = oInterface.getModel().getContext(aForPathOfFacetOneLevelHigher[0]);
			if (oInterface.getModel().getProperty('', sContextOfFacetOneLevelHigher).RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet"){
				return sContextOfFacetOneLevelHigher.getPath();
			} else {
				if (!aFacets){	
					return; 
				}
				
				for (var iFacet = 0; iFacet < aFacets.length; iFacet++) {
					if (!bBlock){
						if (aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] && aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					} else {
						if (aFacets[iFacet].RecordType !== "com.sap.vocabularies.UI.v1.ReferenceFacet" || (!aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] || aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "true")){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					}
				}
			}
				
			return sPath;
		},
		
		isImageUrl : function(oPropertyAnnotations) {
			var oShowImage = oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageURL"] || oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageUrl"];
			if (oShowImage && oShowImage.Bool && oShowImage.Bool === "false") {
				return false;
			} else if (oShowImage) {
				return true;
			}
			return false;
		},
		hasBreadCrumbs : function(oInterface, sViewHierarchy) {
			if (sViewHierarchy) {
				var aSections = sViewHierarchy.split("/");
				var sPath = "", aBreadCrumbs = [], oDataBag;

				// remove the last one - this is the current shown section
				aSections.pop();

				if (aSections.length > 0) {
					for (var i = 0; i < aSections.length; i++) {
						sPath = (sPath) ? (sPath + "/" + aSections[i]) : aSections[i];
						aBreadCrumbs.push(sPath);
					}
					oDataBag = oInterface.getSetting("preprocessorsData");
					oDataBag.breadCrumbs = aBreadCrumbs;
					return true;
				}
			}
		},

		matchesBreadCrumb: function(oInterface, oCandidate, sPath) {
			if (sPath) {
				var aSections = sPath.split("/");
				var oEntitySet, oEntityType, oAssociationEnd;

				if (aSections.length > 0) {
					// there's at least one section left - crate breadcrumbs
					var oMetaModel = oInterface.getInterface(0).getModel();
					var sEntitySet = aSections[0];

					for (var i = 0; i < aSections.length; i++) {
						if (i > 0) {
							oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
							oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
							oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, aSections[i]);
							sEntitySet = oAssociationEnd.entitySet;
						}

						if ((i + 1) === aSections.length) {
							if (sEntitySet === oCandidate.name) {
								return true;
							} else {
								return false;
							}
						}
					}
				}
			}
		},
		
		isObjectPageWithoutComplexTable : function(sEntitySet, oRouteConfig, oFacet) {
			if (oFacet && !sap.suite.ui.generic.template.js.AnnotationHelper.isOrHasComplexTable(sEntitySet, oRouteConfig, oFacet)) {
				return true;
			}
			return false;
		},
		isOrHasComplexTable : function(sEntitySet, oRouteConfig, oFacet) {
			if (oRouteConfig) {
				var oManifestPages = oRouteConfig.pages;
			}
			if (oManifestPages && oFacet) {
				// Object page
				var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				return sap.suite.ui.generic.template.js.AnnotationHelper._hasComplexTableForFacetId(sEntitySet, oManifestPages, sFacetId);
			} else {
				return sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oRouteConfig);
			}
		},
		showFullScreenButton : function(oRouteConfig, oFacet) {
			if (oRouteConfig && oFacet) {
				var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				if (oRouteConfig.component
						&& oRouteConfig.component.settings
						&& oRouteConfig.component.settings.sections
						&& oRouteConfig.component.settings.sections[sFacetId]
						&& oRouteConfig.component.settings.sections[sFacetId].tableMode === "FullScreenTable") {
					return true;
				}
			}
			return false;
		},
		_hasComplexTableForFacetId : function(sEntitySet, oManifestPages, sFacetId) {
			for ( var i in oManifestPages) {
				var oPage = oManifestPages[i];
				if (oPage.entitySet && oPage.component && oPage.component.settings && oPage.component.settings.complexListId) {
					if (oPage.navigationProperty && oPage.entitySet === sEntitySet && oPage.component.settings.complexListId === sFacetId && oPage.component.list) {
						return true;
					}
				}
				if (oPage.pages) {
					var res = sap.suite.ui.generic.template.js.AnnotationHelper._hasComplexTableForFacetId(sEntitySet, oPage.pages, sFacetId);
				}
				if (res === true) {
					return true;
				}
			}
			return false;
		},
		isComplexTable : function(oRouteConfig) {
			if (oRouteConfig && oRouteConfig.component && oRouteConfig.component.list && oRouteConfig.component.settings && oRouteConfig.component.settings.complexListId && oRouteConfig.navigationProperty) {
				return true;
			}
			return false;
		},
		getPersistencyKeyForSmartTable : function(oRouteConfig) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oRouteConfig)) {
				// ComplexTable -> return complexListId (FacetID)
				return oRouteConfig.component.settings.complexListId;
			}
			// ListReport
			return "listReportFloorplanTable";
		},
		getDisplayNavigationIntent: function (sListEntitySet, aSubPages, sAnnotationPath) {
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'display');
		},
		getSubObjectPageIntent: function (sListEntitySet, aSubPages, sAnnotationPath, sMode) {
			var sNavigationProperty;
			if (sAnnotationPath){
				//AnnotationPath is only filled on Object Page which contains facets->annotationPath
				sNavigationProperty = sAnnotationPath.split("/")[0];
			}
			if (sListEntitySet && aSubPages && aSubPages.length > 0) {
				if (sNavigationProperty){
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && sNavigationProperty === aSubPages[i].navigationProperty && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							return aSubPages[i].navigation[sMode].target;
						}
					}
				} else {
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							return aSubPages[i].navigation[sMode].target;
						}
					}
				}
			}
		},	
		extensionPointFragmentExists: function (oFacet, sFragmentId) {
			var sId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (sId === sFragmentId) {
				return true;
			} else {
				return false;
			}
		},
		formatWithExpandSimple: function (oInterface, oDataField, oEntitySet) {
			var aExpand = [], sExpand, oEntityType;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}

			if (oEntitySet) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				// TODO: check with UI2 if helper to get entity type can be used, avoid using this path
				var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oInterface.getPath());
				if (aMatches && aMatches.length && aMatches[0]) {
					var oEntityTypeContext = oMetaModel.getProperty(aMatches[0]);
					var sNamespace = oMetaModel.getODataEntityContainer().namespace;
					oEntityType = oMetaModel.getODataEntityType(sNamespace + '.' + oEntityTypeContext.name);
				}
			}

			if (oEntityType) {
				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function (oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		formatWithExpand: function (oInterface, oDataField, oEntitySet) {
			sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand(oInterface, oDataField, oEntitySet);

			oInterface = oInterface.getInterface(0);
			sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple(oInterface, oDataField, oEntitySet);
			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		_getNavigationPrefix: function (oMetaModel, oEntityType, sProperty) {
			var sExpand = "";
			var aParts = sProperty.split("/");

			if (aParts.length > 1) {
				for (var i = 0; i < (aParts.length - 1); i++) {
					var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
					if (oAssociationEnd) {
						oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
						if (sExpand) {
							sExpand = sExpand + "/";
						}
						sExpand = sExpand + aParts[i];
					} else {
						return sExpand;
					}
				}
			}

			return sExpand;
		},

		getNavigationPathWithExpand: function (oInterface, oContext, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aDependents = [], aExpand = [], oFacetContent, aFacetContent = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oInterface, oContext);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			} else {
				var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);
			}
			if (sResolvedPath) {
				aFacetContent = oMetaModel.getObject(sResolvedPath);
			}

			aFacetContent = aFacetContent.Data || aFacetContent;

			var fnGetDependents = function (sProperty, bIsValue) {
				var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sProperty);
				if (sExpand) {
					// check if already in expand array - if not yet add it
					if (aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
				if (bIsValue) {
					try {
						aDependents = sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths(oMetaModel, oEntitySet, sProperty, true) || [];
					} catch (e) {
						aDependents = [];
					}
					for (var i = 0; i < aDependents.length; i++) {
						if (aExpand.indexOf(aDependents[i]) === -1) {
							aExpand.push(aDependents[i]);
						}
					}
				}
			};

			var fnAnalyzeApplyFunctions = function (oParameter) {
				if (oParameter.Type === "LabeledElement") {
					fnGetDependents(oParameter.Value.Path);
				} else if (oParameter.Type === "Path") {
					fnGetDependents(oParameter.Value);
				}
			};

			for (var i = 0; i < aFacetContent.length; i++) {
				oFacetContent = aFacetContent[i];

				if (oFacetContent.Value && oFacetContent.Value.Path) {
					fnGetDependents(oFacetContent.Value.Path, true);
				}

				if (oFacetContent.Value && oFacetContent.Value.Apply && oFacetContent.Value.Apply.Name === "odata.concat") {
					oFacetContent.Value.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.Action && oFacetContent.Action.Path) {
					fnGetDependents(oFacetContent.Action.Path);
				}

				if (oFacetContent.Target && oFacetContent.Target.Path) {
					fnGetDependents(oFacetContent.Target.Path);
				}

				if (oFacetContent.SemanticObject && oFacetContent.SemanticObject.Path) {
					fnGetDependents(oFacetContent.SemanticObject.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Path) {
					fnGetDependents(oFacetContent.Url.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Apply && oFacetContent.Url.Apply.Parameters) {
					oFacetContent.Url.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}


				if (oFacetContent.UrlContentType && oFacetContent.UrlContentType.Path) {
					fnGetDependents(oFacetContent.UrlContentType.Path);
				}

			}

			if (aFacetContent.name) {
				fnGetDependents(aFacetContent.name, true);
			}

			if (aExpand.length > 0) {
				if (sNavigationProperty === "") {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}
				} else {
					// add expand to navigation path
					sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
				}
			}

			return sNavigationPath;

		},

		isSelf: function (sPath) {
			if (sPath === undefined || (sPath && sPath.indexOf('@') === 0 && sPath.indexOf('/') === -1)) {
				return true;
			}
			return false;
		},
		// Needed for analytics fragments
		number: function (val) {
			if (!val) {
				return NaN;
			} else if (val.Decimal) {
				return +val.Decimal;
			} else if (val.Path) {
				return '{' + val.Path + '}';
			} else {
				return NaN;
			}
		},
		// Needed for analytics fragments
		formatColor: (function () {
			function formatVal(val) {
				if (!val) {
					return NaN;
				} else if (val.Decimal) {
					return val.Decimal;
				} else if (val.EnumMember) {
					return '\'' + val.EnumMember + '\'';
				} else if (val.Path) {
					return '${' + val.Path + '}';
				} else {
					return NaN;
				}
			}

			function formatCriticality(oDataPoint) {
				var criticality = oDataPoint.Criticality;

				return '{= ' + formatVal(criticality) + ' === \'UI.CriticalityType/Negative\' ? \'Error\' : ' + formatVal(criticality) + '=== \'UI.CriticalityType/Critical\' ? \'Critical\' : \'Good\'}';
			}

			function formatCriticalityCalculation(oDataPoint) {
				var value = formatVal(oDataPoint.Value);
				var oCriticalityCalc = oDataPoint.CriticalityCalculation;

				return '{= (' + value + ' < ' + formatVal(oCriticalityCalc.DeviationRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.DeviationRangeHighValue) + ') ? \'Error\' : (' + value
					+ ' < ' + formatVal(oCriticalityCalc.ToleranceRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.ToleranceRangeHighValue) + ') ? \'Critical\' : \'Good\'}';
			}

			return function (oDataPoint) {
				if (oDataPoint.Criticality) {
					return formatCriticality(oDataPoint);
				} else if (oDataPoint.CriticalityCalculation) {
					return formatCriticalityCalculation(oDataPoint);
				}
			};
		})(),

		_determineColumnIndex: function (oContext) {
			var sColumn = oContext.getPath();
			var iColumnIndex = Number(sColumn.slice(sColumn.lastIndexOf("/") + 1));
			var sLineItem = sColumn.slice(0, sColumn.lastIndexOf("/"));
			var oLineItem = oContext.getModel().getObject(sLineItem);
			for (var iRecord = 0; iRecord < iColumnIndex; iRecord++) {
				if ((oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || 
					oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") && 
					(!oLineItem[iRecord].Inline || oLineItem[iRecord].Inline.Bool === "false")) {
						iColumnIndex--;
				}
			}
			return iColumnIndex;
		},
		
		createP13NColumnForAction: function (iContext, oDataField) {
			
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( iContext );
			
			var sP13N = '\\{"columnKey":"' + oDataField.Label.String + '", "columnIndex":"' + iColumnIndex + '", "actionButton":"true" \\}';
			return sP13N;
		},
		
		createP13NColumnForIndicator: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue) {
			
			var sP13N = sap.suite.ui.generic.template.js.AnnotationHelper.createP13N(oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue);
			var sOwnP13N = sP13N.slice(0, sP13N.lastIndexOf("\\}") - 1); //get rid of terminator string
		
			//Determine column index
			var oContext = oInterface.getInterface(2); 
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( oContext );
			if (iColumnIndex) {
				sOwnP13N += ', "columnIndex":"' + iColumnIndex;
			}
			
			sOwnP13N += '" \\}'; //add terminator string again

			return sOwnP13N;
		},
		
		createP13N: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue) {
			var sP13N = "", aAdditionalProperties = [], sNavigation = "";
			
			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField" || oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				
			if (oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && oDataField.Target){
				if (oDataFieldTarget){
				    if (oDataField.Criticality){
				        oDataFieldTarget.Criticality = oDataField.Criticality;
				    }
				    
				    if (oDataFieldTarget.TargetValue && oDataFieldTarget.TargetValue.Path){
                        aAdditionalProperties.push(oDataFieldTarget.TargetValue.Path);
				    }
				    
					oDataField = oDataFieldTarget;
					oContextProp = oDataFieldTargetValue;
				}
			}
			if (oDataField.Value.Path) {
			    
			    var sColumnKey = oDataField.Value.Path;
				if (oDataField.Visualization && oDataField.Visualization.EnumMember){
					sColumnKey = sColumnKey + oDataField.Visualization.EnumMember.slice(oDataField.Visualization.EnumMember.lastIndexOf("/") + 1, oDataField.Visualization.EnumMember.length);
				}
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + oDataField.Value.Path;
				// get Navigation Prefix
				var oMetaModel = oInterface.getInterface(0).getModel("meta");
				if (oMetaModel){
					var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
					if (oEntityType){
						sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Value.Path);
						if (sNavigation){
							sNavigation = sNavigation + "/";
						}
					}
				}
			} else if (oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				oDataField.Value.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "Path") {
						if (!sP13N) {
							sP13N = '\\{"columnKey":"' + oParameter.Value + '", "leadingProperty":"' + oParameter.Value;
						} else {
							aAdditionalProperties.push(oParameter.Value);
						}
					}
				});
			}
			if ((oContextProp.type === "Edm.DateTime") && (oContextProp["sap:display-format"] === "Date")) {
				sP13N += '", "type":"date';
			}
			if (oDataField.Criticality && oDataField.Criticality.Path) {
				aAdditionalProperties.push(oDataField.Criticality.Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.Text"] && oContextProp["com.sap.vocabularies.Common.v1.Text"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.Text"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.ISOCurrency"] && oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.Unit"] && oContextProp["Org.OData.Measures.V1.Unit"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.Unit"].Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.FieldControl"] && oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path);
			}
			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Apply && oDataField.Url.Apply.Parameters) {
				oDataField.Url.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "LabeledElement") {
						aAdditionalProperties.push(oParameter.Value.Path);
					}
				});
			}
			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Path) {
				aAdditionalProperties.push(oDataField.Url.Path);
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			var bNotSortable = false;
			if (oContextSet["Org.OData.Capabilities.V1.SortRestrictions"] && oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties) {
				var aNonSortableProperties = oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties;
				for (var i = aNonSortableProperties.length - 1; i >= 0; i--) {
					if (aNonSortableProperties[i].PropertyPath === oDataField.Value.Path) {
						bNotSortable = true;
						break;
					}
				}
			}
			if (!bNotSortable) {
				if (sNavigation) {
					sP13N += '", "sortProperty":"' + sNavigation + oContextProp.name;
				} else {
					sP13N += '", "sortProperty":"' + oContextProp.name;
				}
			}
			var bNotFilterable = false;
			if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"]) {
				if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].Filterable !== 'false') {
					if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties) {
						var aNonFilterableProperties = oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties;
						for (var j = aNonFilterableProperties.length - 1; j >= 0; j--) {
							if (aNonFilterableProperties[j].PropertyPath === oDataField.Value.Path) {
								bNotFilterable = true;
								break;
							}
						}
					}
				} else {
					bNotFilterable = true;
				}
			}
			if (!bNotFilterable) {
				sP13N += '", "filterProperty":"' + oContextProp.name;
			}
			} else {
				sP13N = '\\{"columnKey":"' + oDataField.Label.String;
				sP13N += '", "actionButton":"true';
			}
			return sP13N + '" \\}';
		},
		
		hasActions: function (Par) {
			for (var i = 0; i < Par.length; i++) {
				if (Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
					return true;
				}
			}
			return false;
		},
		hasCustomActions: function(oRouteConfig, sEntitySet, oManifestExt, oFacet) {
			if (sEntitySet && oManifestExt) {
				if (oFacet) {
					// helper was called from facet (i.e. Object Page table)
					if (oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							// helper was called from fragment (i.e. SmartTable)
							var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
							var oSection = oManifestExtEntitySet.Sections[sFacetId];
							if (oSection && oSection.id === sFacetId && oSection.Actions) {
								for (var i in oSection.Actions) {
									if (oSection.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				} else {
					// helper was called from ListReport or ComplexTable
					if (sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oRouteConfig)) {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.ListReport.view.ComplexTable"]["sap.ui.generic.app"];
					} else {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]["sap.ui.generic.app"];
					}
					if (oManifestExt && oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							if (oManifestExtEntitySet.Actions) {
								for (var i in oManifestExtEntitySet.Actions) {
									if (oManifestExtEntitySet.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		},
		// Determine selection mode of grid table
		getSelectionModeGridTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig) {
			var sSelectionMode = "None";
			for ( var i in oRouteConfig.pages) {
				if (oRouteConfig.pages[i].entitySet === sRootEntitySet &&  sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oEntitySet, oRouteConfig.pages[i].pages)) {
					sSelectionMode = "Single";
					break;
				}
			}
			if (sap.suite.ui.generic.template.js.AnnotationHelper.isOrHasComplexTable(oEntitySet.name, oRouteConfig, oFacet)){
				return sSelectionMode;
			}
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet)) {
				sSelectionMode = "Single";
			}
			return sSelectionMode;
		},
		// Determine selection mode of responsive table
		getSelectionModeResponsiveTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig) {
			var sSelectionMode = "None";
			if (sap.suite.ui.generic.template.js.AnnotationHelper.isOrHasComplexTable(oEntitySet.name, oRouteConfig, oFacet)){
				return sSelectionMode;
			}
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet)) {
					sSelectionMode = "SingleSelectLeft";
			}
			return sSelectionMode;
		},

		getSortOrder: function (Par) {
			var str = '';
			for (var i = 0; i < Par.length; i++) {
				if (!str) {
					str = Par[i].Property.PropertyPath;
				} else {
					str = str + ', ' + Par[i].Property.PropertyPath;
				}
				if (Par[i].Descending) {
					str = str + ' ' + Par[i].Descending.Bool;
				}
			}
			return str;
		},
		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		},
		getStableIdPartFromDataField: function (oDataField) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
				if (oDataField.SemanticObject.String) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.String);
				} else if (oDataField.SemanticObject.Path) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.Path);
				}
				if (oDataField.Action && oDataField.Action.String) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
				} else if (oDataField.Action && oDataField.Action.Path) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.Path);
				}
				return sIdPart;
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Target.AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Path);
			} else if (oDataField.Value && oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataField.Value.Apply.Parameters.length; i++) {
					if (oDataField.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		},
		getStableIdPartFromDataPoint: function (oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		},
		getStableIdPartFromFacet: function (oFacet) {
			var sHeaderFacetPrefix = "";
			if (typeof this.getContext === "function" && this.getContext() && this.getContext().getPath() && this.getContext().getPath().indexOf("com.sap.vocabularies.UI.v1.HeaderFacets") >= 0) {
				sHeaderFacetPrefix = "headerEditable::";
			}
			if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					// If the ID is missing a random value is returned because a duplicate ID error will be thrown as soon as there is
					// more than one form on the UI.
					jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. You have to set an ID at all collection facets.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					return sHeaderFacetPrefix + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oFacet.Target.AnnotationPath);
				}
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		},
		extensionPointBeforeFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (oManifestExtend[sExtensionPointId]) {
				return "true";
			} else {
				return "";
			}
		},
		extensionPointAfterFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (oManifestExtend[sExtensionPointId]) {
				return "true";
			} else {
				return "";
			}
		},
		getExtensionPointBeforeFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getExtensionPointAfterFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getRepeatIndex: function (oValue) {
			if (oValue && oValue.getPath()) {
				var sPadding = "0000000000";
				var sPaddedIndex = sPadding + ((parseInt(oValue.getPath().substring(oValue.getPath().lastIndexOf("/") + 1), 10) + 1 ) * 10).toString();
				return sPaddedIndex.substr(sPaddedIndex.length - sPadding.length);
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to get index.");
			}
		},
		getColumnListItemType: function (oListEntitySet, aSubPages) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oListEntitySet, aSubPages)) {
				return "Navigation";
			} else {
				return "Inactive";
			}
		},
		hasSubObjectPage: function (oListEntitySet, aSubPages) {
			var bHasSubObjectPage = false;
			if (oListEntitySet.name && aSubPages && aSubPages.length > 0) {
				aSubPages.forEach(function (oSubPage) {
					if (oListEntitySet.name === oSubPage.entitySet) {
						if (!sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oSubPage)) {
							bHasSubObjectPage = true;
						}
					}
				});
			}
			return bHasSubObjectPage;
		},
		actionControlHeader: function (oInterface, sActionApplicablePath, sEntityType) {
			sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sActionApplicablePath, sEntityType);
			if (sActionApplicablePath) {
				return "{= !${ui>/editable} && ${path: '" + sActionApplicablePath + "'} }";
			} else {
				return "{= !${ui>/editable} }";
			}
		},
		actionControlFooter: function (oInterface, sActionApplicablePath, sEntityType) {
			sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sActionApplicablePath, sEntityType);
			if (sActionApplicablePath) {
				return "{path: '" + sActionApplicablePath + "'}";
			} else {
				return "true";
			}
		},
		_actionControlExpand: function (oInterface, sActionApplicablePath, sEntityType) {
			var aExpand = [], sExpand;
			oInterface = oInterface.getInterface(0);
			var oMetaModel = oInterface.getModel();
			var oEntityType = oMetaModel.getODataEntityType(sEntityType);
			// check if expand is needed
			if (sActionApplicablePath) {
				sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sActionApplicablePath);
				if (sExpand) {
					aExpand.push(sExpand);
				}
			}
			if (aExpand.length > 0) {
				// we analyze a facet that is part of the root context
				// set expand to expand data bag
				var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
				if (oPreprocessorsData) {
					var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
					for (var j = 0; j < aExpand.length; j++) {
						if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
							aRootContextExpand.push(aExpand[j]);
						}
					}
					oPreprocessorsData.rootContextExpand = aRootContextExpand;
				}
			}
		},
		getEntityTypesForFormPersonalization: function (oInterface, oFacet, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aEntityTypes = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var aFacets = [];
			if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" && oFacet.Facets) {
				aFacets = oFacet.Facets;
			} else if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				aFacets.push(oFacet);
			}
			aFacets.forEach(function (oFacet) {
				var sNavigationProperty;
				if (oFacet.Target && oFacet.Target.AnnotationPath && oFacet.Target.AnnotationPath.indexOf("/") > 0) {
					sNavigationProperty = oFacet.Target.AnnotationPath.split("/")[0];
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
					if (oAssociationEnd && oAssociationEnd.entitySet) {
						oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
						if (aEntityTypes.indexOf(oEntitySet.entityType.split(".")[1]) === -1) {
							aEntityTypes.push(oEntitySet.entityType.split(".")[1]);
						}
					}
				} else {
					if (aEntityTypes.indexOf(oEntitySetContext.entityType.split(".")[1]) === -1) {
						aEntityTypes.push(oEntitySetContext.entityType.split(".")[1]);
					}
				}
			});
			return aEntityTypes.join(", ");
		},

		formatHeaderTitle: function(oInterface, oDataField) {
			// return Expression Binding for DefaultTitle in createMode
			return "{path: 'ui>/createMode', formatter: '._templateFormatters.formatDefaultObjectTitle'}" ;
		},

		getTextArrangementForSmartControl: function (oInterface, sValue, oEntitySet) {
			oInterface = oInterface.getInterface(0);
			var oMetaModel = oInterface.getModel();
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var sTextArrangement = "descriptionAndId";
			if (oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"] && oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				switch (oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
						sTextArrangement = "idAndDescription";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
						sTextArrangement = "idOnly";
						break;
					default:
						break;
				}
			}
			return sTextArrangement;
		},

		isDeepFacetHierarchy: function (oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		},

		doesCollectionFacetOnlyContainForms: function (oFacet) {
			var bReturn = true;
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].Target && oFacet.Facets[i].Target.AnnotationPath) {
						if ((oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Identification") < 0) 
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") < 0)) {
							bReturn = false;
						}
					}
				}
			} else {
				bReturn = false;
			}
			return bReturn;
		},

		doesFieldGroupContainOnlyOneMultiLineDataField: function (oFieldGroup, oFirstDataFieldProperties) {
			if (oFieldGroup.Data.length !== 1) {
				return false;
			}
			if ((oFirstDataFieldProperties['com.sap.vocabularies.UI.v1.MultiLineText'] === undefined)
				|| (oFieldGroup.Data[0].RecordType !== "com.sap.vocabularies.UI.v1.DataField")) {
				return false;
			}
			return true;
		},
		testFormatter: function(value) {
			return "formatted:" + value;
		},
		getFacetID: function(sEntitySet, oFacet) {
			return sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
		},
		reuseComponentForFacetExists: function(sEntitySet, oFacet, oReuseComponents) {
			var sFacetID = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetID(sEntitySet, oFacet);
			if (oReuseComponents[sFacetID]) {
				return "true";
			} else {
				return "";
			}
		},
		getNameOfReuseComponentForFacet: function(sEntitySet, oFacet, oReuseComponents) {
			var sFacetID = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetID(sEntitySet, oFacet);
			return oReuseComponents[sFacetID].componentName;
		},
		formatComponentSettings: function(oInterface, oEntitySet, oFacet, oReuseComponents) {
			var oThisInterface = oInterface.getInterface(0),
				sFacetID = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetID(oEntitySet.name, oFacet),
				oReuseComponent = oReuseComponents[sFacetID];

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oThisInterface, oFacet.Target);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			return sap.suite.ui.generic.template.js.AnnotationHelper.formatComponentSettingsInt(oInterface, oEntitySet, oReuseComponent, sNavigationProperty);
		},
		formatComponentSettingsInt: function(oInterface, oEntitySet, oReuseComponent, sNavigationProperty)	{
			var oThisInterface = oInterface.getInterface(0),
				oMetaModel = oThisInterface.getModel(),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			sNavigationProperty = sNavigationProperty || oReuseComponent.binding;
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
					//fix the type to the target type
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				}
			}
			var sSemanticObject = sap.ui.model.odata.AnnotationHelper.format(oThisInterface, oEntitySet["com.sap.vocabularies.Common.v1.SemanticObject"]);
			var sObjectKeys = "";
			oEntityType.key.propertyRef.forEach(function (key) {
				sObjectKeys += "{" + key.name + "}::";
			});
			sObjectKeys = sObjectKeys.replace(/::$/, "");
			var	settings = {
			        //Bind the UI mode to the component. Three states are allowed (display,edit,create)
					"uiMode": "{= ${ui>/createMode} ? '" +
					    UIMode.Create +
					    "' : ( ${ui>/editable} ? '" + 
					    UIMode.Edit + 
					    "' : '" + 
					    UIMode.Display +
					    "') }",
                    //The semanti cobject is constant for this context
					"semanticObject": sSemanticObject || ""
				};


			if (oReuseComponent) {
				jQuery.extend(settings, oReuseComponent.settings);
				var sValue = JSON.stringify(settings);
				sValue = sValue.replace(/\}/g, "\\}").replace(/\{/g, "\\{"); // check bindingparser.js escape function
				return sValue;
			}
		},
		isListReportTemplate: function(oRouteConfig) {
			if (oRouteConfig) {
				return oRouteConfig.template === "sap.suite.ui.generic.template.ListReport";
			}
		},
		
		getStableIdPartForDatafieldActionButton: function(oDatafield, oFacet) {
			var sStableId = "";
			var sDatafieldStableId = "";
			var sFacetStableId = "";
			if (oFacet) {
				sFacetStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			}
			if (oDatafield) {
				sDatafieldStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField(oDatafield);
			}
			sStableId = (sFacetStableId !== "" ? sFacetStableId + "::" : "") + "action::" + sDatafieldStableId;
			return sStableId;
		}
	};
	sap.suite.ui.generic.template.js.AnnotationHelper.formatComponentSettingsInt.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatComponentSettings.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getRepeatIndex.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEntityTypesForFormPersonalization.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.actionControlHeader.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.actionControlFooter.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatHeaderTitle.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getTextArrangementForSmartControl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.matchesBreadCrumb.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.hasBreadCrumbs.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13N.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForIndicator.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForAction.requiresIContext = true;
})();
}; // end of sap/suite/ui/generic/template/js/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context",
        "sap/ui/model/odata/AnnotationHelper"],
    function (BaseObject, Context, ODataAnnoHelper) {
        "use strict";


        /*eslint camelcase: [2, {properties: "never"}]*/
        var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper");


        AnnotationHelper.resolveFieldGroupTarget = function (oContext) {
            var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
            if (facet) {
                return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
            }
            return null;
        };

        AnnotationHelper.resolveLineItemTarget = function (oContext) {
            var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
            if (facet) {
                return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
            }
            return null;
        };

        AnnotationHelper.resolveFieldGroupFacet = function (oContext) {
            var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
            if (facet) {
                return oContext.getPath() + "/" + facet.index;
            }
            return undefined;
        };

        AnnotationHelper.resolveLineItemFacet = function (oContext) {
            var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
            if (facet) {
                return oContext.getPath() + "/" + facet.index;
            }
            return undefined;
        };

        AnnotationHelper._getFacetOfType = function (oContext, facetType) {
            var facets = oContext.getObject();

            var targetIndex = -1;
            var targetFacet = null;
            if (Array.isArray(facets)) {
                jQuery.each(facets, function (i, facet) {
                    if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
                        targetIndex = i;
                        targetFacet = facet;
                    }
                });
            }

            if (targetIndex >= 0) {
                return {
                    facet: targetFacet,
                    index: targetIndex
                };

            }
            return undefined;
        };


        AnnotationHelper.getAllPropertyPathsFromFacet = function (context, facetType) {
            var oInterface = AnnotationHelper.createFormatterInterface(context);

            var oMetaModel = context.getModel().getMetaModel();
            var oMetaData = AnnotationHelper.getMetaDataForContext(context);
            var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    oMetaData.entityType.namespace + "." + oMetaData.entityType.name, facetType);

            var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
            var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);

            var array = oResolvedProperty.Data || oResolvedProperty;

            var propertyPaths = [];

            if (array && Array.isArray(array)) {
                jQuery.each(array, function (index, anno) {
                    if (anno.RecordType == 'com.sap.vocabularies.UI.v1.DataField' && anno.Value && anno.Value.Path) {
                        propertyPaths.push(anno.Value.Path);
                    }
                });
            }

            return propertyPaths;
        };


        AnnotationHelper.getMetaModelContextForFacetType = function (oInterface, entityType, facetType) {
            var oMetaModel = oInterface.getModel() || oInterface.getModel(0);

            var oEntityTypeMeta = oMetaModel.getODataEntityType(entityType);

            var aSupportedQuickActions = ["QuickCreate", "QuickView"];

            var sFacetKey = "";
            var oMetaDataContext = null;

            var facets = null;

            for (var i = 0; i < aSupportedQuickActions.length; i++) {
                sFacetKey = "com.sap.vocabularies.UI.v1." + aSupportedQuickActions[i] + "Facets";
                if (oEntityTypeMeta[sFacetKey]) {
                    facets = oEntityTypeMeta[sFacetKey];
                    break;
                }
            }

            if (facets) {
                var targetIndex = -1;
                if (Array.isArray(facets)) {
                    jQuery.each(facets, function (i, facet) {
                        if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
                            targetIndex = i;
                        }
                    });
                }

                if (targetIndex >= 0) {
                    oMetaDataContext = new Context(oMetaModel, oEntityTypeMeta.$path + "/" + sFacetKey + "/" + targetIndex + "/Target");
                }
            }

            return oMetaDataContext;
        };

        AnnotationHelper.formatExpandBindingPathForHeaderObject = function (oInterface, entityType) {

            var headerPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "FieldGroup");

            return AnnotationHelper.formatExpandPaths(headerPaths);

        };


        AnnotationHelper.getMetaDataForContext = function (oContext) {

            var oMetaModel = oContext.getModel().getMetaModel();

            var oEntityTypeMeta = oMetaModel.getODataEntityType(oContext.getObject().__metadata.type);

            var sEntitySetName = null;
            var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(true)).entitySet;
            jQuery.each(oEntitySets, function (i, eSet) {
                if (eSet.entityType === oContext.getObject().__metadata.type) {
                    sEntitySetName = eSet.name;
                }
            });

            var oEntitySetMeta = oMetaModel.getODataEntitySet(sEntitySetName);

            return {
                entityType: oEntityTypeMeta,
                entitySet: oEntitySetMeta
            };
        };

        AnnotationHelper.getNavigationPathsFromFacet = function (oInterface, entityType, facetType) {
            var oMetaModel = oInterface.getModel() || oInterface.getModel(0);
            var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, facetType);

            if (!oMetaDataContext) {
                return [];
            }

            var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
            var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);
            var oNavPaths = {};
            var pathComponent = "/";
            if (oResolvedProperty.Data) {
                pathComponent += "Data/";
            }
            var array = oResolvedProperty.Data || oResolvedProperty;

            if (array && Array.isArray(array)) {
                jQuery.each(array, function (i, dataField) {
                    if (dataField.RecordType == 'com.sap.vocabularies.UI.v1.DataField' && dataField.Value && dataField.Value.Path) {
                        var metaContext = new Context(oMetaModel, oResolvedPath + pathComponent + i + "/Value");
                        var navPath = ODataAnnoHelper.getNavigationPath(metaContext);
                        navPath = navPath.replace(/[{}]/g, '');
                        if (navPath) {
                            oNavPaths[navPath] = "";
                        }
                    }
                });
            }

            return Object.keys(oNavPaths);

        };

        AnnotationHelper.getLineItemsNavPropertyName = function (oInterface, entityType) {
            var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, "LineItem");
            if (oMetaDataContext) {
                var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
                sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
                return sChildPropertyPath;
            }
            return undefined;
        };


        AnnotationHelper.formatBindingPathForLineItems = function (oInterface, entityType, bIsDraft) {

            var sLineItemProperty = AnnotationHelper.getLineItemsNavPropertyName(oInterface, entityType);

            if (arguments.length === 2) {
                bIsDraft = false;
            }

            if (bIsDraft) {
                var lineItemNavPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "LineItem");
                if (lineItemNavPaths && lineItemNavPaths.length > 0) {
                    return "{path: '" + sLineItemProperty + "', parameters : {expand:'"
                        + AnnotationHelper.formatExpandPaths(lineItemNavPaths)
                        + "'}}";
                }
            }

            return "{path: '" + sLineItemProperty + "'}";

        };

        AnnotationHelper.formatExpandPaths = function (aExpandPaths) {
            var sExpandParam = "";
            for (var i = 0; i < aExpandPaths.length; i++) {
                sExpandParam += aExpandPaths[i];
                if (i < aExpandPaths.length - 1) {
                    sExpandParam += ",";
                }
            }
            return sExpandParam;
        };

        AnnotationHelper.createFormatterInterface = function (oBindingContext) {

            var oMetaContext = oBindingContext.getModel().getMetaModel().getMetaContext(oBindingContext.getPath());

            var oInterface = {
                getModel: function () {
                    return oBindingContext.getModel().getMetaModel();
                },

                getContext: function () {
                    return oMetaContext;
                },

                getPath: function () {
                    return oMetaContext.getPath();
                }
            };

            return oInterface;

        };


        AnnotationHelper.formatBindingPathForLineItems.requiresIContext = true;
        AnnotationHelper.getMetaModelContextForFacetType.requiresIContext = true;
        AnnotationHelper.formatExpandBindingPathForHeaderObject.requiresIContext = true;
        AnnotationHelper.resolveFieldGroupTarget.requiresIContext = true;
        AnnotationHelper.resolveLineItemTarget.requiresIContext = true;
        AnnotationHelper.resolveLineItemFacet.requiresIContext = true;
        AnnotationHelper.resolveFieldGroupFacet.requiresIContext = true;


        return AnnotationHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper",["sap/ui/base/Object", "./AnnotationHelper",
        "sap/ui/model/odata/AnnotationHelper"],
    function (BaseObject, QCAnnotationHelper, ODataAnnoHelper) {
        "use strict";


        /*eslint camelcase: [2, {properties: "never"}]*/
        var ODataModelHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper");


        ODataModelHelper.initializeObjectProperties = function (oObjectContext, propertyPaths, createParams) {
            var targetObjects = [];
            var key = oObjectContext.getModel().getKey(oObjectContext.getObject());
            var oOrigObject = oObjectContext.getModel().oData[key];
            if (oOrigObject) {
                targetObjects.push(oOrigObject);
            }
            var oChangedObject = oObjectContext.getModel().mChangedEntities[key];
            if (oChangedObject) {
                targetObjects.push(oChangedObject);
            }
            var oContextMetaData = QCAnnotationHelper.getMetaDataForContext(oObjectContext);
            var i = 0;
            if (propertyPaths && Array.isArray(propertyPaths)) {
                jQuery.each(propertyPaths, function (index, path) {
                    var pathComps = path.split("/");
                    var ownProperty = pathComps[0];
                    var childPath = null;
                    if (pathComps.length > 1) {
                        childPath = pathComps.slice(1).join("/");
                    }

                    // if path component is a number, assume it is an index....just continue with next component
                    if (jQuery.isNumeric(ownProperty) && childPath) {
                      ODataModelHelper.initializeObjectProperties(oObjectContext, [childPath], createParams);
                      return;
                    }

                    i = 0;
                    var isNavProp = false;
                    if (oContextMetaData.entityType.navigationProperty) {
                      for (; i < oContextMetaData.entityType.navigationProperty.length; i++) {
                        if (oContextMetaData.entityType.navigationProperty[i].name === ownProperty) {
                          isNavProp = true;
                          break;
                        }
                      }
                    }

                    if (!isNavProp) {
                        jQuery.each(targetObjects, function (i, targetObject) {
                            targetObject[ownProperty] = "";
                        });
                    } else if (!oOrigObject[ownProperty]) {
                        var createdContext = oObjectContext.getModel().createEntry(oObjectContext.getPath() + "/" + ownProperty, createParams);
                        oOrigObject[ownProperty] = { __deferred: {} };
                        ODataModelHelper.restoreNavigationPropertyReferences(oObjectContext, ownProperty, createdContext);
                        if (childPath) {
                            ODataModelHelper.initializeObjectProperties(createdContext, [childPath], createParams);
                        }
                    }
                });
            }

        };

        ODataModelHelper.restoreLineItemReferences = function (entityType, oContext) {
            var oInterface = QCAnnotationHelper.createFormatterInterface(oContext);

            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                entityType, "LineItem");

            if (oMetaDataContext) {
                var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
                sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
                ODataModelHelper.restoreNavigationPropertyReferences(oContext, sChildPropertyPath);
            }
        };

        ODataModelHelper.restoreNavigationPropertyReferences = function (oParentContext, navProp, oChildContext) {
            if (!navProp) {
                return;
            }


            if (!oParentContext.getObject()) {
                return;
            }

            var oMetaModel = oParentContext.getModel().getMetaModel();
            var sObjectKey = oParentContext.getModel().getKey(oParentContext.getObject());
            var oCurrentObject = oParentContext.getModel().oData[sObjectKey];
            var oEntityTypeMeta = oMetaModel.getODataEntityType(oCurrentObject.__metadata.type);


            var oNavPropAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityTypeMeta, navProp);

            var sNavPropEntitySetName = null;
            var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(oNavPropAssociationEnd.type)).entitySet;
            jQuery.each(oEntitySets, function (i, eSet) {
                if (eSet.entityType === oNavPropAssociationEnd.type) {
                    sNavPropEntitySetName = eSet.name;
                }
            });

            if (!oCurrentObject[navProp]) {
                oCurrentObject[navProp] = {};
            }
            if (oCurrentObject[navProp].__list) {
                oCurrentObject[navProp].__list = [];
            }


            var addChildEntity = function (key) {
                if (oCurrentObject[navProp].__deferred) {
                    delete oCurrentObject[navProp].__deferred;
                }
                if (oNavPropAssociationEnd.multiplicity === "*") {
                    if (!oCurrentObject[navProp].__list) {
                        oCurrentObject[navProp].__list = [];
                    }
                    oCurrentObject[navProp].__list.push(key);
                } else {
                    oCurrentObject[navProp].__ref = key;
                }
            };

            if (!oChildContext) {
                var modelKeys = Object.keys(oParentContext.getModel().oData);
                jQuery.each(modelKeys, function (i, key) {
                    if (key.indexOf(sNavPropEntitySetName) >= 0) {
                        addChildEntity(key);
                    }
                });
            } else {
                var key = oChildContext.getPath().substring(1);
                addChildEntity(key);
            }

        };

        ODataModelHelper.findObjects = function () {
            var parentObj, obj, params;
            if (arguments.length === 3) {
                parentObj = arguments[0];
                obj = arguments[1];
                params = arguments[2];
            } else if (arguments.length == 2) {
                obj = arguments[0];
                params = arguments[1];
            }

            var key = params.key || undefined,
                fnMatchCallBack = params.matchCallback || undefined,
                fnNonMatchCallback = params.noMatchCallback || undefined,
                maxNestedLevel = params.maxNestedLevel || 3;

            var doRecursion = true;

            if (!maxNestedLevel) {
                maxNestedLevel = 3;
            }

            if (!ODataModelHelper.findObjects._recursionCount) {
                ODataModelHelper.findObjects._recursionCount = 0;
            }
            ODataModelHelper.findObjects._recursionCount++;

            if (ODataModelHelper.findObjects._recursionCount > maxNestedLevel) {
                ODataModelHelper.findObjects._recursionCount--;
                return;
            }

            var isObject = function (o) {
                var s = Object.prototype.toString.call(o);
                return (s === '[object Array]' || s === '[object Object]');
            };
            var hasOwn = Object.prototype.hasOwnProperty.bind(obj);

            if (obj) {
                for (var i in obj) {
                    if (hasOwn(i)) {

                        var bIsObject = isObject(obj[i]);
                        if (obj[i] && bIsObject) {
                            obj[i].__nestedKey = i;
                        }
                        doRecursion = true;
                        if (i === key && fnMatchCallBack) {
                            doRecursion = fnMatchCallBack(parentObj, obj, obj[i]);
                        } else if (fnNonMatchCallback) {
                            doRecursion = fnNonMatchCallback(parentObj, obj, obj[i]);
                        }
                        if (doRecursion && bIsObject) {
                            ODataModelHelper.findObjects(obj, obj[i], {
                                key: key,
                                matchCallback: fnMatchCallBack,
                                noMatchCallback: fnNonMatchCallback,
                                maxNestedLevel: maxNestedLevel
                            });
                        }
                        if (obj[i] && bIsObject) {
                            delete obj[i].__nestedKey;
                        }
                    }
                }
            }

            ODataModelHelper.findObjects._recursionCount--;
        };

        return ODataModelHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.transaction.DraftContext'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI",["sap/ui/base/ManagedObject", "sap/ui/generic/app/transaction/DraftContext", "sap/m/MessageToast"], function (ManagedObject, DraftContext, MessageToast) {
    "use strict";


    var QuickCreateAPI = ManagedObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI", {

        metadata : {
            library : "sap.suite.ui.generic.template",
            properties : {

            },
            events:
            {
                objectCreated:
                {
                    parameters:
                    {
                        context: { type : "sap.ui.model.Context"}
                    }
                },

                destroyed:
                {
                    parameters:
                    {
                        collectionItemGuid: { type : "String"}
                    }
                },

                autofillLineItems:
                {
                    parameters:
                    {
                        numberOfLineItems: { type : "Number" }
                    }
                }

            }
        }
    });

    QuickCreateAPI.EVENT_CONSTANTS = {
        EventChannel : "sap.fiori.cp.quickactions.EventChannel",
        QUICKCREATE_LINE_ITEMS_FOUND : "LineItemsFound"
    };

    QuickCreateAPI.CopilotModelName = "FioriCopilotODataModel";

    QuickCreateAPI._Instances = {};

    QuickCreateAPI.getInstance = function(oCollItem) {

        if (!oCollItem) {
            return undefined;
        }

        if (oCollItem.copilotEntity) {
            return QuickCreateAPI._Instances[oCollItem.copilotEntity.getODataKey()];
        } else {
            return QuickCreateAPI._Instances[oCollItem];
        }

    };

    QuickCreateAPI.createAPI = function(oComponentContainer, oComponentInstance, oCopilotController) {

        function getCollectionItem() {
            return oCopilotController.getView().getBindingContext().getObject();
        }

        function getQuickCreateItem() {
            return oCopilotController.getQuickCreateItem();
        }


        function getComponentInstance() {
            return oComponentInstance;
        }

        function getComponentContainer() {
            return oComponentContainer;
        }

        function getCopilotModel() {
            return sap.ui.getCore().getModel(QuickCreateAPI.CopilotModelName);
        }

        function updateDraftID(draftid) {
            if (this._bDestroyed) {
                return;
            }
            var qcObject = this.getQuickCreateItem();

            if (qcObject.draftid === draftid) {
                return;
            }
            qcObject.draftid = draftid;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }


        function getRootControl() {
            return oComponentInstance.getAggregation("rootControl");
        }

        function getRootView() {
            return this.oRootView;
        }

        function setRootView(view) {
          this.oRootView = view;
          this.calculateViewHeight(this.oRootView, true);
        }

        function isDraftEnabled() {

            if (this.oRootView && this.oRootView.getController() && this.oRootView.getController().bDraftEnabled !== undefined) {
                return this.oRootView.getController().bDraftEnabled;
            }

            if (!this.oRootView || !this.oRootView.getBindingContext()) {
                return undefined;
            }


            var draftContext = new DraftContext(this.getQuickCreateModel());
            return draftContext.hasDraft(this.oRootView.getBindingContext());
        }

        function getQuickCreateModel() {
            var oModel = this.getComponentInstance().getModel();
            if (!oModel && this.oRootView) {
                oModel = this.oRootView.getModel();
            }

            return oModel;
        }

        function isCurrentUserCreator() {
            return oCopilotController.isCurrentUserCreator();
        }


        function getQuickCreateRootBindingContext() {
            if (!this.oRootView) {
                return undefined;
            }

            return this.oRootView.getBindingContext();
        }


        function getQuickCreateRootEntityType() {
            var context = this.getQuickCreateRootBindingContext();
            if (context && context.getObject()) {
                return context.getObject().__metadata.type;
            }

            return undefined;
        }

        function _onLineItemsFound(sChannel, sEventName, oParameters) {
            var numberLineItems = oParameters.numberOfLineItems;
            if (numberLineItems <= 0) {
                return;
            }

            this.fireAutofillLineItems({numberOfLineItems: numberLineItems});
        }

        function _onComponentContainerAfterRendering () {
            this._attachToModelBindingChanges();
            if (!this.oRootView) {
                var oView = oCopilotController.oViewUtils.findFirstViewFromControlHierarchy(this.getRootControl());
                if (oView) {
                    this.setRootView(oView);
                }
            }
        }

        function _attachToModelBindingChanges() {
          if (!this._bBindingChangeAttached) {
            var oModel = oComponentInstance.getModel();
            if (oModel) {
              var origAddBinding = oModel.addBinding.bind(oModel);
              var that = this;
              oModel.addBinding = function(binding) {
                origAddBinding(binding);
                binding.attachEvent("change", that._onDataBindingChanged);
              };
              this._bBindingChangeAttached = true;
            }
          }
        }

        function loadQuickCreateModelFromJSON() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oDataModel = this.getCopilotModel();

                oDataModel.read("/" + oDataModel.getKey(this.getQuickCreateItem()), {
                    success: jQuery.proxy(function (oData, oResponse) {
                        if (oData.modeljson) {
                            var oModel = this.getQuickCreateModel();
                            this._loadingJSON = true;
                            if (this.isDraftEnabled()) {
                                oModel.oData = JSON.parse(oData.modeljson);
                            } else {
                                var oModelState = JSON.parse(oData.modeljson);
                                oModel.mChangedEntities = oModelState.mChangedEntities;
                                oModel.mChangeHandles = oModelState.mChangeHandles;
                                oModel.mDeferredRequests = oModelState.mDeferredRequests;
                                oModel.oData = oModelState.oData;
                            }
                            oModel.updateBindings();
                        }
                        if (resolve) {
                            resolve();
                        }
                        delete this._loadingJSON;
                    }, this),
                    error: jQuery.proxy(function (oError) {

                        if (reject) {
                            reject(oError);
                        }

                    }, this)
                });

            }, this));
        }



        function _onDataBindingChanged() {
            if (!this._oUpdateModelJSONTimer) {
                this._oUpdateModelJSONTimer = setTimeout(this._updateModelJSON, 1000);
            }
        }



        function _updateModelJSON() {
            if (this._loadingJSON || this._bDestroyed || !this.isCurrentUserCreator()) {
                return;
            }

            this._oUpdateModelJSONTimer = null;

            var qcObject = this.getQuickCreateItem();

            var oModel = this.getQuickCreateModel();

            var newJSON = "";

            if (this.isDraftEnabled()) {
                var oEntities = {};

                var changedKeys = Object.keys(oModel.mChangedEntities);
                var keys = Object.keys(oModel.oData);
                var mergedEntity = {};
                jQuery.each(keys, jQuery.proxy(function(i, key) {

                    if (oModel.mChangedEntities[key]) {
                        mergedEntity = {};
                        jQuery.extend(mergedEntity, oModel.oData[key]);
                        jQuery.extend(mergedEntity, oModel.mChangedEntities[key]);
                        oEntities[key] = mergedEntity;
                    } else {
                        oEntities[key] = oModel.oData[key];
                    }

                }, this));

                jQuery.each(changedKeys, jQuery.proxy(function(i, key) {
                    if (!oEntities[key]) {
                        oEntities[key] = oModel.mChangedEntities[key];
                    }
                }, this));

                newJSON = JSON.stringify(oEntities);
            } else {
                var oModelState = {};

                oModelState.mChangedEntities = oModel.mChangedEntities;
                oModelState.mChangeHandles = oModel.mChangeHandles;
                oModelState.mDeferredRequests = oModel.mDeferredRequests;
                oModelState.oData = oModel.oData;

                newJSON = JSON.stringify(oModelState);
            }

            if (newJSON === qcObject.modeljson) {
                return;
            }


            qcObject.modeljson = newJSON;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }

        function discardQuickCreateDraft() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oModel = this.getQuickCreateModel();

                if (this.oRootView && this.oRootView.getBindingContext()) {

                    if (this.isDraftEnabled()) {

                        oModel.remove(this.oRootView.getBindingContext().getPath(), {

                            success: function () {
                                MessageToast.show("Quick Create Draft has been discarded");
                                resolve();
                            },

                            error: function (oError) {
                                reject(oError);
                            }

                        });
                    } else {
                        oModel.resetChanges();
                        resolve();
                    }
                } else {
                    resolve();
                }

            }, this));
        }


        function calculateViewHeight(oView, bIncrease) {
            if (oView) {
                oCopilotController.calculateViewHeight(oView, bIncrease);
            }
        }

        function setComponentContainerHeight(height) {
            oCopilotController.setComponentContainerHeight(height);
        }

        function objectCreated(oContext) {
            if (this._bDestroyed) {
                return;
            }
            this.fireObjectCreated({context: oContext});
        }

        function destroy() {
            if (this._bDestroyed) {
                return;
            }
            if (this._oUpdateModelJSONTimer) {
                clearTimeout(this._oUpdateModelJSONTimer);
                this._oUpdateModelJSONTimer = null;
            }
            delete QuickCreateAPI._Instances[this._InstanceKey];
            if (oComponentContainer && !oComponentContainer._bIsBeingDestroyed && !oComponentContainer.bIsDestroyed) {
                oComponentContainer.destroy();
            }

            this.oRootView = undefined;

            // subscribe to line items found on quick create
            sap.ui.getCore().getEventBus().unsubscribe(
                QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
                QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
                this._onLineItemsFound,
                this);

            this.fireDestroyed({collectionItemGuid: this._InstanceKey});

            ManagedObject.prototype.destroy.call(this);

            this._bDestroyed = true;
        }

        var api = new QuickCreateAPI();

        jQuery.extend(api, {

            getCollectionItem: getCollectionItem.bind(api),
            getQuickCreateItem: getQuickCreateItem.bind(api),
            updateDraftID: updateDraftID.bind(api),
            getRootControl: getRootControl.bind(api),
            isDraftEnabled: isDraftEnabled.bind(api),
            isCurrentUserCreator: isCurrentUserCreator.bind(api),
            getQuickCreateRootBindingContext: getQuickCreateRootBindingContext.bind(api),
            getQuickCreateRootEntityType: getQuickCreateRootEntityType.bind(api),
            _onComponentContainerAfterRendering: _onComponentContainerAfterRendering.bind(api),
            calculateViewHeight: calculateViewHeight.bind(api),
            setComponentContainerHeight: setComponentContainerHeight.bind(api),
            getQuickCreateModel: getQuickCreateModel.bind(api),
            objectCreated: objectCreated.bind(api),
            destroy: destroy.bind(api),
            getRootView: getRootView.bind(api),
            setRootView: setRootView.bind(api),
            getComponentInstance: getComponentInstance.bind(api),
            getComponentContainer: getComponentContainer.bind(api),
            _onDataBindingChanged: _onDataBindingChanged.bind(api),
            _attachToModelBindingChanges: _attachToModelBindingChanges.bind(api),
            loadQuickCreateModelFromJSON: loadQuickCreateModelFromJSON.bind(api),
            _updateModelJSON: _updateModelJSON.bind(api),
            getCopilotModel: getCopilotModel.bind(api),
            discardQuickCreateDraft: discardQuickCreateDraft.bind(api),
            _onLineItemsFound: _onLineItemsFound.bind(api)

        });

        oComponentContainer.addEventDelegate({
            onAfterRendering: api._onComponentContainerAfterRendering
        });

        api._InstanceKey = api.getCollectionItem().copilotEntity.getODataKey();
        if (QuickCreateAPI._Instances[api._InstanceKey]) {
            QuickCreateAPI._Instances[api._InstanceKey].destroy();
        }
        delete QuickCreateAPI._Instances[api._InstanceKey];
        QuickCreateAPI._Instances[api._InstanceKey] = api;

        // subscribe to line items found on quick create
        sap.ui.getCore().getEventBus().subscribe(
            QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
            QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
            api._onLineItemsFound,
            api);

        oComponentInstance.oQuickCreateAPI = api;

        return oComponentInstance.oQuickCreateAPI;

    };

    return QuickCreateAPI;

}, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.Application') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.Application'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HistoryDirection'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/Application",["sap/ui/base/Object", "sap/ui/core/routing/History", "sap/ui/core/routing/HistoryDirection"], function(BaseObject, History,
	HistoryDirection) {
	"use strict";

	/* An instance of this class represents a Smart Template based application. Thus, there is a one-to-one relationship between
	 * instances of this class and instances of sap.suite.ui.generic.template.lib.AppComponent.
	 * However, this class is only used inside the sap.suite.ui.generic.template.lib package. It is not accessible to template developers
	 * or breakout developers.
	 * Instances of this class are generated in sap.suite.ui.generic.template.lib.TemplateAssembler.
	 * Note that TemplateAssembler also possesses a reference to the instance of this class which represents the app currently
	 * running.
	 * oTemplateContract: An object which is used for communication between this class and the AppComponent and its helper classes.
	 * Note that this class injects its api to these classes into the template contract object.
	 * Currently this class supports two use cases:
	 * 1. For non-draft apps it contains the information whether the app is currently in display or in edit state (methods set/getEditableNDC)
	 * 2. A 'navigation' model is supported. Thereby, we consider navigation to take place each time a route name or a route pattern is changed (but not when only the parameters added to the route are changed)
	 */
	function getMethods(oTemplateContract) {

		var oCurrentDisplay = { // an object containing information about the view currently displayed
		    // note that an attribute fnResolve will be added to this object. It contains the function that resolves the promise contained in attribute api.promise
			api: {
				promise: Promise.resolve()
			} // this object is exposed via method getCurrentDisplayObject
		};
		var oDataForNextPage = {}; // data bag that is transferred to the next page

		// this function is called as soon as the navigation to the current view is finished.
		function fnDisplayedPageReached() {
			oCurrentDisplay.fnResolve(); // resolve the promise that waits for the navigation to be finished
		}

		var oRouteParameters = {}; // parameters of the routing event for the view currently displayed. Handled by function isNewRoute.
		// this function is called when a route is matched. It returns the information whether this is a new route in the sense
		// of the navigation model realized by this class. 
		function isNewRoute(oEvent) {
			var oNewRouteParameters = oEvent.getParameters();
			if (oNewRouteParameters.name !== oRouteParameters.name) {
				oRouteParameters = oNewRouteParameters;
				return true;
			}
			var oMerged = jQuery.extend({}, oRouteParameters.arguments, oNewRouteParameters.arguments);
			for (var sId in oMerged) {
				if (!sId.startsWith("?") && oMerged[sId] !== oRouteParameters.arguments[sId]) {
					oRouteParameters = oNewRouteParameters;
					return true;
				}
			}
			return false;
		}
		
		 function getCurrentDisplayObject() {
			return oCurrentDisplay.api;
		}

		var oHistory = History.getInstance();
		var sCurrentlyDisplayed; // id of the component container currently displayed
		oTemplateContract.oApplication = { // inject own api for AppComponent into the Template Contract. Other classes (NavigationController, BusyHelper) will call these functions accordingly.
			onAfterNavigate: function(oEvent) { // called when navigation has finished
				sCurrentlyDisplayed = oEvent.getParameter("toId");
				fnDisplayedPageReached();
			},

			onBypassed: function() {
				oRouteParameters = {};
				oCurrentDisplay.api.outdated = true;
				oCurrentDisplay.api = {
					promise: Promise.reject() // prevent promises pending forever
				};
				oCurrentDisplay.fnResolve = jQuery.noop;
				oCurrentDisplay.api.promise.catch(jQuery.noop); // prevent log entries
			},
			
			onRouteMatched: function(oEvent) {
				if (!isNewRoute(oEvent)) {
					return; // ignore route changes which are not cosidered as navigation for our model
				}
				oCurrentDisplay.api.outdated = true; // mark the old object as outdated
				oCurrentDisplay.api = {// and create a new one
					isBack: oHistory.getDirection() === HistoryDirection.Backwards,
					dataFromLastPage: oDataForNextPage,
					promise: new Promise(function(fnResolve) {
						oCurrentDisplay.fnResolve = fnResolve;
					})
				};
				oDataForNextPage = {}; // create a new data bag for next page
				var sNewId = oEvent.getParameter("view").getId();
				if (!sCurrentlyDisplayed || sNewId === sCurrentlyDisplayed) { // no view navigation will take place -> page is reached
					sCurrentlyDisplayed = sNewId;
					fnDisplayedPageReached();
				}
			},
			
			getCurrentDisplayObject: getCurrentDisplayObject
		};

		var bIsEditable = false;
		return {
			setEditableNDC: function(isEditable) {
				bIsEditable = isEditable;
			},
			getEditableNDC: function() {
				return bIsEditable;
			},
			// Return an object containing information about the current page. It contains the following attributes:
				// isBack: has this view been reached via back navigation
				// dataFromLastPage: data bag containing data provided by the previous view
				// promise: a promise that is resolved as soon as the navigation to the view has been finished
				// outdated: this attribute is added (value: true) as soon as a new navigation to another view is started.
					// Note that this is the point in time getCurrentDisplayObject will already return another object.
					// Hence, only clients are affected that have stored a reference to the object returned by this function in their memory.
			getCurrentDisplayObject: getCurrentDisplayObject,
			// add data to the data bag that will be handed over to the next page. Note that this method can be called several times. 
			addDataForNextPage: function(oDataBag) {
				jQuery.extend(oDataForNextPage, oDataBag);
			},
			setBusyReason: function(){
				oTemplateContract.oBusyHelper.setBusyReason.apply(oTemplateContract.oBusyHelper, arguments);	
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.Application", {
		constructor: function(oTemplateContract) {
			jQuery.extend(this, getMethods(oTemplateContract));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/Application.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonEventHandlers') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonEventHandlers'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonEventHandlers",["sap/ui/base/Object", "sap/ui/core/format/DateFormat", "sap/m/ComboBox", "sap/m/MessageBox", "sap/m/MessageToast", "sap/m/Table",
	"sap/ui/model/Filter", "sap/ui/model/Sorter", "sap/ui/model/resource/ResourceModel", "sap/ui/comp/smartfilterbar/SmartFilterBar","sap/ui/table/AnalyticalTable", "sap/ui/table/Table"
], function(BaseObject, DateFormat, ComboBox, MessageBox, MessageToast, Table, Filter, Sorter,
	ResourceModel, SmartFilterBar, AnalyticalTable, UiTable) {

	"use strict";

	function getCustomData(oEventSource) {
		var aCustomData = oEventSource.getCustomData();
		var oCustomData = {};
		for (var i = 0; i < aCustomData.length; i++) {
			oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
		}
		return oCustomData;
	}

	function fnFilterObjectsFromJSON(mJSON) {
		var mFilteredJSON = {};
		for (var sPropertyName in mJSON) {
			var vAttributeValue = mJSON[sPropertyName];
			if (jQuery.type(vAttributeValue) !== "object") {
				mFilteredJSON[sPropertyName] = vAttributeValue;
			}
		}
		return mFilteredJSON;
	}

	// TODO: Check
	function fnHandleError(oError) {
		if (oError instanceof Error) {
			oError.showMessageBox();
		}
	}

	function fnGroupFunction(sPath) {
		// coding for finding the right key and label for the grouping row of a table
		// hope to replace this by core functionality soon
		var sText = "";
		var mTypeMap = []; // buffer for subsequent calls
		return function(oContext) {
			var sLabel = "";
			var sTextPath = sPath;
			var oTypeMap;
			// check for existing entry in buffer
			for (var h in mTypeMap) {
				if (mTypeMap[h].path === sPath) {
					oTypeMap = mTypeMap[h];
					break;
				}
			}
			if (!oTypeMap) {
				// not in buffer
				var oMetaModel = oContext.getModel("entitySet").getMetaModel();
				// var oMetaEntityType = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath).sPath);
				var oProperty = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath + "/" + sPath).sPath);

				if (oProperty) {
					var sFormat = " ";
					for (var k = 0; oProperty.extensions && k < oProperty.extensions.length; k++) {
						if (oProperty.extensions[k].namespace === "http://www.sap.com/Protocols/SAPData") {
							switch (oProperty.extensions[k].name) {
								case "display-format":
									sFormat = oProperty.extensions[k].value;
									break;
								case "label":
									sLabel = oProperty.extensions[k].value;
									break;
								case "text":
									var sTextProperty = oProperty.extensions[k].value;
									var aSplitPath = sPath.split("/");
									aSplitPath[aSplitPath.length - 1] = sTextProperty;
									sTextPath = aSplitPath.join("/");
									break;
								default:
									break;
							}
						}
					}
					if (sLabel === "") {
						sLabel = sPath;
					}
					// fill buffer
					oTypeMap = {
						path: sPath,
						data: {
							type: oProperty.type,
							displayFormat: sFormat,
							label: sLabel,
							textPath: sTextPath
						}
					};
					mTypeMap.push(oTypeMap);
				}
			}
			// Now it's time to fix the right label
			sLabel = oTypeMap.data.label;
			if (oTypeMap.data.textPath !== "") {
				sText = oContext.getProperty(oTypeMap.data.textPath);
				if (sText === null || sText === undefined) {
					sText = "";
				}
			} else if (oContext.getProperty(sPath) !== "") {
				sText = oContext.getProperty(sPath);
			}
			switch (oTypeMap.data.type) {
				case "Edm.DateTime":
					if (oTypeMap.data.displayFormat === "Date") {
						var dateFormat = DateFormat.getDateInstance({
							pattern: "MMM d, yyyy"
						});
						var TZOffsetMs = new Date(0).getTimezoneOffset() * 60 * 1000;
						sText = dateFormat.format(new Date(sText.getTime() + TZOffsetMs));
					}
					break;
				case "Edm.Boolean":
					if (sText === true) {
						sText = "{i18n>YES}";
					} else if (sText === false) {
						sText = "{i18n>NO}";
					}
					break;
				default:
					break;
			}
			return {
				key: sText ? sText : sPath,
				text: sLabel ? sLabel + ": " + sText : sText
			};
		};
	}

	function getMethods(oController, oComponentUtils, oServices, oCommonUtils) {

		function getDiscardDraftPopover() {
			return oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.DiscardDraftPopover", {
				onDiscardConfirm: function() {
					var fnDiscardDraft = function(oActive) {
						var oDiscardPromise = oServices.oCRUDManager.deleteEntity();
						oDiscardPromise.then(function() {
							oServices.oNavigationController.setRootPageToDirty();
							oServices.oNavigationController.unbindChildren(oController.getOwnerComponent());

							if (oActive && oActive.getObject() && oActive.getObject().IsActiveEntity) {
								oServices.oNavigationController.navigateToContext(oActive, undefined, true);
							} else {
								// new document discarded, go back to previous page
								window.history.back();
							}
						});
						var oEvent = {
							discardPromise: oDiscardPromise
						};
						oComponentUtils.fire(oController, "AfterCancel", oEvent);
					};
					var oContext = oController.getView().getBindingContext();
					var oEntity = oContext.getObject();
					if (oEntity.hasOwnProperty("HasActiveEntity") && oEntity.HasActiveEntity && oEntity.hasOwnProperty("SiblingEntity")) {
						var oModel = oController.getView().getModel();
						oModel.read(oContext.getPath() + "/SiblingEntity", {
							success: function(oResponseData) {
								var oActive = oModel.getContext("/" + oModel.getKey(oResponseData));
								fnDiscardDraft(oActive);
							}
						});
					} else {
						fnDiscardDraft();
				}
				}
			}, "discard");
		}

		function storeObjectPageNavigationRelatedInformation(oEventSource) {
			var oRow = oEventSource;
			var iIdx = -1, iMaxIdx = -1;
			var bNestedObjPage = false;
			var oTable = oCommonUtils.getParentTable(oEventSource);


			if (oTable.getTable) {
				oTable = oTable.getTable();
			}

			var bIsAnalyticalTbl = oTable instanceof AnalyticalTable;

			if (!bIsAnalyticalTbl) { // up/down navigation is not enabled in the analytical table scenario

				var oData = null;
				// get the table list binding now
				var oTableBinding = oCommonUtils.getTableBinding(oTable);
				var oListBinding = oTableBinding && oTableBinding.binding;
				var aCurrContexts = null;

				if (oListBinding) {
					if (oTable instanceof UiTable) {
						// possibly a bug in the UI5 framework itself .. getCurrentContexts() only returns the contexts of selected rows in the table
						aCurrContexts = oListBinding.getContexts();
					} else if (oTable instanceof Table) {
						aCurrContexts = oListBinding.getCurrentContexts();
					}
				}

				var oContext = null;
				var aSelectedContexts = oCommonUtils.getSelectedContexts(oTable);
				var sSelectedBindingPath = null;

				if (aSelectedContexts && aSelectedContexts.length > 0) {
					sSelectedBindingPath = aSelectedContexts[0].getPath();
				} else if (oRow) {
					if (oTable instanceof Table) {
						// could be a list tab navigation - rows are not selected explicitly - can only be possible with a list/m.table navigation (by default)
						sSelectedBindingPath = oRow.getBindingContext() ? oRow.getBindingContext().sPath : null;
					}
				}


				// get index of selected item
				if (oListBinding && oListBinding.getContexts && sSelectedBindingPath) {
					aCurrContexts = oListBinding.getCurrentContexts();
					for (var i = 0; i < aCurrContexts.length; i++) {
						oContext = aCurrContexts[i];
						if (oContext.getPath() === sSelectedBindingPath) {
							iIdx = i;
							break;
						}
					}
				}

				if (oTable && iIdx !== -1) {
					iMaxIdx = oListBinding.getLength();
					var iThreshold = Math.floor(iMaxIdx / 5); // default

					if (oTable instanceof Table) {
						iThreshold = oTable.getGrowingThreshold();
					} else if (oTable instanceof UiTable) {
						iThreshold = oTable.getThreshold();
					}

					// controversial step
					var oNewListBinding = jQuery.extend({}, oListBinding);
					// controversial step over

					var sNavigationProperty = oTableBinding.path;
					// determine the "level" of the object page
					var oCurrentData = oComponentUtils.getCurrentDisplayObject().dataFromLastPage;
					if (oCurrentData && oCurrentData.nextObjectPageInfo) {
						// nested level object page navigation
						bNestedObjPage = true;
					}
					// Populate the data to be passed to the next screen
					var oNewListBindingContexts = null;

					if (oNewListBinding && oTable instanceof UiTable) {
						// possibly a bug in the UI5 framework itself .. getCurrentContexts() only returns the contexts of selected rows in the table
						oNewListBindingContexts = oNewListBinding.getContexts();
					} else if (oNewListBinding && oTable instanceof Table) {
						oNewListBindingContexts = oNewListBinding.getCurrentContexts();
					}

					oData = {
						"NavPropertyToUse": sNavigationProperty,
						"listBinding": oNewListBinding,
						"tableMaxItems": iMaxIdx,
						"growingThreshold": iThreshold,
						"nested": bNestedObjPage,
						"selectedRelativeIndex": iIdx,
						"objectPageNavigationContexts": oNewListBindingContexts,
						"startIndex": 0,
						"endIndex": oNewListBindingContexts.length - 1
					};

					var sCurrentPageTitle;
					var oTemplatePrivateModel = oTable.getModel("_templPriv");
					var oCurrentView = sap.ui.getCore().byId(oController.oView.sId);
					var sPreviousPageTitle = oTemplatePrivateModel.getProperty("/currentPageTitle", sCurrentPageTitle);
					if (!oTemplatePrivateModel.oData.complexTable) {
						sCurrentPageTitle = oCurrentView.byId("objectTypeName").getText();
					} else {
						sCurrentPageTitle = oCurrentView.byId("page-title").getText();
					}

					// Get the data store and create our stack here
					oComponentUtils.addDataForNextPage({
						"nextObjectPageInfo": oData,
						"previousPageTitle": sPreviousPageTitle,
						"currentPageTitle": sCurrentPageTitle
					});
				}
			}
		}

		// injection of $select for smart table - only subset of fields is requested (line items) but technical fields are; required as well: semantic
		// key, technical key + IsDraft / HasTwin
		function getTableQueryParameters(sEntitySet, oExistingQueryParameters) { // #ListController
			var oMetaModel = oController.getView().getModel().getMetaModel();
			var oBindingParams = oExistingQueryParameters;
			var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet, false);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
			var aMandatoryFields = oEntityType.key.propertyRef;
			var i;

			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet)) {
				aMandatoryFields = aMandatoryFields.concat(oDraftContext.getSemanticKey(sEntitySet));
				aMandatoryFields.push({
					name: "IsActiveEntity"
				}, {
					name: "HasDraftEntity"
				}, {
					name: "HasActiveEntity"
				});
			}

			if (oBindingParams.parameters.select && oBindingParams.parameters.select.length > 0) {
				// at least one select parameter
				var aSelects = oBindingParams.parameters.select.split(",");
				for (i = 0; i < aMandatoryFields.length; i++) {
					if (jQuery.inArray(aMandatoryFields[i].name, aSelects) === -1) {
						oBindingParams.parameters.select += "," + aMandatoryFields[i].name;
					}
				}
			}
			return oBindingParams;
		}

		var fnSetDraftIndicatorState, fnSetDraftIndicatorStateSaved, fnSetDraftIndicatorStateClear; // initialized on demand
		function onChange(oEvent) {
			var sProperty = oEvent.getSource().getBindingPath("value");
			var oView = oController.getView();
			var bIsDraft = oServices.oDraftController.getDraftContext().hasDraft(oView.getBindingContext());

			if (bIsDraft) {
				if (!fnSetDraftIndicatorState) {
					var oTemplatePrivateModel = oView.getModel("_templPriv");
					fnSetDraftIndicatorState = oTemplatePrivateModel.setProperty.bind(oTemplatePrivateModel, "/generic/draftIndicatorState");
					fnSetDraftIndicatorStateSaved = fnSetDraftIndicatorState.bind(null, sap.m.DraftIndicatorState.Saved);
					fnSetDraftIndicatorStateClear = fnSetDraftIndicatorState.bind(null, sap.m.DraftIndicatorState.Clear);
				}
				fnSetDraftIndicatorState(sap.m.DraftIndicatorState.Saving);
			}
			var oModifyPromise = oServices.oCRUDManager.modifyEntity(sProperty, oEvent.getSource());
			if (bIsDraft) {
				oModifyPromise.then(fnSetDraftIndicatorStateSaved, fnSetDraftIndicatorStateClear);
			}
			return oModifyPromise;
		}
		/**
		 * Return an instance of the DeleteConfirmation fragment
		 *
		 * @param {sap.m.Table} table
		 * @return {sap.m.Dialog} - returns the Delete Confirmation Dialog
		 * @private
		 */
		function getDeleteDialog(smartTable) {
			return oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.ListReport.view.fragments.DeleteConfirmation", {
				onCancel: function (oEvent) {
					var oDialog = oEvent.getSource().getParent();
					oDialog.close();
				},
				onDelete: function (oEvent) {
					var oModel = oController.getView().getModel();
					var oMetaModel = oModel.getMetaModel();
					var oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var sEntityTypeName = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
					var sEntityTypeNamePlural = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeNamePlural.String;
					var sEntityTypeName_lc = sEntityTypeName.toLowerCase();
					var sEntityTypeNamePlural_lc = sEntityTypeNamePlural.toLowerCase();


					var oDialog = oEvent.getSource().getParent();
					var oDialogModel = oDialog.getModel("delete");
					var aSelectedItems = oDialogModel.getProperty("/items");
					var aPathsToBeDeleted = [];
					// determine which items to delete
					for (var i = 0; i < aSelectedItems.length; i++) {
						if (!aSelectedItems[i].draftStatus.locked) {
							if (aSelectedItems.length === oDialogModel.getProperty("/unsavedChangesItemsCount") || !aSelectedItems[i].draftStatus.unsavedChanges ||
								oDialogModel.getProperty("/checkboxSelected")) {
								aPathsToBeDeleted.push(aSelectedItems[i].context.getPath());
							}
						}
					}
					// delete
					oServices.oCRUDManager.deleteEntities(aPathsToBeDeleted).then(
						function (aFailedPath) {
							var iSuccessfullyDeleted = aPathsToBeDeleted.length - aFailedPath.length;

							if (aFailedPath.length > 0) {
								var sErrorMessage = "";
								if (iSuccessfullyDeleted > 0) {

									// successful delete
									sErrorMessage += (iSuccessfullyDeleted > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL_WITH_COUNT", [iSuccessfullyDeleted, sEntityTypeNamePlural_lc]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_WITH_COUNT", [iSuccessfullyDeleted, sEntityTypeName_lc]);

									// failed deletes
									sErrorMessage += "\n";
									sErrorMessage += (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL_WITH_COUNT", [aFailedPath.length, sEntityTypeNamePlural_lc]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_WITH_COUNT", [aFailedPath.length, sEntityTypeName_lc]);

								} else {
									sErrorMessage = (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL", [sEntityTypeNamePlural_lc]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR", [sEntityTypeName_lc]);
								}

								MessageBox.error(sErrorMessage);

							} else {
								var sSuccessMessage = "";
								sSuccessMessage = (iSuccessfullyDeleted > 1) ?
									oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL", [sEntityTypeNamePlural_lc]) :
									oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS", [sEntityTypeName_lc]);

								MessageToast.show(sSuccessMessage);
							}

							smartTable.rebindTable();
						},
						function (oError) {
							// this could be a different message b/c the batch request has failed here
							MessageBox.error(oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL", [aPathsToBeDeleted.length, sEntityTypeNamePlural_lc]), {
								styleClass: oCommonUtils.getContentDensityClass()
							});

						}
					);
					oDialog.close();
				}
			}, "delete");
		}
		/**
		 * Return the data necessary for the Delete Confirmation Dialog
		 *
		 * @param [sap.m.ListItemBase] selectedItems
		 * @return {map} JSON map containing the data for the Delete Confirmation Dialog
		 * @private
		 */
		function getDataForDeleteDialog(selectedItems) {
			var oModel = oController.getView().getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var sEntityTypeName = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
			var sEntityTypeNamePlural = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeNamePlural.String;
			var sEntityTypeName_lc = sEntityTypeName.toLowerCase();
			var sEntityTypeNamePlural_lc = sEntityTypeNamePlural.toLowerCase();

			var mJSONData = {
				items: undefined,
				itemsCount: selectedItems.length,
				text: {
					title: undefined,
					shortText: undefined,
					unsavedChanges: undefined,
					longText: undefined
				},
				lockedItemsCount: 0,
				unsavedChangesItemsCount: 0,
				checkboxSelected: true
			};

			// Enhance the items with their context and draft status. Also keep track of the number of locked and unsaved items
			var aItems = [];
			for (var i = 0; i < selectedItems.length; i++) {
				var oEntity = oModel.getObject(selectedItems[i].getPath());
				var mDraftStatus = {};


				if (!oEntity.IsActiveEntity) { // if the entity is not an active entity, we can assume it is a draft
					mDraftStatus.draft = true;

				} else if (oEntity.HasDraftEntity) { // if the entity is an active entity AND has a draft entity, we can assume someone else has a draft of the entity
					var sLockedBy = oModel.getProperty("DraftAdministrativeData/InProcessByUser", selectedItems[i]);
					if (sLockedBy) { // if there is a user processing the entity, it is locked
						mDraftStatus.locked = true;
						mDraftStatus.user = sLockedBy;
						mJSONData.lockedItemsCount++;
					} else { // else the entity has unsaved changes
						mDraftStatus.unsavedChanges = true;
						mDraftStatus.user = oModel.getProperty("DraftAdministrativeData/LastChangedByUser", selectedItems[i]);
						mJSONData.unsavedChangesItemsCount++;
					}
				}
				aItems.push({
					context: selectedItems[i],
					draftStatus: mDraftStatus
				});
			}
			mJSONData.items = aItems;

			// determine Dialog title
			if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
				mJSONData.text.title = oCommonUtils.getText("ST_GENERIC_ERROR_TITLE");
			} else {
				mJSONData.text.title = (mJSONData.itemsCount > 1) ?
					oCommonUtils.getText("ST_GENERIC_DELETE_TITLE_WITH_COUNT", mJSONData.itemsCount) :
					oCommonUtils.getText("ST_GENERIC_DELETE_TITLE");
			}

			// determine unsavedChanges Checkbox text
			mJSONData.text.unsavedChanges = oCommonUtils.getText("ST_GENERIC_UNSAVED_CHANGES_CHECKBOX", sEntityTypeNamePlural_lc);

			// determine short text
			if (mJSONData.itemsCount > 1) {
				if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED_PLURAL", sEntityTypeNamePlural_lc);
				} else if (mJSONData.unsavedChangesItemsCount === mJSONData.itemsCount) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES_PLURAL", sEntityTypeNamePlural_lc);
				} else if (mJSONData.lockedItemsCount > 0) {
					var iRemainingItems = mJSONData.itemsCount - mJSONData.lockedItemsCount;
					// 1st part of message
					mJSONData.text.shortText = (mJSONData.lockedItemsCount > 1) ?
						oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED_PLURAL", [mJSONData.lockedItemsCount, mJSONData.itemsCount,
							sEntityTypeNamePlural_lc
						]) :
						oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED", [mJSONData.itemsCount, sEntityTypeNamePlural_lc]);

					mJSONData.text.shortText += "\n";
					// 2nd part of message
					if (iRemainingItems === mJSONData.unsavedChangesItemsCount) {
						mJSONData.text.shortText += (iRemainingItems > 1) ?
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES_PLURAL", [sEntityTypeNamePlural_lc]) :
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES", [sEntityTypeName_lc]);
					} else {
						mJSONData.text.shortText += (iRemainingItems > 1) ?
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_PLURAL", [iRemainingItems, sEntityTypeNamePlural_lc]) :
							oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING", [sEntityTypeName_lc]);
					}
				} else {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED_PLURAL", sEntityTypeNamePlural_lc);
				}
			} else {
				if (mJSONData.lockedItemsCount > 0) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED", [sEntityTypeName, mJSONData.items[0].draftStatus.user]);
				} else if (mJSONData.unsavedChangesItemsCount > 0) {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES", [sEntityTypeName_lc, mJSONData.items[0].draftStatus
						.user
					]);
				} else {
					mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED", sEntityTypeName_lc);
				}
			}

			return mJSONData;
		}


		function fnShowError(sErrorMessageKey) {
			MessageBox.error(oCommonUtils.getText(sErrorMessageKey), {
				styleClass: oCommonUtils.getContentDensityClass()
			});
		}

		function fnNavigateIntent(oEventSource, oContext, oSmartFilterBar) {
			var oContextObject = oContext.getObject();
			var oManifestEntry = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app");
			var oOutbound = oManifestEntry.crossNavigation.outbounds[getCustomData(oEventSource).CrossNavigation];
			var oNavigationHandler = oCommonUtils.getNavigationHandler();

			var sSelectionVariant;
			var oSelectionVariant;
			var oInnerAppState = {};
			if (oSmartFilterBar) {
				sSelectionVariant = oSmartFilterBar.getDataSuiteFormat();
				oSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oContextObject, sSelectionVariant);
				var oSmartTable = oEventSource.getParent().getParent();
				oInnerAppState = {
					selectionVariant: sSelectionVariant,
					tableVariantID: oSmartTable.getCurrentVariantId()
				};
			} else {
				jQuery.extend(oContextObject, oController.getView().getBindingContext().getObject());
				oSelectionVariant = oContextObject;
			}


			oNavigationHandler.navigate(
				oOutbound.semanticObject,
				oOutbound.action,
					JSON.stringify(oSelectionVariant),
					oInnerAppState,
					fnHandleError
					);
		}

		return {
			onBeforeRebindTable: function(oEvent) {
				// For line item actions, popin display must not have a label
				var oTable = oEvent.getSource().getTable();
				if (oTable && oTable instanceof sap.m.Table) {
					var oColumns = oTable.getColumns();
					for (var iColumn = 0; iColumn < oColumns.length; iColumn++) {
						if (oColumns[iColumn].getCustomData()[0].getValue()["actionButton"] === "true") {
							oColumns[iColumn].setPopinDisplay("WithoutHeader");
						}
					}
				}
				// still open
				var oBindingParams = oEvent.getParameter("bindingParams");
				var oPage = oController.getOwnerComponent().getAggregation("rootControl");
				var oSmartTable = oEvent.getSource();
				var oTableLengthText = oPage.byId(oSmartTable.getTable().sId + "-tableLengthText");

				// oTableLengthText is only available if long table feature is activated
				if (oTableLengthText) {
					oBindingParams.length = 5;
				}
				oBindingParams.parameters = oBindingParams.parameters || {};

				var oSmartFilterBar = oController.byId(oSmartTable.getSmartFilterId());
				if (oSmartFilterBar instanceof SmartFilterBar) {
					var oCustomControl = oSmartFilterBar.getControlByKey("EditState");
					if (oCustomControl instanceof ComboBox) {
						var vDraftState = oCustomControl.getSelectedKey();
						switch (vDraftState) {
							case "1": // Unchanged
								// IsActiveDocument and siblingEntity eq null
								oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
								oBindingParams.filters.push(new Filter("HasDraftEntity", "EQ", false));
								break;
							case "2": // Draft
								oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", false));
								break;
							case "3": // Locked
								oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
								oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
								oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "NE", ""));
								break;
							case "4": // Unsaved changes
								oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
								oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
								oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "EQ", ""));
								break;
							default: // All ==> Special handling for multiple multi-filters
								var oOwnMultiFilter = new sap.ui.model.Filter({
									filters: [new Filter("IsActiveEntity", "EQ", false),
										new Filter("SiblingEntity/IsActiveEntity", "EQ", null)
									],
									and: false
								});
								if (oBindingParams.filters[0] && oBindingParams.filters[0].aFilters) {
									var oSmartTableMultiFilter = oBindingParams.filters[0];
									oBindingParams.filters[0] = new sap.ui.model.Filter([oSmartTableMultiFilter, oOwnMultiFilter], true);
								} else {
									oBindingParams.filters.push(oOwnMultiFilter);
								}
								break;
						}
					}
				}

				getTableQueryParameters(oSmartTable.getEntitySet(), oBindingParams);
				var aSelect = oBindingParams.parameters.select && oBindingParams.parameters.select.split(",") || [];
				var aExpands = oBindingParams.parameters && oBindingParams.parameters.expand && oBindingParams.parameters.expand.split(",") || [];
				var sEntitySet = oSmartTable.getEntitySet();

				if (aSelect && aSelect.length > 0) {
					var oMetaModel = oSmartTable.getModel().getMetaModel();
					var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

					// Make sure sorter text property in select and expand list for grouping selection where column is not visible
					if (oTable instanceof Table) {
						
						var oSorter = oBindingParams.sorter[0];
						// Check if sorter is for Grouping
						if (oSorter && oSorter.vGroup) {
							var oSorterObject = oMetaModel.getODataProperty(oEntityType, oSorter.sPath);
							var sSorterText = oSorterObject["sap:text"] || (oSorterObject["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
							if (sSorterText) {
								if (jQuery.inArray(sSorterText, aSelect) === -1) {
									oBindingParams.parameters.select += "," + sSorterText;
									aSelect.push(sSorterText);
								}
							}
						}
					}
				}

				// check if any expand is neccessary
				for (var i = 0; i < aSelect.length; i++) {
					// check if expand is neccessary
					if (aSelect[i].indexOf("/") !== -1) {
						var aParts = aSelect[i].split("/");
						// remove property from path
						aParts.pop();
						var sNavigation = aParts.join("/");
						if (aExpands.indexOf(sNavigation) === -1) {
							aExpands.push(sNavigation);
						}
					}
				}

				// add Draft Admin Data to expand if entity is Draft and Draft Root and has Draft Admin Data
				var oDraftContext = oServices.oDraftController.getDraftContext();
				if (oDraftContext.isDraftEnabled(sEntitySet) && oDraftContext.isDraftRoot(sEntitySet)) {
					if (oDraftContext.hasDraftAdministrativeData(sEntitySet)) {

						if (aSelect && aSelect.length > 0) {
							if (aSelect.indexOf("DraftAdministrativeData") === -1) {
								oBindingParams.parameters.select = oBindingParams.parameters.select + ",DraftAdministrativeData";
							}
						}

						if (aExpands.indexOf("DraftAdministrativeData") === -1) {
							aExpands.push("DraftAdministrativeData");
						}
					}
				}

				if (aExpands.length > 0) {
					oBindingParams.parameters.expand = aExpands.join(",");
				}

				// sortOrder Annotation of presentation variant - only relevant for sap.m.Table
				var aCustomData = oSmartTable.getCustomData();
				var oCustomData = {};
				for (var k = 0; k < aCustomData.length; k++) {
					oCustomData[aCustomData[k].getKey()] = aCustomData[k].getValue();
				}
				var oTable = oSmartTable.getTable();
				var oVariant = oSmartTable.fetchVariant();
				if ((!oVariant || !oVariant.sort) && oTable instanceof Table && oCustomData.TemplateSortOrder) {
					var aSortOrder = oCustomData.TemplateSortOrder.split(", ");
					for (var j = 0; j < aSortOrder.length; j++) {
						var aSort = aSortOrder[j].split(" ");
						if (aSort.length > 1) {
							oBindingParams.sorter.push(new Sorter(aSort[0], aSort[1] === "true"));
						} else {
							oBindingParams.sorter.push(new Sorter(aSort[0]));
						}
					}
				}

				if (oTable instanceof Table) {
					// Define grouping (wiki: SmartTable FAQs)
					var oSorter = oBindingParams.sorter[0];
					// Check if sorter is for Grouping
					if (oSorter && oSorter.vGroup) {
						// Replace the Group function
						oSorter.fnGroup = fnGroupFunction(oSorter.sPath);
					}
				}
			},

			onListNavigate: function(oEventSource) {

				storeObjectPageNavigationRelatedInformation(oEventSource);

				oCommonUtils.navigateFromListItem(oEventSource.getBindingContext(), oEventSource.getParent());

			},

			onListNavigateIntent: function(oEventSource, oSmartFilterBar) {
				var oContext = oEventSource.getBindingContext();
				fnNavigateIntent(oEventSource, oContext, oSmartFilterBar);
			},

			onShowDetails: function(oEventSource){
				var oTable = oEventSource.getParent().getParent().getTable();
				var aContexts = oCommonUtils.getSelectedContexts(oTable);
				switch (aContexts.length) {
					case 0:
						fnShowError("ST_GENERIC_NO_ITEM_SELECTED");
						return;
					case 1:
						storeObjectPageNavigationRelatedInformation(oEventSource);
						oCommonUtils.navigateFromListItem(aContexts[0], oTable);
						return;
					default:
						fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
						return;
				}
			},

			onShowDetailsIntent: function(oEventSource, oSmartFilterBar){
				var oTable = oEventSource.getParent().getParent().getTable();
				var aContexts = oCommonUtils.getSelectedContexts(oTable);
				switch (aContexts.length) {
				case 0:
					fnShowError("ST_GENERIC_NO_ITEM_SELECTED");
					return;
				case 1:
					fnNavigateIntent(oEventSource, aContexts[0], oSmartFilterBar);
					return;
				default:
					fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
					return;
				}
			},

			onChange: onChange,

			// action triggered from tables
			// Note: oSmartFilterBar is optional
			onCallActionFromList: function(oEvent, oSmartFilterBar) {
				var oEventSource = oEvent.getSource();
				var mOutboundParameters, oInnerAppData, oResponse;
				var oSmartTable = oCommonUtils.getParentTable(oEvent.getSource());
				var oTable = oSmartTable.getTable();
				var sTablePath = oSmartTable.getTableBindingPath();
				var aContexts = oCommonUtils.getSelectedContexts(oTable);
				var oCustomData = getCustomData(oEventSource);
				var sErrorMessageKey = "";

				if (oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
					//NO ITEM SELECTED: user selects no item in table --> currently not possible for actions, but might be supported in the future for actions that don't have parameters at all
					//ONE ITEM SELECTED: supported
					//MULTIPLE ITEMS SELECTED: function import actions on multiple instances - supported
					if (aContexts.length === 0) {
						sErrorMessageKey = "ST_GENERIC_NO_ITEM_SELECTED";
					} else {
						//processing allowed
						// TODO check Denver implementation
						oServices.oCRUDManager.callAction({
							functionImportPath: oCustomData.Action,
							contexts: aContexts,
							sourceControl: oTable,
							label: oCustomData.Label,
							operationGrouping: oCustomData.OperationGrouping,
							navigationProperty: ""
						}).then(function (aResponses) {
							if (aResponses && aResponses.length && aResponses.length === 1) {
								oResponse = aResponses[0];

								if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())){
									oServices.oNavigationController.setMeToDirty(oController.getOwnerComponent(), sTablePath);
								}
							}
						});
						return;
					}
				} else {
					// right now all kinds of processing are allowed, like com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation
					// and tried to execute via intent based navigation
					//NO ITEM SELECTED: user selects no item in table - not supported
					//ONE ITEM SELECTED: supported
					//MULTIPLE ITEMS SELECTED: navigation to multiple instances --> currently not supported
					if (aContexts.length === 0) {
						sErrorMessageKey = "ST_GENERIC_NO_ITEM_SELECTED";
					} else if (aContexts.length === 1) {
						//processing allowed
						var oNavigationHandler = oCommonUtils.getNavigationHandler();
						if (oNavigationHandler) {
							var mSemanticAttributes = {};
							if (aContexts[0]) {
								mSemanticAttributes = aContexts[0].getObject();
							}
							delete mSemanticAttributes.__metadata;
							if (oSmartFilterBar) {
								var sSelectionVariant = oSmartFilterBar.getDataSuiteFormat() || "{}";
								mSemanticAttributes = fnFilterObjectsFromJSON(mSemanticAttributes);
								mOutboundParameters = oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes,
									sSelectionVariant).toJSONString();
								oInnerAppData = {
									selectionVariant: oSmartFilterBar.getDataSuiteFormat(),
									tableVariantID: oSmartTable.getCurrentVariantId()
								};
							} else {
								jQuery.extend(mSemanticAttributes, oController.getView().getBindingContext().getObject());
								mOutboundParameters = fnFilterObjectsFromJSON(mSemanticAttributes);
								mOutboundParameters = JSON.stringify(mOutboundParameters);
								oInnerAppData = {};
							}
							oNavigationHandler.navigate(oCustomData.SemanticObject, oCustomData.Action, mOutboundParameters,
								oInnerAppData, fnHandleError);
						}
						return;
					} else {
						sErrorMessageKey = "ST_GENERIC_MULTIPLE_ITEMS_SELECTED";
					}
				}
				if (sErrorMessageKey) {
					MessageBox.error(oCommonUtils.getText(sErrorMessageKey), {
						styleClass: oCommonUtils.getContentDensityClass()
					});
				}
			},

			onDiscardDraft: function(oEvent) {
				var oSource = oEvent.getSource();
				var aCustomData = oSource.getCustomData();
				var oDiscardPopover = getDiscardDraftPopover();
				var oDiscardModel = oDiscardPopover.getModel("discard");
				var sPlacement = aCustomData && aCustomData[0] ? aCustomData[0].getValue() : sap.m.PlacementType.Top;
				oDiscardModel.setProperty("/placement", sPlacement);
				var oContext = oController.getView().getBindingContext();
				var oEntity = oContext.getObject();
				var bIsCreateDraft = oEntity.hasOwnProperty("HasActiveEntity") && !oContext.getProperty("IsActiveEntity") && !oContext.getProperty(
						"HasActiveEntity");
				oDiscardModel.setProperty("/isCreateDraft", bIsCreateDraft);
				oDiscardPopover.openBy(oSource);
			},

			addEntry: function(oEvent, bSuppressNavigation) {
				var oTable = oCommonUtils.getParentTable(oEvent.getSource());
				var sTablePath = oTable.getTableBindingPath();
				var oComponent = oController.getOwnerComponent();

				// check for available changes leaving the page in non-draft case
				if (!oCommonUtils.isDraftEnabled() && oController.getView().getModel().hasPendingChanges()) {
					oCommonUtils.dataLossConfirmation(function() {

						return oServices.oCRUDManager.addEntry(oTable).then(function(oTargetInfo) {
							if (!bSuppressNavigation){
								oServices.oNavigationController.navigateToContext(oTargetInfo.newContext, oTargetInfo.tableBindingPath, false);
							}
							oServices.oNavigationController.setMeToDirty(oComponent, sTablePath);
					});

				});
					return null;
				}

				return oServices.oCRUDManager.addEntry(oTable).then(function (oTargetInfo) {
					if (!bSuppressNavigation) {
						oServices.oNavigationController.navigateToContext(oTargetInfo.newContext,
							oTargetInfo.tableBindingPath, false);
					}
					oServices.oNavigationController.setMeToDirty(oComponent, sTablePath);
				});
			},
			/**
			 * Event handler for Delete on the List Report
			 * @param {sap.ui.base.Event} oEvent
			 * @public
			 */
			deleteEntries: function(oEvent) {
				var oSmartTable = oCommonUtils.getParentTable(oEvent.getSource());
				var aSelectedItems = oCommonUtils.getSelectedContexts(oSmartTable);

				if (aSelectedItems && aSelectedItems.length > 0) {
					var mJSONData = getDataForDeleteDialog(aSelectedItems);
					var oDeleteDialog = getDeleteDialog(oSmartTable);
					var oDeleteDialogModel = oDeleteDialog.getModel("delete");

					oDeleteDialogModel.setData(mJSONData);
					oDeleteDialog.open();
				} else {
					MessageBox.error(oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
						styleClass: oCommonUtils.getContentDensityClass()
					});
				}
			},

			onContactDetails: function(oEvent) {
				var oPopover;
				if (oEvent.getSource().data("Location") === "Header") {
					oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
				} else {
					oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation(
						"items")[1];
				}
				oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
				oPopover.openBy(oEvent.getSource());
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonEventHandlers", {
		constructor: function(oController, oComponentUtils, oServices, oCommonUtils) {
			jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils));
		}
	});
});

}; // end of sap/suite/ui/generic/template/lib/CommonEventHandlers.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ComponentUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ComponentUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ComponentUtils",["sap/ui/base/Object"], function(BaseObject) {
	"use strict";

	function getMethods(oComponent, oComponentRegistryEntry) {
		// This promise if resolved when the element binding for the header data have been read. Note that the promise
		// stored in this variable is replaced each time the function fnRebindHeaderData is called.
		// Thus, the promise allways represents the loading of the currently relevant header data.
		var oHeaderDataAvailablePromise;

		// Registry for the event handling facility (see fnAttach, fnDetach, and fnFire)
		var aEventHandlerRegistry = [];

		function getODataLoadFailedTexts() {
			var oRB = oComponent.getModel("i18n").getResourceBundle();
			return {
				dataLoadFailedTitle: oRB.getText("ST_GENERIC_ERROR_LOAD_DATA_TITLE"),
				dataLoadFailedText: oRB.getText("ST_GENERIC_ERROR_LOAD_DATA_TEXT")
			};
		}

		function fnAttach(sTemplate, sEvent, fnFunction) {
			if (typeof fnFunction !== "function") {
				throw new Error("Event handler must be a function");
			}
			aEventHandlerRegistry.push({
				template: sTemplate,
				event: sEvent,
				handler: fnFunction
			});
		}

		function fnDetach(sTemplate, sEvent, fnFunction) {
			for (var i = aEventHandlerRegistry.length; i--;) {
				if (aEventHandlerRegistry[i].handler === fnFunction && aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template ===
					sTemplate) {
					aEventHandlerRegistry.splice(i, 1);
				}
			}
		}

		function fnFire(sTemplate, sEvent, oEvent) {
			for (var i = 0; i < aEventHandlerRegistry.length; i++) {
				if (aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template === sTemplate) {
					aEventHandlerRegistry[i].handler(oEvent);
				}
			}
		}

		function getTemplateName(oController) {
			return oController.getMetadata().getName();
		}

		function fnFirePageDataLoaded(oCurrentDisplay) {
			oHeaderDataAvailablePromise.then(function(oContext) {
				if (oContext && !oCurrentDisplay.outdated) {
					oCurrentDisplay.promise.then(function() {
						var oView = oComponent.getAggregation("rootControl");
						fnFire(getTemplateName(oView.getController()), "PageDataLoaded", {
							context: oContext
						});
					});
				}
			});
		}
		
		function fnDataRequested(sHeaderRequestReason){
			if (oComponentRegistryEntry.isActive){
				oComponentRegistryEntry.oApplication.setBusyReason(sHeaderRequestReason, true, false);	
			}
		}

		function fnDataReceived(sHeaderRequestReason, oEvent) {
			var oData = oEvent.getParameter("data");
			// When not data parameter is received there is usually an exception
			// TODO: show backend error messages
			if (!oData) {
				var oDataLoadFailedTexts = getODataLoadFailedTexts();
				var oNavigationController = oComponent.getAppComponent().getNavigationController();
				oNavigationController.navigateToMessagePage({
					title: oDataLoadFailedTexts.dataLoadFailedTitle,
					text: oDataLoadFailedTexts.dataLoadFailedText
				});
			}
			oComponentRegistryEntry.oApplication.setBusyReason(sHeaderRequestReason, false);
		}

		function fnChange(fnResolve, oEvent) {
			fnResolve(oEvent.getSource().getBoundContext());
		}

		function fnRebindHeaderData(sBindingPath) {
			var oParameter = {};
			var oComponentData = oComponent.getComponentData();
			if (oComponentData && oComponentData.preprocessorsData && oComponentData.preprocessorsData.rootContextExpand && oComponentData.preprocessorsData
				.rootContextExpand.length) {
				oParameter.expand = oComponentData.preprocessorsData.rootContextExpand.join(",");
			}
			var sHeaderRequestReason = "HeaderRequest::" + oComponent.getId() + "::" + sBindingPath;
			oHeaderDataAvailablePromise = new Promise(function(fnResolve) {
				oComponent.getComponentContainer().bindElement({
					path: sBindingPath,
					events: {
						dataRequested: fnDataRequested.bind(null, sHeaderRequestReason),
						dataReceived: fnDataReceived.bind(null, sHeaderRequestReason),
						change: fnChange.bind(null, fnResolve)
					},
					parameters: oParameter,
					batchGroupId: "Changes", // get navigation controller constant?
					changeSetId: "Changes"
				});
			});
		}

		return {
			setEditableNDC: function(bIsEditable) {
				oComponentRegistryEntry.oApplication.setEditableNDC(bIsEditable);
			},
			getEditableNDC: function() {
				return oComponentRegistryEntry.oApplication.getEditableNDC();
			},

			getCreateMode: function(sBindingPath) {
				var oEntity;
				var oModel = oComponent.getModel();

				if (sBindingPath) {
					if (oModel) {
						oEntity = oModel.getProperty(sBindingPath);
					}
				} else {
					var oContext = oComponent.getBindingContext();
					if (oContext) {
						oEntity = oContext.getObject();
					}
				}

				// workaround until ODataModel provides method
				return !!(oEntity && oEntity.__metadata && oEntity.__metadata.created);
			},

			attach: function(oController, sEvent, fnFunction) {
				fnAttach(getTemplateName(oController), sEvent, fnFunction);
			},
			detach: function(oController, sEvent, fnFunction) {
				fnDetach(getTemplateName(oController), sEvent, fnFunction);
			},
			fire: function(oController, sEvent, oEvent) {
				fnFire(getTemplateName(oController), sEvent, oEvent);
			},

			addDataForNextPage: function(oDataBag) {
				oComponentRegistryEntry.oApplication.addDataForNextPage(oDataBag);
			},

			getCurrentDisplayObject: function() {
				return oComponentRegistryEntry.oApplication.getCurrentDisplayObject();
			},

			rebindHeaderData: fnRebindHeaderData,

			bindComponent: function(sBindingPath) {

				if (sBindingPath) {
					var oComponentContainer = oComponent.getComponentContainer();
					if (oComponentContainer) {
						var oSettings = oComponentContainer.getSettings();
						if (oSettings.routeConfig && oSettings.routeConfig.component && oSettings.routeConfig.component.list) {
							var sNavProp = oComponentContainer.getSettings().routeConfig.navigationProperty;
							/*
							 * for long table: cut off navigation property as this should not be set for the whole page - navigation
							 * property will be set in the smart table fragment (tableBindingPath)
							 */
							var sBindingPathWithoutNavProp = sBindingPath.substring(0, sBindingPath.lastIndexOf("/" + sNavProp));
							if (sBindingPathWithoutNavProp) {
								sBindingPath = sBindingPathWithoutNavProp;
							}
						}
						if (oComponentRegistryEntry.utils.getCreateMode(sBindingPath)) {
							oComponentContainer.unbindElement();
							oComponentContainer.setBindingContext(oComponentContainer.getModel().getContext(sBindingPath));
						} else {
							var oCurrentDisplay = oComponentRegistryEntry.oApplication.getCurrentDisplayObject();
							var oElementBinding = oComponentContainer.getElementBinding();
							if (oElementBinding && oElementBinding.getPath() === sBindingPath) {
								/*
								 * component is already bound to this object - no rebound to avoid that 1:1, 1:N and expands are read
								 * again
								 */
								fnFirePageDataLoaded(oCurrentDisplay);
								return false;
							}
							fnRebindHeaderData(sBindingPath);
							// set the UI model to not editable / enabled as long as the binding data is read
							var oUIModel = oComponent.getModel("ui");
							oUIModel.setProperty("/enabled", false);
							oUIModel.setProperty("/editable", false);

							fnFirePageDataLoaded(oCurrentDisplay);
						}
					}
				}
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ComponentUtils.js", {
		constructor: function(oComponent, oComponentRegistryEntry) {
			jQuery.extend(this, getMethods(oComponent, oComponentRegistryEntry));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ComponentUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.FlexEnabler') ) {
jQuery.sap.declare("sap.suite.ui.generic.template.lib.FlexEnabler");

/**
 * Temporary notepad control to enable UI5 flexibility in list report.
 */
sap.ui.core.Control.extend("sap.suite.ui.generic.template.lib.FlexEnabler", {
	metadata: {
		properties: {
			/**
			 * Specifies whether the SAPUI5 flexibility features should be switched on.
			 */
			flexEnabled: {
				type: "boolean",
				group: "Misc",
				defaultValue: true
			}
		}
	},
	renderer: function(oRm, oControl) {
		"use strict";
	}
});

}; // end of sap/suite/ui/generic/template/lib/FlexEnabler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageButtonHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageButtonHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopoverItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageButtonHelper",["sap/ui/base/Object", "sap/m/MessagePopover", "sap/m/MessagePopoverItem", "sap/ui/model/Filter",
	"sap/ui/model/FilterOperator"
], function(BaseObject, MessagePopover, MessagePopoverItem, Filter, FilterOperator) {
	"use strict";

	function getMethods(oCommonUtils, oController) {

		var oMessagePopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.MessagePopover");
		var bInitialized = false;
		var aFilterProvider = []; //Callback functions for reuse components that want to add their message filters
		var sCurrentBindingPath;
		
		function addExternalFilter(aFilter) {
			aFilterProvider.forEach(function(fnProvider) {
				var aExternalFilter = fnProvider();
				if (jQuery.isArray(aExternalFilter)) {
					aFilter = aFilter.concat(aExternalFilter);
				} else {
					aFilter.push(aExternalFilter);
				}
			});
			return aFilter;
		}
		
		function getMessageContextFilter(sBindingPath) {
			var aFilter = [];

			var sEntitySetName = "/" + oController.getOwnerComponent().getEntitySet();

			// Show messages for current context including all "property children" AND for
			// messages given for the entire entity set
			var aCombinedFilter = [
				new Filter({
					path: "target",
					operator: FilterOperator.StartsWith,
					value1: sBindingPath
				}),
				new Filter({
					path: "target",
					operator: FilterOperator.EQ,
					value1: sEntitySetName
				}),
				// add additional filter for UiMessages
				new Filter({
					path: "validation",
					operator: FilterOperator.EQ,
					value1: true
				})
			];
			aCombinedFilter = addExternalFilter(aCombinedFilter); //Check/add external filters
			var oFilter = new Filter(aCombinedFilter, false /* filter conjunction OR instead of AND */ );

			aFilter.push(oFilter);
			return aFilter;
		}
		
		function adaptToContext(sBindingPath) {
			if (sBindingPath === undefined){
				if (!bInitialized){
					return;
				}
				sBindingPath = sCurrentBindingPath;
			} else {
				sCurrentBindingPath = sBindingPath;
			}
			var aCombinedFilter = getMessageContextFilter(sBindingPath);
			var oItemBinding = oMessagePopover.getBinding("items");
			oItemBinding.filter(aCombinedFilter);
			if (!bInitialized) {
				var oTemplatePrivate = oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty("/generic/messageCount", 0);
				var sMessageButtonTooltip = oCommonUtils.getText("MESSAGE_BUTTON_TOOLTIP_P", 0);
				oTemplatePrivate.setProperty("/objectPage/messageButtonTooltip", sMessageButtonTooltip);
				oItemBinding.attachChange(function() {
					var iCount = oItemBinding.getLength();
					oTemplatePrivate.setProperty("/generic/messageCount", iCount);
					var sMessageButtonTooltip = oCommonUtils.getText("MESSAGE_BUTTON_TOOLTIP_P", iCount);
					if (iCount === 1) {
						sMessageButtonTooltip = oCommonUtils.getText("MESSAGE_BUTTON_TOOLTIP_S", iCount);
					}
					oTemplatePrivate.setProperty("/objectPage/messageButtonTooltip", sMessageButtonTooltip);
				});
				bInitialized = true;
			}
		}

		return {
			adaptToContext: adaptToContext,

			showMessagePopover: function(oEvent) {
				var oButton = oEvent.getSource();
				oMessagePopover.toggle(oButton);
			},
			registerMessageFilterProvider: function(fnProvider) {
				aFilterProvider.push(fnProvider);
				adaptToContext();
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.MessageButtonHandler.js", {
		constructor: function(oCommonUtils, oController) {
			jQuery.extend(this, getMethods(oCommonUtils, oController));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/MessageButtonHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageUtils') ) {
/* Class containing static methods for message handling.
Note that this contains redundancies with the Denver layer.
This should be cleaned up as soon as the Denver layer provides the functionality in a consumable way.
*/

jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.MessageUtil'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageUtils",["sap/ui/core/ValueState", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/m/MessageToast", "sap/m/MessageBox",
		"sap/ui/generic/app/util/ModelUtil", "sap/ui/generic/app/util/MessageUtil"
	],
	function(ValueState, Filter, FilterOperator, MessageToast, MessageBox, ModelUtil, GenericMessageUtil) {
		"use strict";


		// Template specific
		function getShowMessages(oController) {
			var oView = oController.getView();
			var oUIModel = oView.getModel("ui");
			return !oUIModel || !oUIModel.getProperty("/editable");
		}

		function getErrorContext(sOperation, mParameters, oDraftController, oController) {
			var result = {};
			mParameters = mParameters || {};
			var sEntitySet;
			var oDraftContext = oDraftController && oDraftController.getDraftContext();
			if (oDraftContext) {
				// context is only present for details view via this.getContext()
				var oContext = mParameters.context || oController.getView().getBindingContext();
				// context is not given when creating a new draft entity and the corresponding POST request fails
				sEntitySet = oContext ? ModelUtil.getEntitySetFromContext(oContext) : oController.getOwnerComponent().getEntitySet();
				if (sEntitySet) {
					result.entitySet = sEntitySet;
					result.isDraft = oDraftContext.isDraftEnabled(sEntitySet);
				}
			}

			result.lastOperation = sOperation;
			result.showMessages = getShowMessages(oController);

			return result;
		}

		function fnHandleErrorTemplate(sOperation, oController, sContentDensityClass, oServices, oError, mParameters) {
			var mParametersGeneric = {
				// if error context is not set - allow to pass values to getErrorContext via mParameters - required for actions on list as context needs to be
				// provided
				errorContext: (mParameters && mParameters.errorContext) || getErrorContext(sOperation, mParameters, oServices.oDraftController,
					oController),
				response: oError
			};

			GenericMessageUtil.handleError(mParametersGeneric, oController, sContentDensityClass, oServices.oNavigationController);
		}
		
		return {
			operations: GenericMessageUtil.operations,
			handleTransientMessages: GenericMessageUtil.handleTransientMessages,
			handleError: fnHandleErrorTemplate
		};
	});
}; // end of sap/suite/ui/generic/template/lib/MessageUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.NavigationController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ------------------------------------------------------------------------------------------------------------
// Provides class sap.suite.ui.template.lib.NavigationController to handle navigation/routing related tasks
// ------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/NavigationController",[
	"sap/ui/base/Object", "sap/ui/core/ComponentContainer", "sap/ui/core/routing/HashChanger", "sap/ui/core/routing/History",
	"sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/m/MessageBox", "sap/m/MessagePage", "sap/m/Link"
], function(BaseObject, ComponentContainer, HashChanger, History, Filter, FilterOperator, MessageBox, MessagePage, Link) {
	"use strict";

	function getMethods(oComponent, oTemplateContract, oNavigationController) {

		function fnTruncateHash(sHash, sMatch, iDelta) {
			var iIndex;
			if (sHash && sMatch) {
				if (isNaN(iDelta)) {
					iDelta = 0;
				}
				iIndex = sHash.indexOf(sMatch);
				if (iIndex > -1) {
					sHash = sHash.substring(0, iIndex - iDelta);
				}
			}
			return sHash;
		}

		function fnNavigateToContext(oTargetContext, sNavigationProperty, bReplace) {
			var sHash = oNavigationController.oRouter.oHashChanger.getHash(),
				sPath;

			if (oTargetContext) {
				// get the navigation path from binding context
				sPath = oNavigationController._getNavigationPath(oTargetContext, sNavigationProperty);
				// Store the context path and use it in _handleNavigation, so no data retrieval is done!
				oNavigationController._oTargetContextPath = oTargetContext.getPath();
			} else {
				sPath = sNavigationProperty;
			}
			if (sPath) {
				if (sNavigationProperty) {
					// add a leading "/" is none exists
					if (sNavigationProperty.indexOf("/") < 0) {
						sNavigationProperty = "/" + sNavigationProperty;
					}
					// hash contains EntitySet(Key)/NavProp() -> only EntitySet(Key) is required
					sHash = fnTruncateHash(sHash, sNavigationProperty);
					// get hash path until "?"
					sHash = fnTruncateHash(sHash, "?");

					// just concatenate current hash with selected path e.g. Root(Key) + / + NavProp(Key)
					if (sHash) {
						sPath = sHash + "/" + sPath;
					}
				}
				// navigate to context
				oNavigationController._navigate(sPath, bReplace);
			}
		}

		/**
		 * Navigates to the message page and shows the specified content.
		 *
		 * @public
		 * @param {Object} mParameters - The parameters for message page
		 */
		function fnNavigateToMessagePage(mParameters) {
			var sEntitySet, sTitle, bReplaceURL, sText, oEntitySet, oEntityType, oHeaderInfo, sIcon = null,
				oMetaModel;
			if (mParameters) {
				sEntitySet = mParameters.entitySet;
				sTitle = mParameters.title;
				sText = mParameters.text;
				sIcon = mParameters.icon;
				bReplaceURL = mParameters.replaceURL;
			}

			if (sEntitySet) {
				oMetaModel = oNavigationController.oComponent.getModel().getMetaModel();
				if (oMetaModel) {
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oHeaderInfo = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
				}
				if (oHeaderInfo && oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
					sIcon = oHeaderInfo.TypeImageUrl.String;
				}
			}
			if (oNavigationController.oMessagePage) {
				oNavigationController.oMessagePage.destroy();
			}
			oNavigationController.oMessagePage = new MessagePage({
				title: sTitle,
				text: sText,
				icon: sIcon,
				customDescription: new Link({
					text: oTemplateContract.getText("ST_GENERIC_RETURN_TO_MAIN"),
					press: oNavigationController.navigateBack.bind(oNavigationController, bReplaceURL)
				})
			});

			oTemplateContract.oNavContainer.addPage(this.oMessagePage);
			oTemplateContract.oNavContainer.to(this.oMessagePage);
		}

		return {
			/**
			 * Navigates to the specified context.
			 *
			 * @public
			 * @param {Object} oTargetContext - The context to navigate to (or null - e.g. when the navigationProperty should be appended to the current path)
			 * @param {string} sNavigationProperty - The navigation property
			 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
			 */
			navigateToContext: fnNavigateToContext,
		/**
		 * Navigates to the message page and shows the specified content.
		 *
		 * @public
		 * @param {Object} mParameters - The parameters for message page
		 */
		 navigateToMessagePage: fnNavigateToMessagePage
		};
	}

	/*
	 * Handles all navigation and routing-related tasks for the application.
	 *
	 * @class The NavigationController class creates and initializes a new navigation controller with the given
	 *        {@link sap.suite.ui.generic.template.lib.AppComponent AppComponent}.
	 * @param {sap.suite.ui.generic.template.lib.AppComponent} oComponent The AppComponent instance
	 * @public
	 * @extends sap.ui.base.Object
	 * @version 1.38.16
	 * @since 1.30.0
	 * @alias sap.suite.ui.generic.template.lib.NavigationController
	 */
	var NavigationController = BaseObject.extend("sap.suite.ui.generic.template.lib.NavigationController", {
		metadata: {
			library: "sap.suite.ui.generic.template"
		},
		constructor: function(oComponent, oTemplateContract) {
			if (!oComponent || !oComponent.getRouter()) {
				throw "No component with router passed";
			}
			// inherit from base object.
			BaseObject.apply(this, arguments);
			this.oRouter = oComponent.getRouter();
			this.oViews = {};
			this.oComponent = oComponent;
			this._oTemplateContract = oTemplateContract;
			this._sNavigationTargetId = this._oTemplateContract.oNavContainer.getId();

			this.oRouter.attachRouteMatched(this._handleRouteMatched, this);
			this.oRouter.attachBypassed(this._handleBypassed, this);

			// TODO: this has to be clarified and fixed
			this.oRouter._oViews._getViewWithGlobalId = function(oView) {
				// Test only
				if (!this.oViews[oView.viewName]) {
					var oRoute = this.oRouter.getRoute(oView.viewName);
					if (oRoute && oRoute._oConfig) {
						this.oViews[oView.viewName] = this._createComponentInstance(oRoute._oConfig);
					} else {
						this.oViews[oView.viewName] = sap.ui.view({
							viewName: oView.viewName,
							type: oView.type,
							height: "100%"
						});
					}
				}
				return this.oViews[oView.viewName];
			}.bind(this);
			this._oHashChanger = HashChanger.getInstance();
			this._generateRoutingMetadata();
			this._initialise();
			jQuery.extend(this, getMethods(oComponent, oTemplateContract, this));
		}
	});

	NavigationController._sChanges = "Changes";

	/**
	 * Initialises the necessary info
	 *
	 * @private
	 */
	NavigationController.prototype._initialise = function() {
		var oData;
		oData = this.oComponent.getComponentData();
		if (oData) {
			this._oStartupParameters = oData.startupParameters;
		}
		// check if there entitySet and startup parameters are present and no hash exists!
		if (this._sEntitySet && this._oStartupParameters && !this._oHashChanger.getHash()) {
			this._processStartupParameters();
		} else {
			this._initialiseRouting();
		}
	};

	/**
	 * checks the startup parameters for triggering navigation
	 *
	 * @private
	 */
	NavigationController.prototype._processStartupParameters = function() {
		var oModel, oNavigationController = this, bCreateWithContext;
		// wait for the ODataMetaModel to be loaded
		oModel = this.oComponent.getModel();
		oModel.getMetaModel().loaded().then(function() {

			var oEntitySet, oEntityType, fCheckKeys, bCheckKeys, aSemanticKey, sHash;
			fCheckKeys = function(aKeys, mParams) {
				var i, iLength, bSuccess = false,
					oKey, sKeyProperty;
				if (mParams && aKeys) {
					iLength = aKeys.length;
					for (i = 0; i < iLength; i++) {
						// assume key handling shall be successful
						bSuccess = true;
						oKey = aKeys[i];
						// Keys are located either at name (resource/entity key) or PropertyPath (SemanticKey annotation)
						sKeyProperty = oKey.name || oKey.PropertyPath;
						if (!mParams[sKeyProperty] || mParams[sKeyProperty].length > 1) {
							// if no key params or multiple key params are present set unsuccessful and break
							bSuccess = false;
							break;
						}
					}
				}
				return bSuccess;
			};

			//Create with context
			if (this._oStartupParameters && this._oStartupParameters.createWithContext && this._oStartupParameters.createWithContext == "true") {
				oEntitySet = oModel.getMetaModel().getODataEntitySet(this._sEntitySet);
				if (oEntitySet['com.sap.vocabularies.Common.v1.DraftRoot'] && oEntitySet['com.sap.vocabularies.Common.v1.DraftRoot'].NewAction) {
					var oFunctionImport = oModel.getMetaModel().getODataFunctionImport(oEntitySet['com.sap.vocabularies.Common.v1.DraftRoot'].NewAction.String.split("/")[1]);
					var oUrlParameters = {};
					bCreateWithContext = true;

					if (oFunctionImport && oFunctionImport.parameter) {
						for (var i = 0; i < oFunctionImport.parameter.length; i++) {
							if (oFunctionImport.parameter[i].mode == "In" && this._oStartupParameters[oFunctionImport.parameter[i].name]) {
								oUrlParameters[oFunctionImport.parameter[i].name] = this._oStartupParameters[oFunctionImport.parameter[i].name];
							}
						}

						// TODO: use Smart Templates busy indicator
						sap.ui.core.BusyIndicator.show();

						oModel.callFunction("/" + oFunctionImport.name, {
							success: function (oData, oResponse) {
								oNavigationController._initialiseRouting();
								sap.ui.core.BusyIndicator.hide();
								var oModelUtil = new sap.ui.generic.app.util.ModelUtil(oModel);
								var oContext = oModelUtil.getContextFromResponse(oData);
								if (oContext) {
									oNavigationController.navigateToContext(oContext, null, true);
								} else {
									oNavigationController.navigateToMessagePage({
										title: oNavigationController._oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
										replaceURL: true
									});
								}
							},
							error: function (oError) {
								sap.ui.core.BusyIndicator.hide();
								oNavigationController.navigateToMessagePage({
									title: oNavigationController._oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
									replaceURL: true
								});
							},
							method: "POST",
							urlParameters: oUrlParameters
						});
					} else {
						this.navigateToMessagePage({
							title: oNavigationController._oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
							replaceURL: true
						});
					}
				}
			}

			if (!bCreateWithContext) {
				//check: only if the page exists a navigation is allowed
				if (this._sEntitySet && this.oRouter.getRoute(this._sEntitySet)) {
					oEntitySet = oModel.getMetaModel().getODataEntitySet(this._sEntitySet);
					if (oEntitySet) {
						oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
					}
					if (oEntityType) {
						bCheckKeys = fCheckKeys(oEntityType.key.propertyRef, this._oStartupParameters);
					}

					if (bCheckKeys) {
						// if entity key check passes, a full technical key can be
						// created
						sHash = oModel.createKey(this._sEntitySet, this._oStartupParameters);
						if (sHash) {
							this._oHashChanger.replaceHash(sHash);
						}
					} else {
						// get the semantic key annotation
						aSemanticKey = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
						bCheckKeys = fCheckKeys(aSemanticKey, this._oStartupParameters);

						if (bCheckKeys) {
							this._readObject(aSemanticKey, this._oStartupParameters, oModel);
							// read will trigger the initialisation as needed
							return;
						}
					}
				}
				this._initialiseRouting();
			}
		}.bind(this));
	};

	/**
	 * Creates necessary routing info and initialises the Router
	 *
	 * @private
	 */
	NavigationController.prototype._initialiseRouting = function() {
		var sHash;
		this._oHistory = new History(this._oHashChanger);
		if (!this._oHashChanger.getHash()) {
			sHash = "";
			// no route is set yet, check if start entity was passed via parameter
			if (this._oStartupParameters && this._oStartupParameters.route && this._oStartupParameters.route.length === 1) {
				sHash = this._oStartupParameters.route[0];
				this._oHashChanger.replaceHash(sHash);
			}
		}
		this.oRouter.initialize();
	};



	NavigationController.prototype._preprocessForComplexTable = function(aPages) {
		for (var iPage in aPages) {
			var oPage = aPages[iPage];
			if (oPage && oPage.component && oPage.component.settings && oPage.component.settings.sections) {
				for (var iSection in oPage.component.settings.sections ) {
					var oSection = oPage.component.settings.sections[iSection];
					if (oSection.tableMode === "ComplexTable") {
						oPage = this._generateRouteForComplexTable(oPage, iSection);
					}
				}
			}
			if (oPage && oPage.pages) {
				oPage.pages = this._preprocessForComplexTable(oPage.pages);
			}
			aPages[iPage] = oPage;
		}
		return aPages;
	};

	NavigationController.prototype._generateRouteForComplexTable = function(oPage, iSection) {
	// TODO: can sNavProp and sEntitySet be retrieved based on Faced ID -> Annotation Path -> ... AT PREPROCESSING TIME?
		/*
		var oModel = this.oComponent.getModel();
		var oMetaModel = oModel.getMetaModel();
		*/
		var oSection = oPage.component.settings.sections[iSection];
		var sNavProp = oSection.navigationProperty;
		var sEntitySet = oSection.entitySet;
		var sGridTable = oPage.component.settings.gridTable;
		var sSmartVariantManagement = true; //always set to true
		var oSubPage;
		if (oPage.pages) {
			oSubPage = this._getApplicableSubPage(oPage.pages, sNavProp, sEntitySet);
		}

		var oNewPage = {
				"navigationProperty": sNavProp,
				"entitySet": sEntitySet,
				"component": {
					"name": "sap.suite.ui.generic.template.ListReport",
					"list": true,
					"settings" : {
						"gridTable" : sGridTable,
						//"multiSelect" : true, // TODO handle multi select also via RTA?
						"complexListId": iSection,
						"smartVariantManagement": sSmartVariantManagement
					}
				},
				"pages": [ oSubPage ]
			};
		if (!oPage.pages) {
			oPage.pages = [];
		}
		oPage.pages.push(oNewPage);
		return oPage;
	};

	NavigationController.prototype._getApplicableSubPage = function(aPages, sNavProp, sEntitySet) {
		for (var iPage in aPages) {
			var oPage = aPages[iPage];
			if (oPage.navigationProperty === sNavProp && oPage.entitySet === sEntitySet) {
				return oPage;
			}
		}
	};



	/**
	 * Creates necessary routing metadata from configuration and adds it to the Router
	 *
	 * @private
	 */
	NavigationController.prototype._generateRoutingMetadata = function() {
		var oConfig = this.oComponent.getConfig(),
			oTopRouteConfig, oTopRoute;
		if (!oConfig.pages || !oConfig.pages.length || oConfig.pages.length === 0) {
			throw new Error("Route Configuration missing");
		} else if (oConfig.pages.length > 1) {
			throw new Error("Currently only one Top route supported");
		} else {
			// preprocess route configuration
			oConfig.pages = this._preprocessForComplexTable(oConfig.pages);
			// create Top-Route
			// currently only one top route supported
			oTopRouteConfig = oConfig.pages[0];

			// Store the top route's entitySet, since it could be used later
			this._sEntitySet = oTopRouteConfig.entitySet;

			oTopRoute = this._createRoute(oTopRouteConfig, "root", 0);
			this.oRouter.addRoute(oTopRoute);

			this._createQueryRoute(oTopRoute);

			this._createChildRoutes(oTopRouteConfig, 0, null);
		}
	};

	/**
	 * Creates child route from the specified route configuration
	 *
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {Number} iLevel - the level
	 * @param {Object} oParent - the parent route (if any)
	 */
	NavigationController.prototype._createChildRoutes = function(oRoute, iLevel, oParent) {
		var i, iLen;
		if (oRoute.pages) {
			iLen = oRoute.pages.length;
			for (i = 0; i < iLen; i++) {
				this._createRoutes(oRoute.pages[i], (iLevel + 1), oParent);
			}
		}
	};

	/**
	 * Creates all necessary route(s) metadata from configuration and adds it to the Router instance
	 *
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {Number} iLevel - the level
	 * @param {Object} oParent - the parent route (if any)
	 */
	NavigationController.prototype._createRoutes = function(oRoute, iLevel, oParent) {
		if (oRoute.component){ //in case of intent there is no internal route to be created
			var oNewRoute = this._createRoute(oRoute, oRoute.component.list ? "aggregation" : "detail", iLevel, oParent);
			this.oRouter.addRoute(oNewRoute);
			this._createQueryRoute(oNewRoute);
			this._createChildRoutes(oRoute, iLevel, oNewRoute);
		}
	};

	/**
	 * Creates a Query route from the specified route and adds it to the router
	 *
	 * @private
	 * @param {Object} oRoute - the route configuration
	 */
	NavigationController.prototype._createQueryRoute = function(oRoute) {
		var oQueryRoute = jQuery.extend({}, oRoute);
		oQueryRoute.name = oRoute.name + "query";
		oQueryRoute.pattern = oRoute.pattern + "{?query}";
		this.oRouter.addRoute(oQueryRoute);
	};

	/**
	 * Creates and returns a route metadata from configuration
	 *
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {string} sOperation - the operation for which the route has to be created
	 * @param {Number} iLevel - the level
	 * @param {Object} oParentRoute - the parent route (if any)
	 * @returns {Object} the created route metadata
	 */
	NavigationController.prototype._createRoute = function(oRoute, sOperation, iLevel, oParentRoute) {
		var sPathPattern, oNewRoute;
		sPathPattern = oRoute.navigationProperty || oRoute.entitySet;

		oNewRoute = jQuery.extend({}, oRoute);
		oNewRoute.path = "/" + oRoute.entitySet;
		oNewRoute.operation = sOperation;
		oNewRoute.viewLevel = iLevel;
		// TODO: use only component name here?
		oNewRoute.template = oRoute.component ? (oRoute.component.name || oRoute.component) : oRoute.template;

		switch (sOperation) {
			case "root":
				oNewRoute.name = 'root';
				oNewRoute.pattern = '';
				break;
			case "aggregation":
				oNewRoute.name = sPathPattern + "~aggregation";
				oNewRoute.pattern = sPathPattern;
				break;
			default:
				oNewRoute.name = sPathPattern;
				oNewRoute.pattern = sPathPattern + "({keys" + iLevel + "})";
				break;
		}

		if (oParentRoute) {
			oNewRoute.name = oParentRoute.name + "/" + oNewRoute.name;
			oNewRoute.pattern = oParentRoute.pattern + "/" + oNewRoute.pattern;
			oNewRoute.parentEntitySet = oParentRoute.entitySet;
		}
		oNewRoute.view = oNewRoute.name; // TODO: simplify this
		oNewRoute.controlId = this._sNavigationTargetId;
		oNewRoute.controlAggregation = "pages";
		return oNewRoute;
	};

	/**
	 * Creates a new ComponentContainer with template from routing configuration
	 *
	 * @private
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {sap.ui.core.ComponentContainer} instance of the component container
	 */
	NavigationController.prototype._createComponentInstance = function(oRouteConfig) {
		var sTemplate, sEntitySet, oComponentContainer, oSettings;
		sTemplate = oRouteConfig.template;
		sEntitySet = oRouteConfig.entitySet;

		oSettings = {
			appComponent: this.oComponent,
			isLeaf: !oRouteConfig.pages || !oRouteConfig.pages.length,
			subPages: oRouteConfig.pages,
			entitySet: sEntitySet,
			navigationProperty: oRouteConfig.navigationProperty,
			routeConfig: oRouteConfig,
			componentData: {
				preprocessorsData: {}
			}
		};

		if (oRouteConfig.component.settings) {
			// consider component specific settings from app descriptor
			jQuery.extend(oSettings, oRouteConfig.component.settings);
		}

		try {
			oComponentContainer = new ComponentContainer({
				name: sTemplate,
				propagateModel: true,
				width: '100%',
				height: '100%',
				handleValidation: true,
				settings: oSettings
			});
			return oComponentContainer;
		} catch (e) {
			throw new Error("Component " + sTemplate + " could not be loaded");
		}
	};

	/**
	 * Event hander fired by router once it finds a match
	 *
	 * @private
	 * @param {Object} oEvt - the event object
	 */
	NavigationController.prototype._handleRouteMatched = function(oEvt) {
		this._oTemplateContract.oApplication.onRouteMatched(oEvt);
		var oView, oRouteConfig, sKey, oKeys, sPath;
		oView = oEvt.getParameter("view");
		oRouteConfig = oEvt.getParameter("config");

		// remove all messages before setting a new binding context
		// sap.ui.getCore().getMessageManager().removeAllMessages();

		// If the path from a binding context exists --> use it instead of checking for operation in route config
		if (this._oTargetContextPath) {
			sPath = this._oTargetContextPath;
			// delete the path from binding context, so it not read again
			delete this._oTargetContextPath;
			//
		} else if (oRouteConfig.operation !== "root") { // check for operation
			if (oRouteConfig.operation === "aggregation") {
				sPath = "/" + oRouteConfig.pattern;
			} else {
				// The view is for an instance
				sPath = this._getContextPath(oRouteConfig);
			}
			oKeys = oEvt.getParameter("arguments");
			delete oKeys["?query"];
			if (oKeys) {
				for (sKey in oKeys) {
					// replace each key in pattern with corresponding key in argument
					sPath = sPath.replace("{" + sKey + "}", oKeys[sKey]);
				}
			}
		}

		// Bind the view from the path
		this._activateView(oView, sPath);
	};

	/**
	 * calls onActivate on the specified view, if it exists
	 *
	 * @private
	 * @param {Object} oView - the view
	 * @param {string} sPath - the path in the model
	 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
	 */
	NavigationController.prototype._activateView = function(oView, sPath, bDelayedActivate) {
		var oOldPage, oOldComponent, oComponent, oViewEventDelegate;
		if (oView) {
			// Check if a component exists
			if (oView.getComponentInstance) {
				oComponent = oView.getComponentInstance();
				// if no component exists --> delay handling for activation/binding by attaching to the rendering delegate
				if (!oComponent) {
					oViewEventDelegate = {
						onBeforeRendering: function() {
							// at this point of time the component should exists;
							// --> if so, retrigger the activate call
							oView.removeEventDelegate(oViewEventDelegate, this);
							if (oView.getComponentInstance && oView.getComponentInstance()) {
								this._activateView(oView, sPath, true);
							}
						}
					};
					oView.addEventDelegate(oViewEventDelegate, this);
					return;
				}
			}

			// Check if an old/active view exists
			// try to use previous page - since it should be the old one by default
			oOldPage = this._oTemplateContract.oNavContainer.getPreviousPage();
			// if activate was not delayed and the view is not same as the current page - use the current page; since we still might not haven
			// transitioned to the new page
			if (!bDelayedActivate && (oOldPage || oView !== this._oTemplateContract.oNavContainer.getCurrentPage())) {
				oOldPage = this._oTemplateContract.oNavContainer.getCurrentPage();
			}
			// trigger onDeactivate on the old component instance
			if (oOldPage && oOldPage.getComponentInstance) {
				oOldComponent = oOldPage.getComponentInstance();
				if (oOldComponent && oOldComponent.onDeactivate) {
					oOldComponent.onDeactivate();
				}
			}

			// trigger onActivate on the component instance
			if (oComponent) {
				oComponent.onActivate(sPath);
			}
		}
	};

	/**
	 * Sets/Replaces the hash via the router/hash changer
	 *
	 * @private
	 * @param {string} sHash - the hash string
	 * @param {boolean} bReplace - whether the hash should be replaced
	 */
	NavigationController.prototype._navigate = function(sHash, bReplace) {
		if (!sHash) {
			sHash = ""; // when no hash is passed, undefined seems to be used in the URL
		}
		if (bReplace) {
			this.oRouter.oHashChanger.replaceHash(sHash);
		} else {
			this.oRouter.oHashChanger.setHash(sHash);
		}
	};

	/**
	 * Navigates to the root view.
	 *
	 * @public
	 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
	 */
	NavigationController.prototype.navigateToRoot = function(bReplace) {
		this._navigate("", bReplace);
	};

	/**
	 * Navigates back to the previous view.
	 *
	 * @public
	 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
	 */
	NavigationController.prototype.navigateBack = function(bReplace) {
		this._navigate(this._oHistory ? this._oHistory.getPreviousHash() : "", bReplace);
	};

	/**
	 * get the navigation path from binding context
	 *
	 * @private
	 * @param {Object} oTargetContext - the binding context
	 * @param {string} sNavigationProperty - the navigation property that should replace the entity
	 * @returns {string} the resolved path
	 */
	NavigationController.prototype._getNavigationPath = function(oTargetContext, sNavigationProperty) {
		var sPath, aPath, sEntitySet;
		// Get the path from binding context without "/"
		sPath = oTargetContext.getPath().substring(1);
		// Get the entityset from path
		aPath = sPath.split('(');
		if (aPath[0]) {
			sEntitySet = aPath[0];
		}
		// Replace the entitySet with navigationProperty in the path, if it is specified
		if (sNavigationProperty) {
			sPath = sPath.replace(sEntitySet, sNavigationProperty);
			if (sPath.indexOf("/") === 0) {
				sPath = sPath.substring(1);
			}
		}
		return sPath;
	};

	/**
	 * get the context path from navigation path/pattern
	 *
	 * @private
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {String} the context path
	 */
	NavigationController.prototype._getContextPath = function(oRouteConfig) {
		var sPath, sPathPattern, iIndex;
		if (oRouteConfig) {
			// get the pattern from route configuration
			sPath = oRouteConfig.pattern;
			// get the current path pattern from either navigation property or the entitySet
			sPathPattern = oRouteConfig.navigationProperty || oRouteConfig.entitySet;
			if (sPath && sPathPattern) {
				iIndex = sPath.indexOf("{?query}");
				// if the query is not at the beginning there is a query suffix
				if (iIndex > 0) {
					// get the current path by ignoring the query suffix
					sPath = sPath.substring(0, iIndex);
				}
				// reset the index
				iIndex = -1;
				// Look for path pattern with ({key
				sPathPattern += "({keys";
				iIndex = sPath.indexOf(sPathPattern);
				// if the pattern is not at the beginning there is a parent path prefix
				if (iIndex > 0) {
					// get the current path by ignoring the parent prefix
					sPath = sPath.substring(iIndex);
				}
				// replace the navigation property with entity set to form the binding context path
				if (oRouteConfig.navigationProperty) {
					sPath = sPath.replace(oRouteConfig.navigationProperty, oRouteConfig.entitySet);
				}
				// context always needs to start with a "/"
				sPath = "/" + sPath;
			}
		}
		return sPath;
	};

	/**
	 * Event handler fired by router when no matching route is found
	 *
	 * @private
	 * @param {Object} oEvt - the event object
	 */
	NavigationController.prototype._handleBypassed = function() {
		this._oTemplateContract.oApplication.onBypassed();
		this.navigateToMessagePage({
			title: this._oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
			replaceURL: true
		});
	};

	/**
	 * Returns a map of views currently existing in the navigation controller.
	 *
	 * @protected
	 * @returns {Object} the views from the navigation controller
	 */
	NavigationController.prototype.getViews = function() {
		return this.oViews;
	};

	/**
	 * Returns the NavContainer instance used in the application.
	 *
	 * @protected
	 * @returns {sap.m.NavContainer} the NavContainer instance
	 */
	NavigationController.prototype.getNavContainer = function() {
		return this._oTemplateContract.oNavContainer;
	};

	/**
	 * perform a read with the specified data and trigger further initialisation of router
	 *
	 * @private
	 * @param {Array} aKeys - the keys used to create the filter
	 * @param {Object} mParams - object containing parameters
	 * @param {Object} oModel- the odata model instance
	 */
	NavigationController.prototype._readObject = function(aKeys, mParams, oModel) {
		var i, iLen, sProperty, sValue, aFilters = [];
		if (aKeys && mParams && oModel) {
			iLen = aKeys.length;
			for (i = 0; i < iLen; i++) {
				// get property from property path
				sProperty = aKeys[i].PropertyPath;
				// get value from parameter array (should have only 1)
				sValue = mParams[sProperty][0];
				aFilters.push(new Filter(sProperty, FilterOperator.EQ, sValue));
			}
			oModel.read("/" + this._sEntitySet, {
				filters: aFilters,
				success: function(oResult) {
					var oRow, i, iLength, sKey;
					if (oResult && oResult.results) {
						iLength = oResult.results.length;
						for (i = 0; i < iLength; i++) {
							oRow = oResult.results[i];
							if (oRow && oRow.IsActiveEntity) {
								break;
							}
							oRow = null;
						}
						if (!oRow) {
							oRow = oResult.results[0];
						}
					}
					if (oRow) {
						sKey = oModel.getKey(oRow);
					}
					if (sKey) {
						this._oHashChanger.replaceHash(sKey);
					}
					this._initialiseRouting();
				}.bind(this),
				error: function(oError) {
					// just continue with initialisation in case of errors
					this._initialiseRouting();
				}.bind(this)
			});
		}

	};

	/**
	 * Sets the root page to dirty
	 *
	 * @public
	 */
	NavigationController.prototype.setRootPageToDirty = function() {
		var oViews = this.getViews();
		if (oViews && oViews.root) {
			var oInstance = oViews.root.getComponentInstance();
			if (oInstance && typeof oInstance.setIsRefreshRequired === "function") {
				oInstance.setIsRefreshRequired(true);
			}
		}
	};

	/**
	 * Sets parent page to dirty
	 * @param {Object} oComponent - the component which parent shall be set to dirty
	 * @param {String} sNavigationProperty - only this navigation property is set to dirty
	 * @public
	 */
	NavigationController.prototype.setParentToDirty = function(oComponent, sNavigationProperty, bNoRecursive) {
		var oSettings, oParentSettings, oParent, mRefreshInfos, mComponentRegistry = this._oTemplateContract.componentRegistry;

		// find current view and search its parent
		var sMyId = oComponent.getId();
		oSettings = oComponent.getComponentContainer().getSettings();
		var oRouteConfig = oSettings && oSettings.routeConfig;
		if (oRouteConfig){
			if (oRouteConfig.viewLevel === 0) {
				return false;
			} else {
				for (var sComponentId in mComponentRegistry){
					if (sComponentId !== sMyId){
						oParentSettings = mComponentRegistry[sComponentId].oComponent.getComponentContainer().getSettings();

						if (oParentSettings && oParentSettings.routeConfig && oParentSettings.routeConfig.viewLevel === (oRouteConfig.viewLevel - 1) && (oRouteConfig.viewLevel === 1 || oParentSettings.routeConfig.entitySet === oRouteConfig.parentEntitySet)) {
							oParent = mComponentRegistry[sComponentId].oComponent;


							if (sNavigationProperty) {
								mRefreshInfos = mComponentRegistry[sComponentId].oGenericData.mRefreshInfos;
								mRefreshInfos[sNavigationProperty] = true;
							} else {
								if (typeof oParent.setIsRefreshRequired === "function") {
									oParent.setIsRefreshRequired(true);
								}
							}


							// there could be more components with the same entity set on the parent level - not yet supported due to unique ID concept but will be replaced once we have the component hierarchy/
							break;
						}
					}
				}

				if (oParent && !bNoRecursive){
					// check if parent has complex tables as children and set them to dirty
					this._setComplexTableChildrenToDirty(oParent, sNavigationProperty);
				}

			}
		}
	};

	/**
	 * Sets parent page to dirty
	 * @param {Object} oComponent - the component that shall be set to dirty
	 * @param {String} sNavigationProperty - only this navigation property is set to dirty
	 * @public
	 */

	NavigationController.prototype.setMeToDirty = function(oComponent, sNavigationProperty) {

		if (sNavigationProperty) {
			var mRefreshInfos = this._oTemplateContract.componentRegistry[oComponent.getId()].oGenericData.mRefreshInfos;
			mRefreshInfos[sNavigationProperty] = true;
		} else {
			if (typeof oComponent.setIsRefreshRequired === "function"){
				oComponent.setIsRefreshRequired(true);
			}
		}

		// complex table need to be considered in a special way
		var oSettings = oComponent.getComponentContainer().getSettings();
		var bComplexTable = sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oSettings.routeConfig);
		if (bComplexTable){
			// component is a complex table, set parent to dirty
			this.setParentToDirty(oComponent, sNavigationProperty, true);
		} else {
			// check if component has complex table children and set them to dirty
			this._setComplexTableChildrenToDirty(oComponent, sNavigationProperty);
		}
	};

	/**
	 * set all complex table children to dirty
	 *
	 * @private
	 */
	NavigationController.prototype._setComplexTableChildrenToDirty = function(oComponent, sNavigationProperty) {
		var oParentSettings, oComplexTableSettings, bIsComplexTable, mComponentRegistry = this._oTemplateContract.componentRegistry;

		oParentSettings = oComponent.getComponentContainer().getSettings();

		for (var sComponentId in mComponentRegistry){
			oComplexTableSettings = mComponentRegistry[sComponentId].oComponent.getComponentContainer().getSettings();
			bIsComplexTable = sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oComplexTableSettings.routeConfig);
			if (bIsComplexTable){

				if (oParentSettings.routeConfig && oParentSettings.routeConfig.viewLevel === (oComplexTableSettings.routeConfig.viewLevel - 1) && (oParentSettings.routeConfig.entitySet === oComplexTableSettings.routeConfig.parentEntitySet)) {
					var oComplexTableComponent = mComponentRegistry[sComponentId].oComponent;
					if (typeof oComplexTableComponent.setIsRefreshRequired === "function") {
						oComplexTableComponent.setIsRefreshRequired(true);
					}
				}
			}
		}
	};

	/**
	 * get children - temporarily added, to be refactored
	 *
	 * @private
	 */
	NavigationController.prototype._getChildren = function(sView, oOtherViews) {
		var aChildren = [];
		var oOtherViews = oOtherViews || this.getViews();
		var oSettings = oOtherViews[sView].getSettings();
		for (var sOtherView in oOtherViews) {
			var oOtherSettings = oOtherViews[sOtherView].getSettings();
			if (oSettings.routeConfig.viewLevel + 1 === oOtherSettings.routeConfig.viewLevel
				&& oSettings.routeConfig.entitySet === oOtherSettings.routeConfig.parentEntitySet) {
				aChildren.push(sOtherView);
			}
		}
		return aChildren;
	};

	/**
	 * get successors - temporarily added, to be refactored
	 *
	 * @private
	 */
	NavigationController.prototype._getSuccessors = function(sView, oViews) {
		var aSuccessors = [];
		var aChildren = this._getChildren(sView, oViews);
		for (var i = 0; i < aChildren.length; i++){
			aSuccessors = aSuccessors.concat(this._getSuccessors(aChildren[i], oViews));
		}
		return aSuccessors.concat(aChildren);
	};

	/**
	 * Unbind all children components
	 * @param {Object} oComponent - the component which children should be unbinded
	 * @public
	 */
	NavigationController.prototype.unbindChildren = function(oComponent) {
		var oViews = this.getViews();
		var sMyId = oComponent.getId();
		for (var sView in oViews) {
			var oInstance = oViews[sView].getComponentInstance();
			if (oInstance && oInstance.getId() === sMyId) {
				var aSuccessors = this._getSuccessors(sView, oViews);
				for (var i = 0; i < aSuccessors.length; i++) {
					oViews[aSuccessors[i]].unbindElement();
				}
			}
		}
	};

	/**
	 * Cleans up the resources.
	 *
	 * @public
	 */
	NavigationController.prototype.destroy = function() {
		BaseObject.prototype.destroy.apply(this, arguments);
		if (this._oHistory && this._oHistory.destroy) {
			this._oHistory.destroy();
		}
		this._oHistory = null;
		this.oRouter = null;
		this.oViews = null;
		this.oComponent = null;
	};

	return NavigationController;

});

}; // end of sap/suite/ui/generic/template/lib/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateComponent') ) {
jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained

(function() { 
	"use strict";
	// monkey patch the sap.ui.core.CustomizingConfiguration
	// as UI5 doesn't support viewExtensions for nested components we replace the
	// component in vObject
	// with the parent component. The getAppComponent function comes from the
	// component property appComponent
	// in sap.ui.generic.template.TemplateComponent.js
	var fOriginal = sap.ui.core.CustomizingConfiguration.getViewExtension;
	sap.ui.core.CustomizingConfiguration.getViewExtension = function(sViewName, sExtensionPointName, vObject) {
		// check whether a context is given and determine a componentId from it
		// - either it is a string, then this is the pre-processor use case and the
		// string is a component id
		// - or it is a view or fragment and the Id of the owner component should be
		// used
		var sComponentId = vObject && typeof vObject === "string" ? vObject : (vObject && sap.ui.core.Component
				.getOwnerIdFor(vObject));
		// retrieve the component (if an Id is known)
		var oComponent = sComponentId && sap.ui.component(sComponentId);
		// only when it inherits from TemplateComponent, ask for the AppComponent
		// instead
		if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
			vObject = oComponent.getAppComponent().getId();
		}
		var oResultConfig = fOriginal(sViewName, sExtensionPointName, vObject);
		return oResultConfig;
	};

	// monkey patch for controller extension
	var fOriginal2 = sap.ui.core.CustomizingConfiguration.getControllerExtension;

	sap.ui.core.CustomizingConfiguration.getControllerExtension = function(sControllerName, sComponentID) {

		var oComponent = null;
		if (sComponentID) {
			oComponent = sap.ui.component(sComponentID);

			if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
				oComponent = oComponent.getAppComponent();
				if (oComponent) {
					sComponentID = oComponent.getId();
				}
			}
		}
		var oResultConfig = fOriginal2(sControllerName, sComponentID);
		return oResultConfig;
	};

	jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateComponent",["sap/ui/core/mvc/ViewType", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel",
		"sap/ui/Device", "sap/suite/ui/generic/template/js/AnnotationHelper"], 
		function(ViewType, UIComponent, JSONModel, ResourceModel, Device) {

		// This method enhances the i18n model which has been attached to the template component via the manifest.
		// For this purpose the following enhancement chain is built:
		// Generic Template texts <- Template specific texts <- Application specific texts
		// Note that the i18n model is actually replaced since the generic template texts are used as basis for this enhacement chain.
		function fnEnhanceI18nModel(oComponent) {
			var oI18NModel = new ResourceModel({ bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n" });
			var oTemplateModel = oComponent.getModel("i18n");
			if (oTemplateModel){
				oI18NModel.enhance(oTemplateModel.getResourceBundle())	;
			}
			var oModelApplication = oComponent.getAppComponent().getModel("i18n|" + oComponent.getMetadata().getComponentName() + "|" + oComponent.getEntitySet());
			if (oModelApplication) {
				oI18NModel.enhance(oModelApplication.getResourceBundle());
			}
			oComponent.setModel(oI18NModel, "i18n");
		}
		
		function fnDetermineStableID(oComponent) {
			if (oComponent.getAppComponent().getMetadata().getComponentName() === "" || oComponent.getTemplateName() === "" || oComponent.getEntitySet() === "") {
				// TODO: Error Handling
			}
			return oComponent.getAppComponent().getMetadata().getComponentName() + "::" + oComponent.getTemplateName() + "::" + oComponent.getEntitySet();
		}
		
		function createParameterModel(sEntityType, oComponent) {
			var isDraftEnabled = oComponent.getAppComponent().getTransactionController().getDraftController().getDraftContext().isDraftEnabled(oComponent.getEntitySet());
			var oSettings = null;
			var oAllSettings = oComponent.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				entityType: sEntityType,
				"sap-ui-debug": window["sap-ui-debug"],
				isDraftEnabled: isDraftEnabled,
				"settings": oSettings,
				"manifest": oComponent.getAppComponent().getMetadata().getManifest()
			});
		}
		
		function createXMLView(oComponent) {
			var oView = null;		

			var oMetaModel = oComponent.getModel().getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oComponent.getEntitySet());
			if (!oEntitySet || !oEntitySet.entityType) {
				// TODO: Error Handling?
				return null;
			}

			fnEnhanceI18nModel(oComponent);
			
			try {
				var sStableId = fnDetermineStableID(oComponent);
				
				oView = sap.ui.getCore().byId(sStableId);
				if (oView){
					jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
					try {
						oView.destroy();
					} catch (ex) {
						jQuery.sap.log.error("Error destroying view: " + ex);
					}
					oView = null;
				}
				
				// device model
				var oDeviceModel = new JSONModel(Device);
				oDeviceModel.setDefaultBindingMode("OneWay");
				
				oView = sap.ui.view({
					preprocessors: {
						xml: {
							bindingContexts: {
								meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
								entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oComponent.getEntitySet(), true))
							},
							models: {
								device: oDeviceModel,
								meta: oMetaModel,
								entitySet: oMetaModel,
								parameter: createParameterModel(oEntitySet.entityType, oComponent)
							},
							preprocessorsData : oComponent.getComponentData().preprocessorsData
						}
					},
					id: sStableId,
					type: ViewType.XML,
					viewName: oComponent.getTemplateName(),
					height: "100%"
				});
			} catch (e) {
				// TODO: Error Handling?
				// forward exception
				throw e;
			}
			return oView;
		}
		
				
		return UIComponent.extend("sap.suite.ui.generic.template.lib.TemplateComponent", {

			metadata: {
				properties: {
					/**
					 * Name of template
					 */
					templateName: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Entity Set
					 */
					entitySet: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Navigation property of the current component
					 */
					navigationProperty: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Instance of AppComponent
					 */
					appComponent: {
						type: "object",
						defaultValue: null
					},
					/**
					 * Refresh required when the component is activated
					 */
					isRefreshRequired: {
						type: "boolean",
						defaultValue: false
					},
					isLeaf: {
						type: "boolean"
					}
				},
				library: "sap.suite.ui.generic.template"
			},

			init: function() {

				(UIComponent.prototype.init || jQuery.noop).apply(this, arguments);

				var oUIModel = new JSONModel({
					editable: false,
					enabled: false
				});
				this.setModel(oUIModel, "ui");

				var oParsingSerive = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");

				var oTemplatePrivate = new JSONModel({
					generic: {
						crossAppNavSupport: !!oParsingSerive && oParsingSerive.isIntentUrl(document.URL),
						draftIndicatorState: sap.m.DraftIndicatorState.Clear
					}
				});
				oTemplatePrivate.setDefaultBindingMode("OneWay");
				this.setModel(oTemplatePrivate, "_templPriv");

			},
			
			// TODO: clarify with Marcel: this.oContainer
			getComponentContainer: function() {
				// TODO: align with UI5 - how to access component container
				return this.oContainer;
			},
			
			// TODO: align with UI5 - how to access component container (applies to
			// several places)
			// Overwrite method of UIComponent
			setContainer: function() {
				var oModel;
				// call overwritten setContainer (sets this.oContainer)
				UIComponent.prototype.setContainer.apply(this, arguments);
				if (this.oContainer) {
					oModel = this.oContainer.getModel();
					if (oModel) {
						oModel.getMetaModel().loaded().then(function() {
							// Do the templating once the metamodel is loaded
							this.runAsOwner(function() {
								var oView = createXMLView(this);
								this.setAggregation("rootControl", oView);
								this.oContainer.invalidate();
							}.bind(this));
						}.bind(this));
					}
				}
			},
			
			// Overwrite method of UIComponent
			getRouter: function() {
				if (this.getAppComponent()) {
					return this.getAppComponent().getRouter();
				}
				return UIComponent.prototype.getRouter.apply(this, arguments);
			}

		});
	});

})();
}; // end of sap/suite/ui/generic/template/lib/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateViewController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateViewController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateViewController",["sap/ui/core/mvc/Controller"], function(mvcController) {
	"use strict";

	return mvcController.extend("sap.suite.ui.generic.template.lib.TemplateViewController", {

		metadata: {
			library: "sap.suite.ui.generic.template"
		}
	});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/lib/TemplateViewController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ViewDependencyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ViewDependencyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ViewDependencyHelper",["sap/ui/base/Object"], function(BaseObject) {
	"use strict";

	// Class for busy handling
	function getMethods(oTemplateContract) {

		function setAllPagesDirty(){
			for (var sId in oTemplateContract.componentRegistry){
				var oComponentRegistryEntry = oTemplateContract.componentRegistry[sId];
				oComponentRegistryEntry.oComponent.setIsRefreshRequired(true);
			}
		}

		return {
			setAllPagesDirty: setAllPagesDirty
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ViewDependencyHelper", {
		constructor: function(oTemplateContract) {
			jQuery.extend(this, getMethods(oTemplateContract));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ViewDependencyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
 
/**
* @namespace reserved for Smart Temaplates
* @name sap.suite.ui.generic.template
* @public
*/

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.suite.ui.generic.template.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/library",[
	'jquery.sap.global', 'sap/ui/core/library'
], function(jQuery, library1) {
	"use strict";

	/**
	 * Library with generic Suite UI templates.
	 * 
	 * @namespace
	 * @name sap.suite.ui.generic.template
	 * @public
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.suite.ui.generic.template",
		dependencies: [
			"sap.ui.core"
		],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.38.16"
	});

	return sap.suite.ui.generic.template;

}, /* bExport= */false);
}; // end of sap/suite/ui/generic/template/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI",["sap/ui/base/Object",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController"], function(BaseObject,
		NonDraftTransactionController) {
	"use strict";
	/**
	 * API to be used in extensions of ListReport. Breakout coding can access an instance of this class via
	 * <code>this.extensionAPI</code>. Do not instantiate yourself.
	 * @class
	 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var oTransactionController;
		return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI.prototype */ {
			/**
			 * Get the list entries currently selected
			 * 
			 * @return {sap.ui.model.Context[]} contains one entry per line selected
			 * @public
			 */
			getSelectedContexts: function() {
				return oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartTable);
			},
			/**
			 * Get the transaction controller for editing actions on the list Note: Currently implemented for non draft case
			 * 
			 * @return {sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController} the transaction controller
			 * @public
			 */
			getTransactionController: function() {
				if (oTemplateUtils.oCommonUtils.isDraftEnabled()) {
					throw new Error("Transaction support on ListReport for draft case not implemented yet");
				}
				oTransactionController = oTransactionController
						|| new NonDraftTransactionController(oTemplateUtils, oController, oState);
				return oTransactionController;
			},
			/**
			 * Refreshes the List from the backend
			 * 
			 * @public
			 */
			refreshTable: function() {
				oState.oSmartTable.rebindTable();
			},
			/**
			 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
			 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares for
			 * defining dependency and handling device specific style classes
			 * 
			 * @param {sap.ui.core.Control} oControl the control to be attached to the view
			 * @public
			 */			
			attachToView: function(oControl){
				oTemplateUtils.oCommonUtils.attachControlToView(oControl);
			},
			/**
			 * Invokes multiple time the action with the given name and submits changes to the back-end.
			 *
			 * @param {string} sFunctionName The name of the function or action
			 * @param {array} aContext The given binding contexts
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
			 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
			 * @public
			 */
			invokeActions: function(sFunctionName, aContext){
				return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI",
	["sap/ui/base/Object", "sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController"
	],
	function(BaseObject, DraftTransactionController, NonDraftTransactionController) {
		"use strict";
		/**
		 * API to be used in extensions of ObjectPage. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oState) {
			var oTransactionController;
			return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the entries currently selected in one ui element
				 *
				 * @param {string} sUiElementId the id identifying the ui element the selected context is requested for
				 * @return {sap.ui.model.Context[]} contains one entry per entry selected
				 * @public
				 */
				getSelectedContexts: function(sUiElementId) {
					var oControl = oController.byId(sUiElementId);
					return oTemplateUtils.oCommonUtils.getSelectedContexts(oControl);
				},
				/**
				 * Get the transaction controller for editing actions on the page. Note: Currently implemented for draft case
				 *
				 * @return {sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController} the transaction
				 *         controller
				 * @public
				 */
				getTransactionController: function() {
					if (!oTransactionController) {
						var Class = oTemplateUtils.oCommonUtils.isDraftEnabled() ? DraftTransactionController : NonDraftTransactionController;
						oTransactionController = new Class(oTemplateUtils, oController);
					}
					return oTransactionController;
				},
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares
				 * for defining dependency and handling device specific style classes
				 *
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array} aContext The given binding contexts
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, aContext) {
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext);
				},
				/**
				 * Attach a handler to the PageDataLoaded event.
				 * This event is fired each time the object page is navigated to or the object to be displayed is changed
				 * Note, that the event will not be fired before:
				 * <ul compact>
				 * <li>the navigation to the page has been completed
				 * <li>the header data of the object are available
				 * </ul>
				 * @param {function} fnFunction the handler function. Note that the event passed to this function possesses an attribute <code>context</code>
				 * which contains the current header context
				 * @public
				 */
				attachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.attach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Detach a handler from the PageDataLoaded event
				 * 
				 * @param {function} fnFunction the handler function
				 * @public
				 */
				detachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.detach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Registers a filter provider for the the message popover
				 * 
				 * @param {fnProvider} Callback function to provide single or array of sap.ui.model.Filter
				 * @public
				 */
				registerMessageFilterProvider: function(fnProvider) {
					oState.messageButtonHelper.registerMessageFilterProvider(fnProvider);
				}

			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oState) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

			}
		});
	});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.BusyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/BusyHelper",["sap/ui/base/Object", "sap/suite/ui/generic/template/lib/MessageUtils"], function(BaseObject, MessageUtils) {
	"use strict";

	// Class for busy handling
	function getMethods(oTemplateContract) {

		var mBusyReasons = {};
		var bIsBusy = false;
		var bBusyDirty = false;
		var iBusyPromiseCount = 0;
		var iBusyDelay = oTemplateContract.oNavContainer.getBusyIndicatorDelay();

		var fnApplyBusyImmediately;

		function fnApplyBusy(bImmediate) {
			bIsBusy = iBusyPromiseCount !== 0 || !jQuery.isEmptyObject(mBusyReasons);
			if (bIsBusy || bImmediate) {
				bBusyDirty = false;
				if (bIsBusy !== oTemplateContract.oNavContainer.getBusy()) {
					oTemplateContract.oNavContainer.setBusy(bIsBusy);
					if (!bIsBusy) {
						oTemplateContract.oNavContainer.setBusyIndicatorDelay(iBusyDelay);
						if (oTemplateContract.hasView()) {
							MessageUtils.handleTransientMessages(oTemplateContract.getDialogFragment);
						}
					}
				}
			} else { // postpone removal of busy indicator until navigation visualisation is finished
				oTemplateContract.oApplication.getCurrentDisplayObject().promise.then(fnApplyBusyImmediately);
			}
		}
		fnApplyBusyImmediately = fnApplyBusy.bind(null, true);

		function fnEnsureApplyBusy(bImmediate) {
			if (bImmediate) {
				oTemplateContract.oNavContainer.setBusyIndicatorDelay(0);
				fnApplyBusy();
			} else if (!bBusyDirty) {
				bBusyDirty = true;
				setTimeout(fnApplyBusy, 0);
			}
		}

		function fnBusyPromiseResolved() {
			iBusyPromiseCount--;
			if (!iBusyPromiseCount) {
				fnEnsureApplyBusy(false);
			}
		}

		function setBusyReason(sReason, bIsActive, bImmediate) {
			if (bIsActive) {
				bIsBusy = true;
				mBusyReasons[sReason] = true;
			} else {
				delete mBusyReasons[sReason];
			}
			fnEnsureApplyBusy(bImmediate);
		}

		function setBusy(oBusyEndedPromise, bImmediate) {
			iBusyPromiseCount++;
			bIsBusy = true;
			if (bImmediate) {
				oTemplateContract.oNavContainer.setBusyIndicatorDelay(0);
			}
			oBusyEndedPromise.then(fnBusyPromiseResolved, fnBusyPromiseResolved);
			fnEnsureApplyBusy(bImmediate);
		}

		return {
			setBusyReason: setBusyReason,
			setBusy: setBusy,
			isBusy: function() {
				return bIsBusy;
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.BusyHelper", {
		constructor: function(oTemplateContract) {
			jQuery.extend(this, getMethods(oTemplateContract));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/BusyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CRUDManager') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CRUDManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ActionUtil'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CRUDManager",["sap/ui/base/Object", "sap/m/MessageToast", "sap/ui/generic/app/util/ModelUtil", "sap/ui/generic/app/util/ActionUtil", "sap/suite/ui/generic/template/lib/MessageUtils"],
	function(BaseObject, MessageToast, ModelUtil, ActionUtil, MessageUtils) {
		"use strict";

		function getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {
			var oRejectedPromise = Promise.reject();
			oRejectedPromise.catch(jQuery.noop);


			function handleError(sOperation, reject, oError, mParameters) {
				MessageUtils.handleError(sOperation, oController, oCommonUtils.getContentDensityClass(), oServices, oError, mParameters);
				return (reject || jQuery.noop)(oError);
			}

			function handleSuccess() {
				MessageUtils.handleTransientMessages(oCommonUtils.getDialogFragment);
			}

			/*
			 * Prepares current OData entity for editing. The entity can either
			 * be a non-draft document or draft root.
			 * @param {boolean} [bPreserveChanges] Set to <code>true</code> to avoid the creation of a new draft when unsaved changes exist in the back-end
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function editEntity(bPreserveChanges) {
				return new Promise(
					function(resolve, reject) {
						oServices.oTransactionController.editEntity(oController.getView().getBindingContext(), bPreserveChanges).then(
							function(oResponse) { //success
								oComponentUtils.rebindHeaderData(oResponse.context.getPath());
								handleSuccess(oResponse);
								return resolve(oResponse.context);
							},
							function(oResponse) { // error handler
								if (oResponse && oResponse.response && oResponse.response.statusCode === '409' && bPreserveChanges) { //there might be unsaved changes
									oResponse.unsavedChanges = true;
									//remove transient message associated with rc 409 in order to prevent message pop-up
									var oMesssageManager = sap.ui.getCore().getMessageManager();
									var aMessages =  oMesssageManager.getMessageModel().oData;
									var aMessagesToBeRemoved = [];
									for (var i = 0; i < aMessages.length; i++) {
										 if (aMessages[i].getCode() === "SDRAFT_COMMON/000") {
											 aMessagesToBeRemoved.push(aMessages[i]); 
										 }
									}
									if (aMessagesToBeRemoved.length > 0) {
										oMesssageManager.removeMessages(aMessagesToBeRemoved);
									}
									return resolve(oResponse);
								} else {
									handleError(MessageUtils.operations.editEntity, reject, oResponse, oResponse);
								}
							}
						);
					}
				);
			}

			/*
			 * Deletes current OData entity. The entity can either be a
			 * non-draft document or a draft document. *
			 *
			 * @param {boolean}
			 *          bDeleteDraftForActiveEntity Can be set to
			 *          <code>true</code> in order to delete the draft entity,
			 *          although the current binding context belongs to the
			 *          active entity
			 * @returns {Promise} A <code>Promise</code> for asynchronous
			 *          execution
			 * @public
			 */
			function deleteEntity(bDeleteDraftForActiveEntity) {
				var oContext = oController.getView().getBindingContext();
				var bIsActiveEntity = oServices.oDraftController.isActiveEntity(oContext);
				var bHasActiveEntity = oServices.oDraftController.hasActiveEntity(oContext);

				return new Promise(
					function(resolve, reject) {
						var fnError = function(oError) {
							oController.getOwnerComponent().getComponentContainer().bindElement(oContext.getPath());
							return handleError(MessageUtils.operations.deleteEntity, reject, oError);
						};
						if (bIsActiveEntity && bDeleteDraftForActiveEntity) {
							// Current context is the active document. But we have to
							// delete the draft of this active document.
							oServices.oDraftController.getDraftForActiveEntity(oContext).then(
								function(oResponse) {
									oServices.oTransactionController.deleteEntity(oResponse.context).then(
										function() {
											setTimeout(
												function() {
													MessageToast.show(oCommonUtils.getText("ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED"));
												}, 50);

											return resolve();
										});
								}, fnError);
						} else {
							oServices.oTransactionController.deleteEntity(oContext).then(
								function() {
									var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
									var oDraftContext = oServices.oDraftController.getDraftContext();
									var bRoot = oDraftContext.isDraftRoot(sEntitySet);
									var sMessageText = oCommonUtils.getText("ST_GENERIC_OBJECT_DELETED");
	
									// replace the message only for the root.
									if (!bIsActiveEntity && bRoot) {
										sMessageText = oCommonUtils.getText(bHasActiveEntity ? "ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED" : "ST_GENERIC_DRAFT_WITHOUT_ACTIVE_DOCUMENT_DELETED");
									}
									setTimeout(function() {
										MessageToast.show(sMessageText);
									}, 50);
	
									return resolve();
								}, 
							fnError);
						}
					}
				);
			}

			/**
			 * Deletes current OData entity. The entity can either be a non-draft document or a draft document. *
			 *
			 * @param {array} aPath Binding contexts or paths (strings) which identify the entities
			 * @returns {Promise} A <code>Promise</code> that receives an array with the responses of the delete requests
			 * @public
			 */
			function deleteEntities(aPath) {

				return new Promise(function(resolve, reject) {
					oServices.oTransactionController.deleteEntities(aPath).then(
						function(aDeleteResults) {
							var aFailedPath = []; // Failed paths
							var aODataMessage = sap.ui.getCore().getMessageManager().getMessageModel().getData(); // OData error messages

							// Find the failed entity paths by comparing aPath and the paths from the OData error messages
							for (var i = 0; i < aODataMessage.length; i++) {
								var sMessageObjectPath = aODataMessage[i].getTarget(); // entity path

								for (var j = 0; j < aPath.length; j++) {
									if (sMessageObjectPath.indexOf(aPath[j]) > -1 /*&& aFailedPath.indexOf(sMessageObjectPath) === -1*/ ) { // match entity path
										aFailedPath.push(sMessageObjectPath);
										break;
									}
								}
							}
							return resolve(aFailedPath);
						},
						function(oError) {
							return reject(oError);
						}
					);
				});
			}

			/*
			 * Modifies current OData entity. The entity can either be a non-draft document or a draft document.
			 *
			 * @param {string} sValue The value that has to be modified
			 * @param {sap.ui.core.Control} oControl The control that modified the entry
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function modifyEntity(sValue, oControl) {

				return new Promise(function(resolve, reject) {
					var oComponent = oController.getOwnerComponent();
					var sEntitySet = oComponent.getEntitySet();
					if (!oServices.oDraftController.getDraftContext().isDraftEnabled(sEntitySet)) {
						return resolve();
					}

					var oBinding = oComponent.getComponentContainer().getElementBinding();
					oServices[oControl ? "oApplicationController" : "oTransactionController"].propertyChanged(sEntitySet, sValue, oBinding, oControl).then(function() {
						return resolve();
					}, handleError.bind(null, MessageUtils.operations.modifyEntity, reject));
				});
			}

			/*
			 * Saves current OData entity. The entity can either be a non-draft document or a draft document.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function saveEntity() {
				return new Promise(function(resolve, reject) {
					oServices.oTransactionController.triggerSubmitChanges().then(function(oResponse) {
						handleSuccess();
						return resolve(oResponse.context);
					}, handleError.bind(null, MessageUtils.operations.saveEntity, reject));
				});
			}

			/*
			 * Activates a draft OData entity. Only the root entity can be activated.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function activateDraftEntity() {

				return new Promise(function(resolve, reject) {
					oServices.oDraftController.activateDraftEntity(oController.getView().getBindingContext()).then(function(oResponse) {
						var oComponent = oController.getOwnerComponent();
						var oComponentContainer = oComponent.getComponentContainer();
						oComponentContainer.unbindElement();
						oComponentUtils.rebindHeaderData(oResponse.context.getPath());
						// Refresh has be enforeced on the Object Binding to reload the dependent data
						// which is displayed on the UI
						oComponentContainer.getObjectBinding().refresh(true);

						handleSuccess();
						return resolve(oResponse);
					}, handleError.bind(null, MessageUtils.operations.activateDraftEntity, reject));
				});
			}

			function getActionUtil(mParameters){
				return new ActionUtil(mParameters);
			}
			
			function callActionImpl(mParameters, fnResolve, fnReject) {
				if (oBusyHelper.isBusy()) {
					fnReject();
					return;
				}
				
				var sFunctionImportPath = mParameters.functionImportPath;
				var aCurrentContexts = mParameters.contexts;
				var oSourceControl = mParameters.sourceControl;
				var sFunctionImportLabel = mParameters.label;
				var sNavigationProperty = mParameters.navigationProperty;

				var oActionProcessor = getActionUtil({
					controller: oController,
					contexts: aCurrentContexts,
					applicationController: oServices.oApplicationController
				});

				var fnActionCallResolve = function(aResponses) {
					var oResponse, oResponseContext;

					if (jQuery.isArray(aResponses) && aResponses.length === 1) {
						// only one context, handle as single action call
						oResponse = aResponses[0];
						oResponseContext = oResponse.response && oResponse.response.context;

						if (oResponseContext && oResponseContext !== oResponse.actionContext && oResponseContext.getPath() !== "/undefined") {
							if (oSourceControl) {
								oCommonUtils.navigateFromListItem(oResponseContext, oSourceControl);
							} else {
								oServices.oNavigationController.navigateToContext(oResponseContext, sNavigationProperty, false);
							}
						}
					}
					fnResolve(aResponses);
				};

				var fnActionCallReject = function(oError) {
					if (!jQuery.isArray(oError)) {
						var mErrorParameters = {
							context: aCurrentContexts
						};
						handleError(MessageUtils.operations.callAction, null, oError, mErrorParameters);
						fnReject(oError);
					}
				};

				oActionProcessor.call(sFunctionImportPath, sFunctionImportLabel).then(function(oResult){
					if (oResult && oResult.executionPromise){
//						new logic
						oBusyHelper.setBusy(oResult.executionPromise);
						oResult.executionPromise.then(fnActionCallResolve,fnActionCallReject);
					} else {
//						old logic - can be deleted as soon as promise from actionUtil.call always resolves to a second promise
						if (!oResult){
//							user cancellation
							fnReject();
						} else {
							fnActionCallResolve(oResult);
						}
					}
				}, function(oError){
					if (!oError){
//						new logic
//						user cancellation
						fnReject();
					} else {
//						old logic - can be deleted as soon as promise from actionUtil.call always resolves to a second promise
						fnActionCallReject(oError);
					}
				});
						
			}

			/*
			 * Calls an OData action (also called OData function import). Afterwards the message handling
			 * is triggered for the returned messages.
			 *
			 * @param {object} mParameters Parameters which are used to identify and fire action
			 * @param {array} mParameters.contexts Contexts relevant for action
			 * @param {string} mParameters.functionImportPath Path to the OData function import
			 * @param {object} [mParameters.sourceControl] Control where a navigation starts (e.g. table)
			 * @param {object} [mParameters.navigationProperty] Property to navigate after action
			 * @param {string} [mParameters.label] Text for the confirmation popup
			 *
			 * @returns {Promise} A Promise that resolves if the action has been executed successfully
			 *
			 * @public
			 */
			function callAction(mParameters) {
				var oRet = new Promise(function(fnResolve, fnReject){
					callActionImpl(mParameters, fnResolve, fnReject);	
				});
				return oRet;
			}
			
			/*
			 * Adds an entry to a table.
			 *
			 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table to which an entry has been added
			 */
			function addEntry(oTable) {

				if (!oTable) {
					throw new Error("Unknown Table");
				}

				var sBindingPath = "";
				var sTableBindingPath = "";
				var sEntitySet = oController.getOwnerComponent().getEntitySet();
				var oEntityType, oEntitySet, oNavigationEnd, oMetaModel;
				var oView = oController.getView();
				var oModel = oView.getModel();

				var oViewContext = oView.getBindingContext();
				if (oViewContext) {
					// Detail screen
					sTableBindingPath = oCommonUtils.getTableBinding(oTable).path;

					// get entityset of navigation property
					oMetaModel = oModel.getMetaModel();
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oNavigationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sTableBindingPath);
					if (oNavigationEnd) {
						sEntitySet = oNavigationEnd.entitySet;
					}

					// create binding path
					sTableBindingPath = "/" + sTableBindingPath;
					sBindingPath = oViewContext.getPath() + sTableBindingPath;
				} else {
					// on list, support only one entityset mapped to the root component
					sBindingPath = "/" + sEntitySet;
				}

				return new Promise(function(resolve, reject) {
					if (oServices.oDraftController.getDraftContext().isDraftEnabled(sEntitySet)) {
						oServices.oDraftController.createNewDraftEntity(sEntitySet, sBindingPath).then(function(oResponse) {
							return resolve({
								newContext: oResponse.context,
								tableBindingPath: sTableBindingPath
							});
						}, handleError.bind(null, MessageUtils.operations.addEntry, reject));
					} else {
						var oNewContext = oModel.createEntry(sBindingPath, {
							batchGroupId: "Changes",
							changeSetId: "Changes"
						});
						return resolve({
							newContext: oNewContext,
							tableBindingPath: sTableBindingPath
						});
					}
				});
			}

			return {
				editEntity: editEntity,
				deleteEntity: deleteEntity,
				deleteEntities: deleteEntities,
				modifyEntity: modifyEntity,
				saveEntity: saveEntity,
				activateDraftEntity: activateDraftEntity,
				callAction: callAction,
				addEntry: addEntry
			};
		}

		return BaseObject.extend(
			"sap.suite.ui.generic.template.lib.CRUDManager.js", {
				constructor: function(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {
					jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper));
				}
			});
	});
}; // end of sap/suite/ui/generic/template/lib/CRUDManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonUtils",["sap/ui/base/Object", "sap/ui/Device", "sap/ui/model/json/JSONModel",
		"sap/ui/comp/smarttable/SmartTable", "sap/ui/table/Table", "sap/m/Table", "sap/m/ListBase",
		"sap/ui/generic/app/navigation/service/NavigationHandler", "sap/suite/ui/generic/template/lib/MessageUtils"], function(BaseObject, Device, JSONModel, SmartTable,
		UiTable, ResponsiveTable, ListBase, NavigationHandler, MessageUtils) {
	"use strict";

	var sContentDensityClass = (function() {
		var sCozyClass = "sapUiSizeCozy", sCompactClass = "sapUiSizeCompact", oBody = jQuery(document.body);
		if (oBody.hasClass(sCozyClass) || oBody.hasClass(sCompactClass)) { // density class is already set by the FLP
			return "";
		} else {
			return Device.support.touch ? sCozyClass : sCompactClass;
		}
	}());

	function getNavigationProperty(oPageEntries, sEntitySet) {
		for (var i in oPageEntries) {
			var oEntry = oPageEntries[i];
			if (oEntry.entitySet === sEntitySet && oEntry.component.list && oEntry.navigationProperty) {
				return oEntry.navigationProperty;
			} else if (oEntry.pages) {
				var result = getNavigationProperty(oEntry.pages, sEntitySet);
				if (result) {
					return result;
				}
			}
		}
	}

	function getMethods(oController, oServices) {

		var oNavigationHandler; // initialized on demand

		// defines a dependency from oControl to the view
		function fnAttachControlToView(oControl) {
			var oView = oController.getView();
			jQuery.sap.syncStyleClass(sContentDensityClass, oView, oControl);
			oView.addDependent(oControl);
		}

		// See documentation of
		// sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment below
		var mFragmentStore = {}; // maps fragment names on fragment instances
		function getDialogFragment(sName, oFragmentController, sModel, fnOnFragmentCreated) {
			var oFragment = mFragmentStore[sName];
			if (!oFragment) {
				oFragment = sap.ui.xmlfragment(oController.getView().getId(), sName, oFragmentController);
				fnAttachControlToView(oFragment);
				var oModel;
				if (sModel) {
					oModel = new JSONModel();
					oFragment.setModel(oModel, sModel);
				}
				(fnOnFragmentCreated || jQuery.noop)(oFragment, oModel);
				mFragmentStore[sName] = oFragment;
			}
			return oFragment;
		}

		var oResourceBundle; // initialized on first use
		function getText() {
			oResourceBundle = oResourceBundle || oController.getOwnerComponent().getModel("i18n").getResourceBundle();
			return oResourceBundle.getText.apply(oResourceBundle, arguments);
		}

		function isDraftEnabled() {
			var oDraftContext = oServices.oDraftController.getDraftContext();
			return oDraftContext.isDraftEnabled(oController.getOwnerComponent().getEntitySet());
		}

		function getSelectedContexts(oControl) {
			var aSelectedContexts = [];
			if (oControl instanceof SmartTable) {
				oControl = oControl.getTable();
			}
			if (oControl instanceof ListBase) {
				aSelectedContexts = oControl.getSelectedContexts();
			} else if (oControl instanceof UiTable) {
				var aIndex = oControl.getSelectedIndices();
				for (var i = 0; i < aIndex.length; i++) {
					aSelectedContexts.push(oControl.getContextByIndex(aIndex[i]));
				}
			}
			return aSelectedContexts;
		}

		/*
		 * Returns a parental table of the given element or null
		 *
		 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a parental table
		 * @returns {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} The parent table or null
		 * @public
		 */
		function getParentTable(oSourceControl){
			var oCurrentControl = oSourceControl;
			while (oCurrentControl) {
					if (oCurrentControl instanceof ResponsiveTable || oCurrentControl instanceof UiTable || oCurrentControl instanceof SmartTable) {
						return oCurrentControl;
					}

					if (oCurrentControl.getParent){
						oCurrentControl = oCurrentControl.getParent();
					} else {
						return null;
					}

				}
			return null;
		}

		/*
		 * Returns the binding of the given table
		 *
		 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table which's binding is to returned
		 * @returns {object} The found binding or null
		 * @public
		 */
		function getTableBinding(oTable) {
			if (oTable instanceof SmartTable) {
				oTable = oTable.getTable(); // get SmartTable's inner table first
			}

			if (oTable instanceof UiTable) {
				return oTable.getBindingInfo("rows");
			} else if (oTable instanceof ResponsiveTable) {
				return oTable.getBindingInfo("items");
			}

			return null;
		}

		/*
		 * Triggers navigation from a given list item.
		 *
		 * @param {sap.ui.model.context} selected context for navigation 
		 * @param {object} oTable The table from which navigation was triggered
		 *        control in the table
		 * @public
		 */
		function fnNavigateFromListItem(oContext, oTable) {
			var sSelectedPath = oContext.getPath();
			var oComponent = oController.getOwnerComponent();

			// binding path of component - either binding path of list (list screen e.g. /SalesOrder) or binding path of details screen (e.g.
			// /SalesOrder(123) )
			// var sPath = oComponent.getBindingContext().getPath();
			var sPath = "";
			if (oComponent.getComponentContainer().getElementBinding()) {
				sPath = oComponent.getComponentContainer().getElementBinding().getPath();
			}

			// check whether it is a navigation property binding or just a collection
			var sNavigationProperty = null;

			if (sSelectedPath.indexOf(sPath) !== 0) {
				// relative binding - table bound to navigation property e.g. Item - get binding of embedded table in details screen
				sNavigationProperty = getTableBinding(oTable).path;
			}
			oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, false);
		}

		function formatDraftLockText(IsActiveEntity, HasDraftEntity, LockedBy) {
			if (!IsActiveEntity) {
				// current assumption: is my Draft as I don't see other's draft -> TODO: to be checked
				return getText("DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				return getText(LockedBy ? "LOCKED_OBJECT" : "UNSAVED_CHANGES");
			} else {
				return ""; // not visible
			}
		}

		function getDraftPopover() {
			var oDraftPopover = getDialogFragment("sap.suite.ui.generic.template.fragments.DraftAdminDataPopover", {
				formatText: function() {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					var sKey = arguments[0];
					if (!sKey) {
						return "";
					}
					if (aArgs.length > 0 && (aArgs[0] === null || aArgs[0] === undefined || aArgs[0] === "")) {
						if (aArgs.length > 3 && (aArgs[3] === null || aArgs[3] === undefined || aArgs[3] === "")) {
							return (aArgs.length > 2 && (aArgs[1] === null || aArgs[1] === undefined || aArgs[1] === ""))
									? ""
									: aArgs[2];
						} else {
							return getText(sKey, aArgs[3]);
						}
					} else {
						return getText(sKey, aArgs[0]);
					}
				},
				closeDraftAdminPopover: function() {
					oDraftPopover.close();
				},
				formatDraftLockText: formatDraftLockText
			}, "admin");
			return oDraftPopover;
		}

		var fnOnDataLossConfirmed; // the current handler for data loss confirmation
		function fnDataLossConfirmation(onDataLossConfirmed) {
			// note that we must pass the event handler to a global variable, since always the version of onDataLossOK will be
			// executed which was
			// created, when fnDataLossConfirmation was called for the first time (see documentation of getDialogFragment).
			fnOnDataLossConfirmed = onDataLossConfirmed;
			var oDataLossPopup = getDialogFragment("sap.suite.ui.generic.template.fragments.DataLossPopup", {
				onDataLossOK: function() {
					oDataLossPopup.close();
					fnOnDataLossConfirmed(); // call the version of onDataLossConfirmed which is currently valid
				},
				onDataLossCancel: function() {
					oDataLossPopup.close();
				}
			});
			oDataLossPopup.open();
		}

		return {
			getNavigationProperty: getNavigationProperty,
			getText: getText,
			isDraftEnabled: isDraftEnabled,
			getNavigationHandler: function() {
				oNavigationHandler = oNavigationHandler || new NavigationHandler(oController);
				return oNavigationHandler;
			},

			executeGlobalSideEffect: function() {
				if (isDraftEnabled()) {
					var oView = oController.getView();
					oView.attachBrowserEvent(
							"keyup",
							function(oBrowswerEvent) {
								if (oBrowswerEvent.keyCode === 13 && oView.getModel("ui").getProperty("/editable")) {
									oServices.oApplicationController.executeSideEffects(oView.getBindingContext());
								}
							});
				}
			},

			getSelectedContexts: getSelectedContexts,

			navigateFromListItem: fnNavigateFromListItem,

			getCustomData: function(oEvent) {
				var aCustomData = oEvent.getSource().getCustomData();
				var oCustomData = {};
				for (var i = 0; i < aCustomData.length; i++) {
					oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
				}
				return oCustomData;
			},

			formatDraftLockText: formatDraftLockText,

			showDraftPopover: function(oBindingContext, oTarget) {
				var oPopover = getDraftPopover();
				var oAdminModel = oPopover.getModel("admin");
				oAdminModel.setProperty("/IsActiveEntity", oBindingContext.getProperty("IsActiveEntity"));
				oAdminModel.setProperty("/HasDraftEntity", oBindingContext.getProperty("HasDraftEntity"));
				oPopover.bindElement({
					path: oBindingContext.getPath() + "/DraftAdministrativeData"
				});
				if (oPopover.getBindingContext()) {
					oPopover.openBy(oTarget);
				} else {
					oPopover.getObjectBinding().attachDataReceived(function() {
						oPopover.openBy(oTarget);
					});
					// Todo: Error handling
				}
			},

			// provide the density class that should be used according to the environment (may be "")
			getContentDensityClass: function() {
				return sContentDensityClass;
			},

			// defines a dependency from oControl to the view
			attachControlToView: fnAttachControlToView,

			/**
			 *
			 * @function
			 * @name sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment(sName,
			 *       oFragmentController, sModel)
			 * @param sName name of a fragment defining a dialog for the current view
			 * @param oFragmentController controller for the fragment containing event handlers and formatters used by the
			 *          fragment
			 * @param sModel optional, name of a model. If this parameter is truthy a JSON model with the given name will be
			 *          attached to the dialog
			 * @return an instance of the specififed fragment which is already attached to the current view. Note that each
			 *         fragment will only be instantiated once. Hence, when the method is called several times for the same
			 *         name the same fragment will be returned in each case. <b>Attention:</b> The parameters
			 *         <code>oFragmentController</code> and <code>sModel</code> are only evaluated when the method is
			 *         called for the first time for the specified fragment. Therefore, it is essential that the functions in
			 *         <code>oFragmentController</code> do not contain 'local state'.
			 */
			getDialogFragment: getDialogFragment,

			dataLossConfirmation: fnDataLossConfirmation,
			getParentTable: getParentTable,
			getTableBinding: getTableBinding,
			getElementCustomData: function(oElement) {
				var oCustomData = {};
				if (oElement instanceof sap.ui.core.Element) {
					oElement.getCustomData().forEach(function(oCustomDataElement) {
						oCustomData[oCustomDataElement.getKey()] = oCustomDataElement.getValue();
					});
				}
				return oCustomData;
			},
			extractODataEntityPropertiesFromODataJSONFormattedEntity: function(mEntity) {
				var mExtractedODataEntityProperties = {};
				for (var sPropertyName in mEntity) {
					var vAttributeValue = mEntity[sPropertyName];
					if (jQuery.type(vAttributeValue) !== "object") {
						mExtractedODataEntityProperties[sPropertyName] = vAttributeValue;
					}
				}
				return mExtractedODataEntityProperties;
			}

		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonUtils.js", {
		constructor: function(oController, oServices) {

			jQuery.extend(this, getMethods(oController, oServices));
		}
	});
});

}; // end of sap/suite/ui/generic/template/lib/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateAssembler') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateAssembler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/lib/TemplateAssembler",["sap/ui/core/mvc/View", "sap/ui/model/resource/ResourceModel", "sap/suite/ui/generic/template/lib/TemplateViewController",
			"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/lib/Application",
			"sap/suite/ui/generic/template/lib/CRUDManager", "sap/suite/ui/generic/template/lib/CommonUtils",
			"sap/suite/ui/generic/template/lib/ComponentUtils", "sap/suite/ui/generic/template/lib/CommonEventHandlers"
		],
		function(View, ResourceModel, TemplateViewController, TemplateComponent, Application, CRUDManager, CommonUtils,
			ComponentUtils, CommonEventHandlers) {
			"use strict";

			var fnAppInit; // used for temporary storage

			var mAppRegistry = {};
			var mComponentRegistry = {};
			var mControllerRegistry = {};

			var oRB; // initialized on demand
			function getText() {
				oRB = oRB || new ResourceModel({
					bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n"
				}).getResourceBundle();
				return oRB.getText.apply(oRB, arguments);
			}
			
			function getAppRegistryEntry(oAppComponent, bRemove) {
				var sId = oAppComponent.getId();
				var oRet = mAppRegistry[sId];
				if (bRemove) {
					delete mAppRegistry[sId];
				}
				return oRet;
			}

			function getDialogFragmentFunction(oAppComponent) {
				return function() {
					var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
					if (oAppRegistryEntry.oActiveComponentRegistryEntry && oAppRegistryEntry.oActiveComponentRegistryEntry.oController) {
						var oView = oAppRegistryEntry.oActiveComponentRegistryEntry.oController.getView();
						var sId = oView.getId();
						return mControllerRegistry[sId].oTemplateUtils.oCommonUtils.getDialogFragment.apply(null, arguments);
					} // open: do we need a else
				};
			}

			function getComponentRegistryEntry(oComponent) {
				return mComponentRegistry[oComponent.getId()];
			}

			function fnFindView(oControl) {
				while (oControl && !(oControl instanceof View)) {
					oControl = oControl.getParent();
				}
				return oControl;
			}
			
			function fnGetComponentRegistryEntryForControl(oControl) {
				while (oControl) {
					var oView = fnFindView(oControl);
					var oController = oView && oView.getController();
					var oComponent = oController && oController.getOwnerComponent();
					if (oComponent instanceof TemplateComponent) {
						var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
						return oComponentRegistryEntry;
					} else {
						oControl = oComponent && oComponent.oContainer;
					}
				}
			}

			return {
				getTemplateController: function(getMethods, sControllerName, oControllerDefinition) {
					oControllerDefinition = oControllerDefinition || {};

					oControllerDefinition.constructor = function() {
						var oTemplateUtils = {};
						var oMethods = getMethods(oTemplateUtils, this);
						this._templateEventHandlers = Object.freeze(oMethods.handlers || {});
						this._templateFormatters = Object.freeze(oMethods.formatters || {});
						this.extensionAPI = Object.freeze(oMethods.extensionAPI || {});
						this.fnGenericOnInit = function(oController) {
							var oView = oController.getView();
							var sId = oView.getId();
							jQuery.sap.log.info("Init view " + sId + " of template " + sControllerName);
							mControllerRegistry[sId] = {
								onExit: oMethods.onExit || jQuery.noop,
								oTemplateUtils: oTemplateUtils
							};
							var oComponent = oController.getOwnerComponent();
							var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
							oTemplateUtils.oComponentUtils = oComponentRegistryEntry.utils;
							oTemplateUtils.oComponentAPI = oComponentRegistryEntry.methods.forView;
							var oAppComponent = oComponent.getAppComponent();
							var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
							var oTransactionController = oAppComponent.getTransactionController();
							oTemplateUtils.oServices = {
								oApplicationController: oAppComponent.getApplicationController(),
								oTransactionController: oTransactionController,
								oNavigationController: oAppComponent.getNavigationController(),
								oDraftController: oTransactionController.getDraftController()
							};
							oTemplateUtils.oServices.oApplicationController.registerView(oView);
							oTemplateUtils.oCommonUtils = new CommonUtils(oController, oTemplateUtils.oServices);
							oTemplateUtils.oServices.oCRUDManager = new CRUDManager(oController,
								oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils, oAppRegistryEntry.oTemplateContract.oBusyHelper
							);
							oTemplateUtils.oCommonEventHandlers = new CommonEventHandlers(oController,
								oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils);
							oView.addStyleClass(oTemplateUtils.oCommonUtils.getContentDensityClass());
							(oMethods.onInit || jQuery.noop)();
							// Note: This relies on the fact, that there is a 1-1 relationship between TemplateView and
							// TemplateComponent.
							// If we introduce Templates using more then one view, this must be reworked.
							oComponentRegistryEntry.fnViewRegisteredResolve(oMethods.onBeforePageDisplay || jQuery.noop);
							oComponentRegistryEntry.oController = this;
							delete oComponentRegistryEntry.fnViewRegisteredResolve;
						};
					};

					oControllerDefinition.onInit = function() {
						this.fnGenericOnInit(this);
						delete this.fnGenericOnInit;
					};
					oControllerDefinition.onExit = function() {
						var sId = this.getView().getId();
						mControllerRegistry[sId].onExit();
						delete mControllerRegistry[sId];
						jQuery.sap.log.info("View " + sId + " of template " + sControllerName + " exited");
					};

					return TemplateViewController.extend(sControllerName, oControllerDefinition);
				},

				getTemplateComponent: function(getMethods, sComponentName, oComponentDefinition) {
					oComponentDefinition = oComponentDefinition || {};

					oComponentDefinition.init = function() {
						var oComponentRegistryEntry = {};
						var oViewRegisteredPromise = new Promise(function(fnResolve) {
							oComponentRegistryEntry.fnViewRegisteredResolve = fnResolve;
						});
						(TemplateComponent.prototype.init || jQuery.noop).apply(this, arguments);
						oComponentRegistryEntry.componentName = sComponentName;
						oComponentRegistryEntry.oComponent = this;
						oComponentRegistryEntry.utils = new ComponentUtils(this, oComponentRegistryEntry);
						oComponentRegistryEntry.methods = getMethods(this, oComponentRegistryEntry.utils) || {};
						oComponentRegistryEntry.viewRegisterd = oViewRegisteredPromise;
						oComponentRegistryEntry.oGenericData = {
							mRefreshInfos: {}
						};
						mComponentRegistry[this.getId()] = oComponentRegistryEntry;
						var oOverwrite = jQuery.extend({}, oComponentRegistryEntry.methods.overwrite);
						delete oOverwrite.init;
						delete oOverwrite.exit;
						delete oOverwrite.setContainer;
						delete oOverwrite.onActivate;
						jQuery.extend(this, oOverwrite);
						(oComponentRegistryEntry.methods.init || jQuery.noop)();
					};

					oComponentDefinition.exit = function() {
						var sId = this.getId();
						var oMethods = getComponentRegistryEntry(this).methods;
						(oMethods.exit || jQuery.noop)();
						delete mComponentRegistry[sId];
						(TemplateComponent.prototype.exit || jQuery.noop).apply(this, arguments);
					};

					var sCurrentBindingPath;

					oComponentDefinition.onActivate = function(sBindingPath) {
						sCurrentBindingPath = sBindingPath;
						var oAppComponent = this.getAppComponent();
						var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
						if (oAppRegistryEntry.oActiveComponentRegistryEntry){
						    oAppRegistryEntry.oActiveComponentRegistryEntry.isActive = false;    
						}
						oAppRegistryEntry.oActiveComponentRegistryEntry = getComponentRegistryEntry(this);
						oAppRegistryEntry.oActiveComponentRegistryEntry.isActive = true;
						oAppRegistryEntry.oActiveComponentRegistryEntry.viewRegisterd.then(
							function(onBeforePageDisplay) {
								oAppRegistryEntry.oActiveComponentRegistryEntry.utils.bindComponent(sCurrentBindingPath);
								// needed to always filter the messages - triggers formatters like showMessagesButton in the xml views
								// one of the triggered formatters is getMessageCount which needs the correct new bindingPath which is set via bindComponent
								this.getModel("message").refresh(true);
								onBeforePageDisplay();
								var bUnconditionalRefresh = this.getIsRefreshRequired();
								if (bUnconditionalRefresh || !jQuery.isEmptyObject(oAppRegistryEntry.oActiveComponentRegistryEntry.oGenericData.mRefreshInfos)) {
									(oAppRegistryEntry.oActiveComponentRegistryEntry.methods.refreshBinding || jQuery.noop)(bUnconditionalRefresh, bUnconditionalRefresh ? {} :
										oAppRegistryEntry.oActiveComponentRegistryEntry.oGenericData.mRefreshInfos);
									this.setIsRefreshRequired(false);
									oAppRegistryEntry.oActiveComponentRegistryEntry.oGenericData.mRefreshInfos = {};
								}
								(oAppRegistryEntry.oActiveComponentRegistryEntry.methods.onActivate || jQuery.noop)(sBindingPath);
							}.bind(this)
						);
					};

					oComponentDefinition.setContainer = function() {
						TemplateComponent.prototype.setContainer.apply(this, arguments);
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						if (!oComponentRegistryEntry.oApplication) {
							var oAppComponent = this.getAppComponent();
							var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
							oAppRegistryEntry.oTemplateContract.oBusyHelper.setBusy(oComponentRegistryEntry.viewRegisterd, true);
							oComponentRegistryEntry.oApplication = oAppRegistryEntry.application;
						}
						(oComponentRegistryEntry.methods.setContainer || jQuery.noop)();
					};

					oComponentDefinition.onDeactivate = jQuery.noop;

					return TemplateComponent.extend(sComponentName, oComponentDefinition);
				},

				getAppComponent: function(getMethods, baseClass, sAppComponentName, oComponentDefinition) {
					oComponentDefinition = oComponentDefinition || {};

					oComponentDefinition.constructor = function() {
						var oAppRegistryEntry = {
							appComponent: this,
							oTemplateContract: {
							componentRegistry: mComponentRegistry,
							getDialogFragment: getDialogFragmentFunction(this),
							getText: getText,
							hasView: function(){
								return !!(oAppRegistryEntry.oActiveComponentRegistryEntry && oAppRegistryEntry.oActiveComponentRegistryEntry.oController);
								}
							}
						};
						oAppRegistryEntry.application = new Application(oAppRegistryEntry.oTemplateContract);
						oAppRegistryEntry.methods = getMethods(this, oAppRegistryEntry.oTemplateContract);
						var oPublicMethods = jQuery.extend({}, oAppRegistryEntry.methods.publicMethods);
						delete oPublicMethods.init;
						delete oPublicMethods.exit;
						jQuery.extend(this, oPublicMethods);
						fnAppInit = oAppRegistryEntry.methods.init || jQuery.noop;
						(baseClass.prototype.constructor || jQuery.noop).apply(this, arguments);
						mAppRegistry[this.getId()] = oAppRegistryEntry;
					};

					oComponentDefinition.init = function() {
						(baseClass.prototype.init || jQuery.noop).apply(this, arguments);
						fnAppInit();
						fnAppInit = null;
					};

					oComponentDefinition.exit = function() {
						var oRegistryEntry = getAppRegistryEntry(this, true);
						(oRegistryEntry.methods.exit || jQuery.noop)();
						(baseClass.prototype.exit || jQuery.noop).apply(this, arguments);
					};

					return baseClass.extend(sAppComponentName, oComponentDefinition);
				},

				getExtensionAPIPromise: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					if (!oComponentRegistryEntry){
						return Promise.reject();
					}
					return oComponentRegistryEntry.viewRegisterd.then(function(){
						return oComponentRegistryEntry.oController.extensionAPI;	
					});
				},

				getExtensionAPI: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					return oComponentRegistryEntry && oComponentRegistryEntry.oController && oComponentRegistryEntry.oController.extensionAPI;
				}
			};
		});
}; // end of sap/suite/ui/generic/template/lib/TemplateAssembler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler"], function(TemplateAssembler) {
	"use strict";

	function getMethods(oComponent) {
		return {
			init: function() {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				oTemplatePrivate.setProperty("/listReport", {}); // Note that component properties are not yet available here
				oTemplatePrivate.setProperty("/complexTable", {}); 
			},
			setContainer: function() {
				var oSettings = oComponent.getComponentContainer().getSettings();
				if (sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oSettings.routeConfig)) {
					oComponent.setTemplateName("sap.suite.ui.generic.template.ListReport.view.ComplexTable");
				}
			},
			forView: {
				hasDraft: function() {
					return oComponent.getAppComponent().getTransactionController().getDraftController().getDraftContext()
						.isDraftEnabled(oComponent.getEntitySet());
				}
			},
			refreshBinding: function(bUnconditional) {
				// refresh list binding
				// always refresh for ListReport and ComplexTable
				/*
				if (!bUnconditional){
					return;  // list binding only updated if necessary	
				}
				*/
				var oView = oComponent.getAggregation("rootControl");
				if (oView instanceof sap.ui.core.mvc.XMLView) {
					// Rebind table
					var oSmartTable = oView.byId("listReport");
					if (oSmartTable && oSmartTable.rebindTable) {
						oSmartTable.rebindTable();
					}
				}
			},
			overwrite: {
				
				updateBindingContext: function() {
					sap.suite.ui.generic.template.lib.TemplateComponent.prototype.updateBindingContext.apply(oComponent,
							arguments);

					var oBindingContext = oComponent.getBindingContext();
					if (oBindingContext) {
						oComponent.getModel().getMetaModel().loaded()
								.then(
										function() {
											var oUIModel = oComponent.getModel("ui");

											var oActiveEntity = oBindingContext.getObject();
											if (oActiveEntity) {

												var oDraftController = oComponent.getAppComponent().getTransactionController()
														.getDraftController();
												var oDraftContext = oDraftController.getDraftContext();
												var bIsDraft = oDraftContext.hasDraft(oBindingContext) && !oActiveEntity.IsActiveEntity;
												//var bHasActiveEntity = oActiveEntity.HasActiveEntity;
												if (bIsDraft) {
													oUIModel.setProperty("/editable", true);
													oUIModel.setProperty("/enabled", true);
												}
											}
										});
						//fnBindBreadCrumbs();
					}
				}
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.ListReport.Component", {
			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.ListReport.view.ListReport"
					},
					"gridTable": "boolean",
					"multiSelect": "boolean",
					"smartVariantManagement": "boolean",
					"hideTableVariantManagement": "boolean",
					"complexListId": "string"
				},
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation') ) {
/* global hasher */
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation",["sap/ui/base/Object", "sap/ui/model/json/JSONModel", "sap/m/ObjectIdentifier", "sap/m/Table",
		"sap/m/Text", "sap/ui/comp/smartfield/SmartField", "sap/ui/generic/app/navigation/service/SelectionVariant",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI"
	],
	function(BaseObject, JSONModel, ObjectIdentifier, Table, Text, SmartField, SelectionVariant, ExtensionAPI) {
		"use strict";

		// Constants which are used as property names for storing custom filter data and generic filter data
		var customDataPropertyName = "sap.suite.ui.generic.template.customData",
			genericDataPropertyName = "sap.suite.ui.generic.template.genericData";

		function fnNullify(oObject) {
			if (oObject) {
				for (var sProp in oObject) {
					oObject[sProp] = null;
				}
			}
		}

		return {
			getMethods: function(oTemplateUtils, oController) {
				var oState = {}; // contains attributes oSmartFilterbar and oSmartTable. Initialized in onInit.  

				// Helper Functions

				function getFilterState() {
					var oCustomAndGenericData = {};
					oCustomAndGenericData[customDataPropertyName] = {};
					oCustomAndGenericData[genericDataPropertyName] = {};
					var oEditStateFilter = oController.byId("editStateFilter");
					if (oEditStateFilter) {
						oCustomAndGenericData[genericDataPropertyName].editStateFilter = oEditStateFilter.getSelectedKey();
					}
					// extension is responsible for retrieving custom filter state. The method has a more generic name
					// for historical reasons (change would be incompatible).
					oController.getCustomAppStateDataExtension(oCustomAndGenericData[customDataPropertyName]);
					return oCustomAndGenericData;
				}

				function getCurrentAppState() {
					/*
					 * Special handling for selection fields, for which defaults are defined: If a field is visible in the
					 * SmartFilterBar and the user has cleared the input value, the field is not included in the selection
					 * variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by
					 * purpose, we have to store the selection with the value "", in order to set it again to an empty value,
					 * when restoring the selection after a back navigation. Otherwise, the default value would be set.
					 */
					var oSelectionVariant = new SelectionVariant(oState.oSmartFilterbar.getDataSuiteFormat());
					var aVisibleFields = oController.getVisibleSelectionsWithDefaults();
					for (var i = 0; i < aVisibleFields.length; i++) {
						if (!oSelectionVariant.getValue(aVisibleFields[i])) {
							oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
						}
					}
					return {
						selectionVariant: oSelectionVariant.toJSONString(),
						tableVariantId: oState.oSmartTable.getCurrentVariantId(),
						customData: getFilterState()
					};
				}

				function fnStoreCurrentAppStateAndAdjustURL(oCurrentAppState) {
					// oCurrentAppState is optional
					// - nothing, if NavigationHandler not available
					// - adjusts URL immediately
					// - stores appState for this URL (asynchronously)
					oCurrentAppState = oCurrentAppState || getCurrentAppState();
					// currently NavigationHandler raises an exception when ushellContainer is not available, should be changed
					// by
					// Denver
					try {
						oTemplateUtils.oCommonUtils.getNavigationHandler().storeInnerAppState(oCurrentAppState);
					} catch (err) {
						jQuery.sap.log.error("ListReport.fnStoreCurrentAppStateAndAdjustURL: " + err);
					}
				}

				// -- Begin of methods that are used in onInit only
				function fnSetIsLeaf() {
					var oComponent = oController.getOwnerComponent();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/isLeaf", oComponent.getIsLeaf());
				}
				
				function fnSetBackToMain() {
					var oComponent = oController.getOwnerComponent();
					var oSettings = oComponent.getComponentContainer().getSettings();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					var sText = "";
					sText = oTemplateUtils.oCommonUtils.getText("BACK");
					var sParentEntitySet = oSettings.routeConfig.parentEntitySet;
					
					var sMainObject = "";
					if (sParentEntitySet !== undefined && sParentEntitySet !== "") {
						var oMetaModel = oComponent.getModel().getMetaModel();
						var oParentEntitySet = oMetaModel.getODataEntitySet(sParentEntitySet);
						//it would be better to call the AnnotationHelper from here, since the TypeName not necessarily is in an String - calling AnnotationHelper is not working
						//result = sap.ui.model.odata.AnnotationHelper.format(oInterfaceFirst, oEntitySetContext);				
						var oParentEntityType = oMetaModel.getODataEntityType(oParentEntitySet.entityType);
						var oHeaderInfo = oParentEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
						if (oHeaderInfo && oHeaderInfo.TypeName && oHeaderInfo.TypeName.String !== ""){
							sMainObject = oHeaderInfo.TypeName.String;
							sText = oTemplateUtils.oCommonUtils.getText("BACK_TO_MAIN", sMainObject);
						}
					}
					oTemplatePrivateModel.setProperty("/complexTable/backToMain", sText);
				}				

				function fnSetShareModel() {
					var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
					var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";
					// share Model: holds all the sharing relevant texts and info used in the XML view
					var oShareInfo = {
						// BOOKMARK
						bookmarkIcon: sBookmarkIcon,
						bookmarkCustomUrl: function() {
							fnStoreCurrentAppStateAndAdjustURL();
							return hasher.getHash() ? ("#" + hasher.getHash()) : window.location.href;
						},
						bookmarkServiceUrl: function() {
							var oTable = oState.oSmartTable.getTable();
							var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
							return oBinding ? oBinding.getDownloadUrl() + "&$top=0&$inlinecount=allpages" : "";
						},
						// JAM
						isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
					};
					var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
				}
				// -- End of used in onInit only

				function fnRestoreGenericFilterState(oGenericData) {
					if (oGenericData && oGenericData.editStateFilter !== undefined) {
						var oEditStateFilter = oController.byId("editStateFilter");
						if (oEditStateFilter) {
							oEditStateFilter.setSelectedKey((oGenericData.editStateFilter === null) ? 0 : oGenericData.editStateFilter);
						}
					}
				}

				// method is responsible for retrieving custom filter state. The correspomding extension-method has a more generic name
				// for historical reasons (change would be incompatible).
				function fnRestoreCustomFilterState(oCustomData) {
					oController.restoreCustomAppStateDataExtension(oCustomData || {});
				}

				// This method is responsible for restoring the data which have been stored via getFilterState.
				// However, it must be taken care of data which have been stored with another (historical) format.
				// Therefore, it is checked whether oCustomAndGenericData possesses two properties with the right names.
				// If this is this case it is assumed that the data have been stored according to curreent logic. Otherwise, it is
				// assumed that the data have been stored with the current logic. Otherwise, it is assumed that the properties have been
				// stored with a logic containing only custom properties (with possible addition of _editStateFilter).
				function fnRestoreFilterState(oCustomAndGenericData) {
					oCustomAndGenericData = oCustomAndGenericData || {};
					if (oCustomAndGenericData.hasOwnProperty(customDataPropertyName) && oCustomAndGenericData.hasOwnProperty(genericDataPropertyName)) {
						fnRestoreGenericFilterState(oCustomAndGenericData[genericDataPropertyName]);
						fnRestoreCustomFilterState(oCustomAndGenericData[customDataPropertyName]);
					} else { // historic format. May still have property _editStateFilter which was used generically.
						if (oCustomAndGenericData._editStateFilter !== undefined) {
							fnRestoreGenericFilterState({
								editStateFilter: oCustomAndGenericData._editStateFilter
							});
							delete oCustomAndGenericData._editStateFilter;
						}
						fnRestoreCustomFilterState(oCustomAndGenericData);
					}
				}

				function fnInitAppState() {

					var oParseNavigationPromise = oTemplateUtils.oCommonUtils.getNavigationHandler().parseNavigation();

					oParseNavigationPromise.done(function(oAppData, oURLParameters, sNavType) {
						if (sNavType !== sap.ui.generic.app.navigation.service.NavType.initial) {
							var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
							var oSelectionVariant = new SelectionVariant(oAppData.selectionVariant);
							var aSelectionVariantProperties = oSelectionVariant.getParameterNames().concat(
								oSelectionVariant.getSelectOptionsPropertyNames());
							for (var i = 0; i < aSelectionVariantProperties.length; i++) {
								oState.oSmartFilterbar.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
							}
							if (bHasOnlyDefaults && oState.oSmartFilterbar.isCurrentVariantStandard()){
								// given variant has only default values (set by user in FLP), and variant (already loaded) is not user specific
								// => default values have to be added without removing existing values (but overriding them if values for the same filter exist)
								oState.oSmartFilterbar.setDataSuiteFormat(oAppData.selectionVariant);
							} else if (!bHasOnlyDefaults || oState.oSmartFilterbar.isCurrentVariantStandard()) {
								oState.oSmartFilterbar.clearVariantSelection();
								oState.oSmartFilterbar.clear();
								oState.oSmartFilterbar.setDataSuiteFormat(oAppData.selectionVariant, true);
							}
							if (oAppData.tableVariantId) {
								oState.oSmartTable.setCurrentVariantId(oAppData.tableVariantId);
							}
							fnRestoreFilterState(oAppData.customData);
							if (!bHasOnlyDefaults) {
								oState.oSmartFilterbar.search();
							}
						}
					});
					// todo: check for better error handling
					oParseNavigationPromise.fail(function(oError) {
						if (oError instanceof Error) {
							oError.showMessageBox();
						}
					});
				}

				var sNewObjectTooltip; // initialized on demand

				function getNewObjectTooltip() {
					sNewObjectTooltip = sNewObjectTooltip || oTemplateUtils.oCommonUtils.getText("CREATE_NEW_OBJECT_DYN", [oController.byId(
							"idEntityTypeName")
						.getValue()
					]);
					return sNewObjectTooltip;
				}

				// Generation of Event Handlers
				return {
					onInit: function() {
						oState.oSmartFilterbar = oController.byId("listReportFilter");
						oState.oSmartTable = oController.byId("listReport");
						fnSetIsLeaf();
						fnSetShareModel();
						var oComponent = oController.getOwnerComponent();
						var oSettings = oComponent.getComponentContainer().getSettings();
						var bIsComplexTable = sap.suite.ui.generic.template.js.AnnotationHelper.isComplexTable(oSettings.routeConfig);
						if (bIsComplexTable){
							fnSetBackToMain();							
						}
					},

					handlers: {
						onBack: function() {
							window.history.back();
						},
						addEntry: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.addEntry(oEvent).then(function() {
								oTemplateUtils.oComponentUtils.addDataForNextPage({
									isObjectRoot: true
								});
							});
						},
						deleteEntries: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.deleteEntries(oEvent);
						},
						onChange: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
						},
						onContactDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
						},
						onInitSmartFilterBar: function(oEvent) {
							oController.onInitSmartFilterBarExtension(oEvent);
							fnInitAppState();
						},

						onEditStateFilterChanged: function(oEvent) {
							oEvent.getSource().fireChange();
						},

						onBeforeSFBVariantSave: function() {
							/*
							 * When the app is started, the VariantManagement of the SmartFilterBar saves the initial state in the
							 * STANDARD (=default) variant and therefore this event handler is called. So, even though the name of
							 * the event handler is confusing, we need to provide the initial state to allow the SmartFilterBar to
							 * restore it when needed (i.e. when the user clicks on restore). Thus, no check against STANDARD
							 * context is needed!
							 */
							var oCurrentAppState = getCurrentAppState();
							oState.oSmartFilterbar.setFilterData({
								_CUSTOM: oCurrentAppState.customData
							});
							fnStoreCurrentAppStateAndAdjustURL(oCurrentAppState);
						},
						onAfterSFBVariantLoad: function() {
							var oData = oState.oSmartFilterbar.getFilterData();
							if (oData._CUSTOM !== undefined) {
								fnRestoreFilterState(oData._CUSTOM);
							} else {
								// make sure that the custom data are nulled for the STANDARD variant
								var oCustomAndGenericData = getFilterState();
								fnNullify(oCustomAndGenericData[customDataPropertyName]);
								fnNullify(oCustomAndGenericData[genericDataPropertyName]);
								fnRestoreFilterState(oCustomAndGenericData);
							}
							// store navigation context
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onBeforeRebindTable: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
							oController.onBeforeRebindTableExtension(oEvent);
						},
						onShowDetails: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonEventHandlers.onShowDetails(oEventSource);
						},
						onShowDetailsIntent: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonEventHandlers.onShowDetailsIntent(oEventSource, oState.oSmartFilterbar);
						},
						onListNavigate: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonEventHandlers.onListNavigate(oEventSource);
						},
						onListNavigateIntent: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonEventHandlers.onListNavigateIntent(oEventSource, oState.oSmartFilterbar);
						},
						onCallAction: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onCallActionFromList(oEvent, oState.oSmartFilterbar);
						},
						onCallActionFromList: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onCallActionFromList(oEvent);
						},
						onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {
							var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
							if (oNavigationHandler) {
								var oParams = oEvent.getParameters();
								var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
								oNavigationHandler.processBeforeSmartLinkPopoverOpens(oParams, sSelectionVariant);
							} else {
								oEvent.getParameters().open();
							}
						},

						// ---------------------------------------------
						// store navigation context
						// note: function itself is handled by the corresponding control
						// ---------------------------------------------
						onSearchButtonPressed: function() {
							var oModel = oController.getOwnerComponent().getModel();
							oModel.attachEventOnce('requestSent', function() {
								fnStoreCurrentAppStateAndAdjustURL();
							});
						},
						onSemanticObjectLinkPopoverLinkPressed: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterTableVariantSave: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterApplyTableVariant: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						// ---------------------------------------------
						// END store navigation context
						// ---------------------------------------------

						// ---------------------------------------------
						// EVENT HANDLERS FOR COLLABORATION ACTIONS
						// ---------------------------------------------
						onShareEmailPress: function() {
							fnStoreCurrentAppStateAndAdjustURL();
							sap.m.URLHelper.triggerEmail(null, oTemplateUtils.oCommonUtils.getText("EMAIL_HEADER", [oTemplateUtils.oCommonUtils.getText(
								"PAGEHEADER")]), document.URL);
						},
						onShareInJamPress: function() {
							fnStoreCurrentAppStateAndAdjustURL();
							var oShareDialog = sap.ui.getCore().createComponent({
								name: "sap.collaboration.components.fiori.sharing.dialog",
								settings: {
									object: {
										id: document.URL,
										share: oTemplateUtils.oCommonUtils.getText("PAGEHEADER")
									}
								}
							});
							oShareDialog.open();
						},
						onInlineDataFieldForAction: function(oEvent) {
							// Assuming that this action is triggered from an action inside a table row.
							// Also this action is intended for triggering an OData operation.
							// i.e: Action, ActionImport, Function, FunctionImport
							// We require some properties to be defined in the Button's customData:
							//   Action: Fully qualified name of an Action, ActionImport, Function or FunctionImport to be called
							//   Label: Used to display in error messages
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oTable = oTemplateUtils.oCommonUtils.getParentTable(oButton);
							var sTablePath = oTable.getParent().getTableBindingPath();
							oTemplateUtils.oServices.oCRUDManager.callAction({
								functionImportPath: oCustomData.Action,
								contexts: [oButton.getBindingContext()],
								sourceControl: oTable,
								label: oCustomData.Label,
								operationGrouping: "",
								navigationProperty: ""
							}).then(function(aResponses) {
								if (aResponses) {
									var oResponse = aResponses[0];

									if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())) {
										oTemplateUtils.oServices.oNavigationController.setMeToDirty(this.getOwnerComponent(), sTablePath);
									}
								}
							});
						},
						onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
							// Assuming that this action is triggered from an action inside a table row.
							// Also this action is intended for triggering an intent based navigation.
							// We require some properties to be defined in the Button's customData:
							//   Action: The view to be displayed within the application
							//   Label: Used to display in error messages
							//   SemanticOject: Application to navigate to
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oTable = oTemplateUtils.oCommonUtils.getParentTable(oButton);
							var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
							if (oNavigationHandler) {
								var mSemanticAttributes = {};
								mSemanticAttributes = oButton.getBindingContext().getObject();
								delete mSemanticAttributes.__metadata;
								var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat() || "{}";
								mSemanticAttributes = oTemplateUtils.oCommonUtils.extractODataEntityPropertiesFromODataJSONFormattedEntity(mSemanticAttributes);
								var mOutboundParameters = oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant).toJSONString();
								var oInnerAppData = {
									selectionVariant: oState.oSmartFilterbar.getDataSuiteFormat(),
									tableVariantID: oTable.getParent().getCurrentVariantId()
								};
								oNavigationHandler.navigate(oCustomData.SemanticObject, oCustomData.Action, mOutboundParameters, oInnerAppData, function(oError) {
									if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
										sap.m.MessageBox.show(oError.getErrorCode(), {
											title: oTemplateUtils.oCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
										});
									}
								});
							}
						}

						// ---------------------------------------------
						// END COLLABORATION ACTIONS
						// ---------------------------------------------
					},
					formatters: {
						formatNewObjectTooltip: getNewObjectTooltip,
						
						formatDraftLink: function(oDraftAdministrativeData, bIsActiveEntity, bHasDraftEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								if (!bIsActiveEntity) {
									return oTemplateUtils.oCommonUtils.getText("DRAFT_OBJECT");
								} else if (bHasDraftEntity) {
									return oTemplateUtils.oCommonUtils.getText(oDraftAdministrativeData.InProcessByUser ? "LOCKED_OBJECT" : "UNSAVED_CHANGES");
								} 
							} 
							return "";
						},

						formatDraftIcon: function(oDraftAdministrativeData, bIsActiveEntity, bHasDraftEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID && bIsActiveEntity && bHasDraftEntity) {
								if (oDraftAdministrativeData.InProcessByUser) {
									return "sap-icon://locked";
								} else {
									return "sap-icon://request";
								}
							}
							return "";
						}
					},
					
					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
				};
			}
		};

	});
}; // end of sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.view.ComplexTable.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.view.ComplexTable.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/view/ComplexTable.controller",["sap/suite/ui/generic/template/lib/TemplateAssembler",
		"sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation"], function(TemplateAssembler,
		ControllerImplementation) {
	"use strict";

	return TemplateAssembler.getTemplateController(ControllerImplementation.getMethods,
			"sap.suite.ui.generic.template.ListReport.view.ComplexTable", {
				getVisibleSelectionsWithDefaults: function() {
					// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
					// (see method setSmartFilterBarDefaults) and which are currently visible.
					// This is needed by _getBackNavigationParameters in the NavigationController.
					var aVisibleFields = [];
					// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
					// aVisibleFields.push("KeyDate");
					// }
					return aVisibleFields;
				},

				// ---------------------------------------------
				// Extensions
				// ---------------------------------------------
				onInitSmartFilterBarExtension: function(oEvent) {
				},
				getCustomAppStateDataExtension: function(oCustomData) {
				},
				restoreCustomAppStateDataExtension: function(oCustomData) {
				},
				onBeforeRebindTableExtension: function(oEvent) {
				}
			});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/ListReport/view/ComplexTable.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.view.ListReport.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.view.ListReport.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/view/ListReport.controller",["sap/suite/ui/generic/template/lib/TemplateAssembler",
		"sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation"], function(TemplateAssembler,
		ControllerImplementation) {
	"use strict";

	return TemplateAssembler.getTemplateController(ControllerImplementation.getMethods,
			"sap.suite.ui.generic.template.ListReport.view.ListReport", {
				getVisibleSelectionsWithDefaults: function() {
					// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
					// (see method setSmartFilterBarDefaults) and which are currently visible.
					// This is needed by _getBackNavigationParameters in the NavigationController.
					var aVisibleFields = [];
					// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
					// aVisibleFields.push("KeyDate");
					// }
					return aVisibleFields;
				},

				// ---------------------------------------------
				// Extensions
				// ---------------------------------------------
				onInitSmartFilterBarExtension: function(oEvent) {
				},
				getCustomAppStateDataExtension: function(oCustomData) {
				},
				restoreCustomAppStateDataExtension: function(oCustomData) {
				},
				onBeforeRebindTableExtension: function(oEvent) {
				}
			});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/ListReport/view/ListReport.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler"], function(TemplateAssembler) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy;

		// helper functions
		function fnBindBreadCrumbs() {
			if (!oViewProxy) {
				return;
			}
			var oRouter = oComponent.getRouter();
			var sPath = oRouter && oRouter.oHashChanger && oRouter.oHashChanger.getHash();

			if (!sPath) {
				return;
			}

			// remove query part if there's one
			sPath = sPath.split("?")[0];
			var aSections = sPath.split("/");

			if (aSections[0] === "" || aSections[0] === "#") {
				// Path started with a / - remove first section
				aSections.splice(0, 1);
			}

			// remove the last one - this is the current shown section
			aSections.pop();

			oViewProxy.bindBreadCrumbs(aSections);
		}

		return {
			onActivate: function(sBindingPath) {
				// preliminary: in draft case maybe on first time property is not set
				var oUIModel = oComponent.getModel("ui");
				if (oComponentUtils.getEditableNDC()) {
					oUIModel.setProperty("/editable", true);
				} else if (oViewProxy && !oViewProxy.isDraftEnabled()) {
					oUIModel.setProperty("/editable", false);
				}
				oViewProxy.onComponentActivate(sBindingPath);
			},
			forView: {
				registerView: function(theViewProxy) {
					oViewProxy = theViewProxy;
				}
			},

			refreshBinding: function(bUnconditional, mRefreshInfos) {
				// default implementation: refresh element binding
				if (bUnconditional){
					var oElementBinding = oComponent.getComponentContainer().getElementBinding();
					if (oElementBinding) {
						oElementBinding.refresh(true);
					}
				} else {
					oViewProxy.refreshFacets(mRefreshInfos);
				}
			},
			
			overwrite: {
				updateBindingContext: function() {

					sap.suite.ui.generic.template.lib.TemplateComponent.prototype.updateBindingContext.apply(oComponent,
							arguments);

					var oBindingContext = oComponent.getBindingContext();
					if (oBindingContext) {
						oComponent.getModel().getMetaModel().loaded()
								.then(
										function() {
											var oTemplatePrivateModel = oComponent.getModel("_templPriv");

											// set draft status to blank according to UI decision
											oTemplatePrivateModel.setProperty("/generic/draftIndicatorState", sap.m.DraftIndicatorState.Clear);

											var oActiveEntity = oBindingContext.getObject();
											if (oActiveEntity) {
												var oUIModel = oComponent.getModel("ui");
												var oDraftController = oComponent.getAppComponent().getTransactionController()
														.getDraftController();
												var oDraftContext = oDraftController.getDraftContext();
												var bIsDraft = oDraftContext.hasDraft(oBindingContext) && !oActiveEntity.IsActiveEntity;
												var bHasActiveEntity = oActiveEntity.HasActiveEntity;
												if (oComponentUtils.getCreateMode()) {
													oUIModel.setProperty("/createMode", true);
													oUIModel.setProperty("/editable", true);
													oUIModel.setProperty("/enabled", true);
												} else if (bIsDraft) {
													if (bHasActiveEntity) {
														oUIModel.setProperty("/createMode", false);
														oUIModel.setProperty("/editable", true);
														oUIModel.setProperty("/enabled", true);
													} else {
														oUIModel.setProperty("/createMode", true);
														oUIModel.setProperty("/editable", true);
														oUIModel.setProperty("/enabled", true);
													}
												} else {
													oUIModel.setProperty("/createMode", false);
													oUIModel.setProperty("/editable", oComponentUtils.getEditableNDC());
													if (oActiveEntity.hasOwnProperty("HasDraftEntity") && oActiveEntity.HasDraftEntity &&
															oDraftContext.hasSiblingEntity(oComponent.getEntitySet())) {
														oUIModel.setProperty("/enabled", false);
														oComponent.getModel().read(
																oBindingContext.getPath(),
																{
																	urlParameters: {
																		"$expand": "SiblingEntity,DraftAdministrativeData"
																	},
																	success: function(oResponseData) {
																		var oSiblingContext = oComponent.getModel().getContext(
																				"/" + oComponent.getModel().getKey(oResponseData.SiblingEntity));
																		if (oSiblingContext) {
																			oViewProxy.draftResume(oSiblingContext, oActiveEntity,
																					oResponseData.DraftAdministrativeData);
																		}
																		// enable the buttons
																		oUIModel.setProperty("/enabled", true);
																	}
																});
													} else {
														// enable the buttons
														oUIModel.setProperty("/enabled", true);
													}
												}
											}
										});
						fnBindBreadCrumbs();
					}
				}
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
			"sap.suite.ui.generic.template.ObjectPage.Component", {

				metadata: {
					library: "sap.suite.ui.generic.template",
					properties: {
						// reference to smart template
						"templateName": {
							"type": "string",
							"defaultValue": "sap.suite.ui.generic.template.ObjectPage.view.Details"
						},
						// shall button "Related Apps" be visible on the object page?
						"showRelatedApps": {
							"type": "boolean",
							"defaultValue": "false"
						},
						// shall it be possible to edit the contents of the header?
						"editableHeaderContent" : {
							"type" : "boolean",
							"defaultValue" : "false"
						},
						"gridTable": "boolean"
					},
					// app descriptor format
					"manifest": "json"
				}
			});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.ui.footerbar.AddBookmarkButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation",
		["sap/ui/base/Object", "sap/ui/core/format/DateFormat", "sap/ui/core/routing/HashChanger", "sap/m/ActionSheet", "sap/m/Button",
			"sap/m/MessageBox", "sap/m/MessageToast", "sap/ui/model/json/JSONModel", "sap/ushell/ui/footerbar/AddBookmarkButton",
			"sap/ui/table/AnalyticalTable", "sap/ui/generic/app/navigation/service/SelectionVariant",
			"sap/suite/ui/generic/template/lib/MessageButtonHelper",
			"sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI", "sap/suite/ui/generic/template/lib/MessageUtils"
		],
		function(BaseObject, DateFormat, HashChanger, ActionSheet, Button, MessageBox, MessageToast, JSONModel, AddBookmarkButton,
			AnalyticalTable, SelectionVariant, MessageButtonHelper, ExtensionAPI, MessageUtils) {
			"use strict";

			return {
				getMethods: function(oTemplateUtils, oController) {
					var oState = {}; // contains attributes oSmartFilterbar and oSmartTable. Initialized in onInit.
					var bIsObjectRoot; // will currently be set first time, when edit button is pressed
					var oMessageButtonHelper;

					// Helper Functions
					function handleError(sOperation, reject, oError, mParameters) {
						MessageUtils.handleError(sOperation, oController, oTemplateUtils.oCommonUtils.getContentDensityClass(), oTemplateUtils.oServices, oError, mParameters);
						return (reject || jQuery.noop)(oError);
					}

					function setEditable(bIsEditable) {
						var oUIModel = oController.getView().getModel("ui");
						oUIModel.setProperty("/editable", bIsEditable);
						if (!oTemplateUtils.oCommonUtils.isDraftEnabled() && bIsObjectRoot) {
							oTemplateUtils.oComponentUtils.setEditableNDC(bIsEditable);
						}
					}
					
					function fnProcessNonDraftDataLossConfirmationAndFunction(fnProcessFunction) {
						// DataLost Popup only for Non-Draft
						if (!oTemplateUtils.oCommonUtils.isDraftEnabled()) {
							if (oController.getView().getModel().hasPendingChanges()) {
								oTemplateUtils.oCommonUtils.dataLossConfirmation(function() {
									setEditable(false);
									oController.getView().getModel().resetChanges();
									//Notification for reuse components and extensions
									oTemplateUtils.oComponentUtils.fire(oController, "AfterCancel", {});
									fnProcessFunction();
								});
								return;
							}
							setEditable(false);
						}
						fnProcessFunction();
					}

					function fnOnShareObjectPageEmailPress(sObjectTitle, sObjectSubtitle) {
						var sEmailSubject = sObjectTitle;
						if (sObjectSubtitle) {
							sEmailSubject = sEmailSubject + " - " + sObjectSubtitle;
						}
						sap.m.URLHelper.triggerEmail(null, sEmailSubject, document.URL);
					}

					function fnOnShareObjectPageInJamPress(sObjectTitle, sObjectSubtitle) {
						var oShareDialog = sap.ui.getCore().createComponent({
							name: "sap.collaboration.components.fiori.sharing.dialog",
							settings: {
								object: {
									id: document.URL,
									share: sObjectTitle + " " + sObjectSubtitle
								}
							}
						});
						oShareDialog.open();
					}

					function getObjectHeader() {
						var oObjectPage = oController.byId("objectPage");
						return oObjectPage.getHeaderTitle();
					}

					function onShareObjectPageActionButtonPress(oEvent) {
						var oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.ShareSheet", {
								shareEmailPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageEmailPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								},
								shareJamPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageInJamPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								}

							}, "share", function(oFragment, oShareModel) {
								var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
								oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
								oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
								oShareModel
									.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
								var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
								oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
							});
						var oShareModel = oShareActionSheet.getModel("share");
						var oObjectHeader = getObjectHeader();
						oShareModel.setProperty("/objectTitle", oObjectHeader.getProperty("objectTitle"));
						oShareModel.setProperty("/objectSubtitle", oObjectHeader.getProperty("objectSubtitle"));
						oShareModel.setProperty("/bookmarkCustomUrl", document.URL);
						oShareActionSheet.openBy(oEvent.getSource());
					}

					function getRelatedAppsSheet() {
						var oRelatedAppsSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.RelatedAppsSheet", {
								buttonPressed: function(oEvent) {
									var oButton = oEvent.getSource();
									var oButtonsContext = oButton.getBindingContext("buttons");
									var oLink = oButtonsContext.getProperty("link");
									var oParam = oButtonsContext.getProperty("param");
									var str = oLink.intent;
									var sSemanticObject = str.substring(1, str.indexOf("-"));
									var sPos = (str.indexOf("~") > -1) ? str.indexOf("~") : str.length;
									var sAction = str.substring(str.indexOf("-") + 1, sPos);
									var oNavArguments = {
										target: {
											semanticObject: sSemanticObject,
											action: sAction
										},
										params: oParam
									};
									sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
								}
							}, "buttons");
						return oRelatedAppsSheet;
					}

					function showDeleteMsgBox() {
						var oComponent = oController.getOwnerComponent();
						var sNavigationProperty = oComponent.getNavigationProperty();
						var oUtils = oTemplateUtils.oCommonUtils;
						var oPageHeader = oController.byId("objectPageHeader");

						var sParam2 = oPageHeader.getProperty("objectSubtitle") ? oPageHeader.getProperty("objectSubtitle") : '';
						var aParams = [oController.byId("objectTypeName").getText(), oPageHeader.getProperty("objectTitle").trim(), sParam2];
						var sMessageText = oUtils.getText("DELETE_WITH_OBJECTINFO", aParams);

						MessageBox.show(sMessageText, {
							icon: MessageBox.Icon.WARNING,
							styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass(),
							title: oUtils.getText("DELETE"),
							actions: [MessageBox.Action.DELETE, MessageBox.Action.CANCEL],
							onClose: function(oAction) {
								if (oAction === MessageBox.Action.DELETE) {
									var oDeleteEntityPromise = oTemplateUtils.oServices.oCRUDManager.deleteEntity();
									oDeleteEntityPromise.then(function() {
										oTemplateUtils.oServices.oNavigationController.setParentToDirty(oComponent, sNavigationProperty);
										oTemplateUtils.oServices.oNavigationController.unbindChildren(oComponent);

										// document was deleted, go back to previous page
										window.history.back();
									});
									var oEvent = {
										deleteEntityPromise: oDeleteEntityPromise
									};
									oTemplateUtils.oComponentUtils.fire(oController, "AfterDelete", oEvent);
								}
							}
						});
					}

					function fnStartEditing(oResult){
						var oDraft, oContext;
						if (oResult) {
						    oContext = oResult.context || oResult;
						    if (oTemplateUtils.oServices.oDraftController.getDraftContext().hasDraft(oContext)) {
								oTemplateUtils.oServices.oNavigationController.setRootPageToDirty();
								oDraft = oResult.context && oResult.context.context || oResult.context || oResult;
					        }
						}
						if (oDraft) {
							// navigate to draft
							oTemplateUtils.oServices.oNavigationController.navigateToContext(oDraft, undefined, true);
						} else {
							setEditable(true);
						}
					}

					function fnEditEntity(bPreserveChanges) {
						oTemplateUtils.oServices.oCRUDManager.editEntity(bPreserveChanges).then(
								function(oResult) {
									if (oResult && oResult.unsavedChanges) {
										//check edit status: rc409 can also mean status = locked
										var oComponent = oController.getOwnerComponent();
										var sEntitySet = oComponent.getEntitySet();
										// check whether Draft exists
										var oDraftContext = oTemplateUtils.oServices.oDraftController.getDraftContext();
										if (oDraftContext.isDraftRoot(sEntitySet)) {
											// In case of DeepLink the DraftAdministrativeData still not retrieved
											var oBindingContext = oComponent.getBindingContext();
											var oModel = oComponent.getModel();
											oModel.read(oBindingContext.getPath(), {
												urlParameters: {
													"$expand": "DraftAdministrativeData"
												},
												success: function(oResponseData) {
													// check whether lock by other user is expired
													if (!oResponseData.DraftAdministrativeData.DraftIsProcessedByMe &&
															!oResponseData.DraftAdministrativeData.InProcessByUser) {

														// start "Expired Lock Dialog", because lock by other user is expired
														fnExpiredLockDialog(oResponseData.DraftAdministrativeData.CreatedByUserDescription || oResponseData.DraftAdministrativeData.CreatedByUser);
													} else if (!oResponseData.DraftAdministrativeData.DraftIsProcessedByMe && oResponseData.DraftAdministrativeData.InProcessByUser) {
														handleError(MessageUtils.operations.editEntity, null, oResult, oResult);
													} else {
														//start editing
														fnStartEditing(oResult);
													}
												}
											});
											return; // in this case editing is delayed until admin data have been read successfully
										} else {
											handleError(MessageUtils.operations.editEntity, null, oResult, oResult);
										}
									} else {
										//start editing
										fnStartEditing(oResult);
									}
								}
						);
					}

					function fnExpiredLockDialog(sCreatedByUser) {
						var oUnsavedChangesDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.UnsavedChangesDialog", {
								onEdit: function() {
									oUnsavedChangesDialog.close();
									fnEditEntity();
								},
								onCancel: function() {
									oUnsavedChangesDialog.close();
								}
							}, "Dialog");
						var oDialogModel = oUnsavedChangesDialog.getModel("Dialog");
						var sDialogContentText = oTemplateUtils.oCommonUtils.getText("DRAFT_LOCK_EXPIRED", [sCreatedByUser]);
						oDialogModel.setProperty("/unsavedChangesQuestion", sDialogContentText);
						oUnsavedChangesDialog.open();
					}

					var sDefaultObjectTitleForCreated; // instantiated on demand

					function getDefaultObjectTitleForCreated() {
						sDefaultObjectTitleForCreated = sDefaultObjectTitleForCreated || oTemplateUtils.oCommonUtils
							.getText("NEW_OBJECT", [oController.byId("objectTypeName").getText()]);
						return sDefaultObjectTitleForCreated;
					}

					// Helper functions for view-proxy for component
					var oHashChanger; // initialized on first use
					function fnBindBreadcrumbs(aSections) {
						if (!aSections.length) {
							return;
						}

						// there's at least one section left - create / bind breadcrumbs
						var oTitle = getObjectHeader();
						var aBreadCrumbs = oTitle && oTitle.getBreadCrumbsLinks();

						if (!aBreadCrumbs || !aBreadCrumbs.length) {
							return;
						}

						oHashChanger = oHashChanger || HashChanger.getInstance();

						var sBreadCrumbLink = "",
							oCustomData, sEntitySet, sSection, oLink, aSubSections, sCanonicalUrl, sHash;
						for (var i = 0; i < aSections.length; i++) {
							sSection = aSections[i];
							sBreadCrumbLink = sBreadCrumbLink + "/" + sSection;

							if (aBreadCrumbs[i]) {
								oLink = aBreadCrumbs[i];

								/*
								 * we don't use the navigation path but the canonical URL. The reason for this is that there's no
								 * join done in the backend, therefore the GET-request is much faster in deeper breadcrumbs. Also
								 * the UI5 Odata model keeps track of already requested ressources, so if user navigates from the
								 * top level there's no additional request, if he uses a bookmark the request is only done once. We
								 * assume that the key of the navigation path is the same as the canonical URL. This is an
								 * assumption that does not fit to all ODATA services (but 99% of them) - BUT: Smart Templates and
								 * the navigation controller already takes this assumption. Once this is changed also this coding
								 * needs to be changed. Ideally with a configuration as most of the ODATA services have a big
								 * benefit through reading with the canonical URL
								 */

								oCustomData = oLink.getCustomData() && oLink.getCustomData()[0];
								if (oCustomData && oCustomData.getKey() === "entitySet") {
									sEntitySet = oCustomData.getValue();
									aSubSections = sSection.split("(");
									if (aSubSections && aSubSections[1]) {

										if (oHashChanger.hrefForAppSpecificHash) {
											// shell active, ask shell for hash
											sHash = oHashChanger.hrefForAppSpecificHash(sBreadCrumbLink);
										} else {
											sHash = "#" + sBreadCrumbLink;
										}

										sCanonicalUrl = "/" + sEntitySet + "(" + aSubSections[1];
										oLink.setHref(sHash);
										oLink.bindElement(sCanonicalUrl);
									}
								}
							}
						}
					}

					function fnRefreshFacets(mRefreshInfos) {
						oController.getView().getContent()[0].getContent()[0].getSections().forEach(function (oSection) {
							oSection.getSubSections().forEach(function (oSubSection) {
								oSubSection.getBlocks().forEach(function (oBlock) {
									oBlock.getContent().forEach(function (oContent) {
										if (oContent instanceof sap.ui.comp.smarttable.SmartTable) {
											if (mRefreshInfos[oContent.getTableBindingPath()]) {
												oContent.rebindTable();
												if (oTemplateUtils.oCommonUtils.isDraftEnabled()) {
													oController.getOwnerComponent().getAppComponent().getApplicationController().executeSideEffects(oController.getOwnerComponent().getBindingContext(), [], [oContent.getTableBindingPath()]);
												}
											}
										}
									});
								});
							});
						});
					}


					function setLockButtonVisible(bVisible) {
						var oLockButton = sap.ui.getCore().byId(getObjectHeader().getId() + "-lock");
						oLockButton.setVisible(bVisible);
					}

					function fnDraftResume(oSiblingContext, oActiveEntity, oDraftAdministrativeData) {
						var oSiblingEntity = oSiblingContext.getObject();
						if (!oSiblingEntity || !oSiblingEntity.hasOwnProperty("IsActiveEntity") || oSiblingEntity.IsActiveEntity !== false) {
							return;
						}

						var oModel = oController.getView().getModel();
						var oMetaModel = oModel.getMetaModel();
						var oModelEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
						var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);

						var sType = "";
						var sPath;
						// TODO: not use String directly but Thomas Ch. helpers, sometimes the value is behind a path
						// to do so best way would be to extract this in a DraftResumeDialoge
						// determining the value from an annotation path is not yet supported
						if (oDataEntityType["com.sap.vocabularies.Common.v1.Label"]) {
							sType = oDataEntityType["com.sap.vocabularies.Common.v1.Label"].String;
							if (sType === "") {
								sPath = oDataEntityType["com.sap.vocabularies.Common.v1.Label"].Path;
								if (sPath) {
									sType = oActiveEntity[sPath];
								}
							}
						}
						if (oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] && oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName) {
							if (sType === "") {
								sType = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
							}
							if (sType === "") {
								sPath = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.Path;
								if (sPath) {
									sType = oActiveEntity[sPath];
								}
							}
						}

						var sObjectKey = "";
						var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
						for (var i in aSemKey) {
							var oPropertyRef = aSemKey[i];
							if (sObjectKey === "") {
								sObjectKey = oActiveEntity[oPropertyRef.PropertyPath];
							} else {
								sObjectKey = sObjectKey + "-" + oActiveEntity[oPropertyRef.PropertyPath];
							}
						}

						var sChangedAt = "-";
						if (oDraftAdministrativeData && oDraftAdministrativeData.LastChangeDateTime !== null) {
							var oDateFormatter = DateFormat.getDateTimeInstance({
								pattern: "MMMM d, yyyy HH:mm",
								style: "long"
							});
							sChangedAt = oDateFormatter.format(oDraftAdministrativeData.LastChangeDateTime);
						}

						var aParams = [sType, sObjectKey, sChangedAt];
						var sDraftFoundText = oTemplateUtils.oCommonUtils.getText("DRAFT_FOUND_RESUME", aParams);

						var oDialogModel;
						var oResumeDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.DraftResumeDialog", {
								onDraftResume: function() {
									oResumeDialog.close();
									// Do not use variable oSiblingContext directly, because this will always be the instance used
									// at the first use of this fragment!
									oTemplateUtils.oServices.oNavigationController.navigateToContext(
										oDialogModel.getProperty("/siblingContext"), null, true);
								},
								onDraftDiscard: function() {
									oResumeDialog.close();
									// enable the buttons
									oController.getView().getModel("ui").setProperty("/enabled", true);
									// delete the draft node
									oTemplateUtils.oServices.oCRUDManager.deleteEntity(true);
									setLockButtonVisible(false);
									// Do not use variable oActiveEntity directly, because this will always be the instance used at
									// the first use of this fragment!
									oDialogModel.getProperty("/activeEntity").HasDraftEntity = false;
									// refresh the nodes
									var oContainers = oTemplateUtils.oServices.oNavigationController.getViews();
									for (var sContainer in oContainers) {
										var oContainerComponent = oContainers[sContainer].getComponentInstance();
										if (oContainerComponent.setIsRefreshRequired) {
											oContainerComponent.setIsRefreshRequired(true);
										}
									}
								},
								onResumeDialogClosed: function() {
									// support garbage collection
									oDialogModel.setProperty("/siblingContext", null);
									oDialogModel.setProperty("/activeEntity", null);
								}
							}, "Dialog");
						oDialogModel = oResumeDialog.getModel("Dialog");
						oDialogModel.setProperty("/draftResumeText", sDraftFoundText);
						oDialogModel.setProperty("/siblingContext", oSiblingContext);
						oDialogModel.setProperty("/activeEntity", oActiveEntity);
						oResumeDialog.open();
					}

					function getSelectionVariant() {
						// oTemplateUtils, oController
						// if there is no selection we pass an empty one with the important escaping of ", passing "" or
						// null...was not possible
						// "{\"SelectionVariantID\":\"\"}";
						var sResult = "{\"SelectionVariantID\":\"\"}";

						/*
						 * rules don't follow 1:1 association, only header entity type fields don't send fields with empty
						 * values also send not visible fields remove Ux fields (e.g. UxFcBankStatementDate) send all kinds of
						 * types String, Boolean, ... but stringify all types
						 */

						var oComponent = oController.getOwnerComponent();
						var sEntitySet = oComponent.getEntitySet();
						var model = oComponent.getModel();
						var oMetaModel = model.getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
						var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
						var aAllFieldsMetaModel = oEntityType.property;

						// collect the names of attributes to be deleted (objects with existing sap:field-control attribute)
						var aFieldsToBeIgnored = [];
						for (var x in aAllFieldsMetaModel) {
							var controlname = aAllFieldsMetaModel[x]["sap:field-control"];
							if (controlname && aFieldsToBeIgnored.indexOf(controlname) < 0) {
								aFieldsToBeIgnored.push(aAllFieldsMetaModel[x]["sap:field-control"]);
							}
						}

						var context = oController.getView().getBindingContext();
						var object = context.getObject();

						var oSelectionVariant = new SelectionVariant();
						for (var i in aAllFieldsMetaModel) {
							var type = aAllFieldsMetaModel[i].type;
							var name = aAllFieldsMetaModel[i].name;
							var value = object[aAllFieldsMetaModel[i].name];

							if (aFieldsToBeIgnored.indexOf(name) > -1) {
								continue;
							}

							if (name && (value || type === "Edm.Boolean")) { // also if boolean is false this must be sent
								if (type === "Edm.Time" && value.ms !== undefined) { // in case of Time an object is returned
									value = value.ms;
								}
								if (typeof value !== "string") {
									value = value.toString();
								}
								oSelectionVariant.addParameter(name, value);
							}
						}

						sResult = oSelectionVariant.toJSONString();
						return sResult;
					}

					function getImageDialog() {
						var oImageDialog = oController.byId("imageDialog") || oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.ImageDialog", {
								onImageDialogClose: function() {
									oImageDialog.close();
								}
							}, "headerImage");

						return oImageDialog;
					}

					var mEntriesFromPreviousPage = {};
					var oDataFromPreviousPage;

					function onComponentActivate(sBindingPath) {
						var oDisplayObject = oTemplateUtils.oComponentUtils.getCurrentDisplayObject();
						if (oDisplayObject.isBack) {
							oDataFromPreviousPage = mEntriesFromPreviousPage[sBindingPath];
						} else {
							oDataFromPreviousPage = oDisplayObject.dataFromLastPage;
							mEntriesFromPreviousPage[sBindingPath] = oDataFromPreviousPage;
						}
						oMessageButtonHelper.adaptToContext(sBindingPath);
                        // set visibility of up/down buttons based for back navigation scenario
                        computeAndSetVisibleParamsForNavigationBtns();
					}

					// This method returns the data provided form the page this page was originally reached by.
					// The data must have been provided by method addDataForNextPage of class sap.suite.ui.generic.template.lib.Application.
					// Note that these data can normally also be retrieved via method getCurrentDisplayObject of the same class.
					// The two versions differ, when the page is reached via a back navigation.
					// Assume the navigation is as follows: A -> B -> C -> B, where the last navigation is a back navigation.
					// In this case getCurrentDisplayObject provides the data provided by C, whereas getDataFromPreviousPage still provides
					// the data provided by A.

                    function getDataFromPreviousPage() {
                        return oDataFromPreviousPage;
                    }

                    function computeAndSetVisibleParamsForNavigationBtns() {
                        var oDataFromLastOPage = getDataFromPreviousPage() || oTemplateUtils.oComponentUtils.getCurrentDisplayObject().dataFromLastPage;
                        var oComponent = oController.getOwnerComponent();
                        var oTemplatePrivateModel = oComponent.getModel("_templPriv");
						if (!oTemplatePrivateModel.getProperty("/objectPage")) {
							oTemplatePrivateModel.setProperty("/objectPage", {});
						}
						var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
						oTemplatePrivateModel.setProperty("/objectPage/navDownTooltip", oResource.getText("FACETFILTER_NEXT"));
						oTemplatePrivateModel.setProperty("/objectPage/navUpTooltip", oResource.getText("FACETFILTER_PREVIOUS"));

                        if (oDataFromLastOPage && oDataFromLastOPage.nextObjectPageInfo) {
                            var oCurrentObjectNavPage = oDataFromLastOPage.nextObjectPageInfo;

                            var bNavUpEnabled, bNavDownEnabled;

                            var aAllContexts = oCurrentObjectNavPage.objectPageNavigationContexts;

                            bNavDownEnabled = !!aAllContexts && ((oCurrentObjectNavPage.selectedRelativeIndex) !== oCurrentObjectNavPage.endIndex);
                            bNavUpEnabled = !!aAllContexts && !(oCurrentObjectNavPage.selectedRelativeIndex <= 0 && oCurrentObjectNavPage.startIndex <= 0);
                            oTemplatePrivateModel.setProperty("/objectPage/navUpEnabled", bNavUpEnabled);
                            oTemplatePrivateModel.setProperty("/objectPage/navDownEnabled", bNavDownEnabled);


                            // if both buttons are disabled - hide them all
                            if (!bNavDownEnabled && !bNavUpEnabled) {
                                oTemplatePrivateModel.setProperty("/objectPage/navBtnsVisible", false);
                            } else {
                                oTemplatePrivateModel.setProperty("/objectPage/navBtnsVisible", true);
                            }
                        } else {
                            oTemplatePrivateModel.setProperty("/objectPage/navUpEnabled", false);
                            oTemplatePrivateModel.setProperty("/objectPage/navDownEnabled", false);
                            oTemplatePrivateModel.setProperty("/objectPage/navBtnsVisible", false);
                        }
                    }
					// Generation of Event Handlers
					return {
						onInit: function() {
							oTemplateUtils.oCommonUtils.executeGlobalSideEffect();
							// Register myself at my component and provide suitable functions that may be called by it
							oTemplateUtils.oComponentAPI.registerView({
								onComponentActivate: onComponentActivate,
								draftResume: fnDraftResume,
								bindBreadCrumbs: fnBindBreadcrumbs,
								isDraftEnabled: oTemplateUtils.oCommonUtils.isDraftEnabled,
								refreshFacets: fnRefreshFacets
							});
							oMessageButtonHelper = new MessageButtonHelper(oTemplateUtils.oCommonUtils, oController);
							oState.messageButtonHelper = oMessageButtonHelper;
						},

						handlers: {
							addEntry: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.addEntry(oEvent);
							},

							onBack: function() {
								fnProcessNonDraftDataLossConfirmationAndFunction(function() {
									window.history.back();
								});
								
							},
							//Cancel event is only triggered in non-draft scenario. For draft see onDiscardDraft
							onCancel: function() {
								setEditable(false);
								oController.getView().getModel().resetChanges();
								//Notification for reuse components and extensions
                                oTemplateUtils.oComponentUtils.fire(oController, "AfterCancel", {});
								if (oTemplateUtils.oComponentUtils.getCreateMode()) {
									// in case of create mode navigate back to list
									window.history.back();
								}
							},

							onContactDetails: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
							},
							onPressDraftInfo: function(oEvent) {
								var oBindingContext = oController.getView().getBindingContext();
								var oLockButton = sap.ui.getCore().byId(
									oEvent.getSource().getId() + (oEvent.getId() === "markChangesPress" ? "-changes" : "-lock"));

								oTemplateUtils.oCommonUtils.showDraftPopover(oBindingContext, oLockButton);
							},
							onShareObjectPageActionButtonPress: onShareObjectPageActionButtonPress,
							onRelatedApps: function(oEvent) {
								var oButton = oEvent.getSource();
								var oParsedUrl = sap.ushell.Container.getService("URLParsing").parseShellHash(
									document.location.hash);
								var oLinks = sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks(
									oParsedUrl.semanticObject);
								var oActionSheet = getRelatedAppsSheet();
								var oButtonsModel = oActionSheet.getModel("buttons");
								oButtonsModel.setProperty("/buttons", []);
								oActionSheet.openBy(oButton);
								oLinks
									.done(function(aLinks) {
										var oMetaModel = oController.getOwnerComponent().getModel().getMetaModel();
										var oContext = oController.getView().getBindingContext();
										var oEntity = oContext.getObject();
										var sEntityType = oEntity.__metadata.type;
										var oDataEntityType = oMetaModel.getODataEntityType(sEntityType);
										var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
										var oParam = {};
										// var oSemKeyParam = {};
										if (aSemKey && aSemKey.length > 0) {
											for (var j = 0; j < aSemKey.length; j++) {
												var sSemKey = aSemKey[j].PropertyPath;
												if (!oParam[sSemKey]) {
													oParam[sSemKey] = [];
													oParam[sSemKey].push(oEntity[sSemKey]);
												}
											}
										} else {
											// Fallback if no SemanticKey
											for (var k in oDataEntityType.key.propertyRef) {
												var sObjKey = oDataEntityType.key.propertyRef[k].name;
												if (!oParam[sObjKey]) {
													oParam[sObjKey] = [];
													oParam[sObjKey].push(oEntity[sObjKey]);
												}
											}
										}
										// filter current semanticObject-action
										var aButtons = [];
										var sCurrentAction = "#" + oParsedUrl.semanticObject + "-" + oParsedUrl.action;
										for (var i = 0; i < aLinks.length; i++) {
											var oLink = aLinks[i];
											if (oLink.intent != sCurrentAction) {	
												aButtons.push({
													enabled: true, // used in declarative binding
													text: oLink.text, // used in declarative binding
													link: oLink, // used by the event handler
													param: oParam
													// used by the event handler
												});
											}
										}
										if (aButtons.length === 0) {
											aButtons.push({
												enabled: false, // used in declarative binding
												text: oTemplateUtils.oCommonUtils.getText("NO_RELATED_APPS")
												// used in declarative binding
											});
										}
										oButtonsModel.setProperty("/buttons", aButtons);
									});
							},
                            handleNavigateToObject: function (oContext, oCurrentObjectNavPage) {
                                if (oCurrentObjectNavPage) {
                                    // Get navigation property.. to be used in construction of new URL
                                    if (oContext !== null && oContext !== undefined && oCurrentObjectNavPage) {
                                        var sNavigationProperty = oCurrentObjectNavPage.NavPropertyToUse;
                                        // set data for next page
                                        oTemplateUtils.oComponentUtils.addDataForNextPage({
                                            "nextObjectPageInfo": oCurrentObjectNavPage
                                        });

                                        if (oCurrentObjectNavPage.nested) {
                                            // for the case where you navigate to an object page from an object page
                                            oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, true);
                                        } else {
                                            oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, null, true);
                                        }
                                    }
                                }
                            },

                            handleShowNextObject: function (oEvent) {
                                // now navigate to next object page
                                var oDataFromLastPage = getDataFromPreviousPage() || oTemplateUtils.oComponentUtils.getCurrentDisplayObject().dataFromLastPage;
                                if (oDataFromLastPage && oDataFromLastPage.nextObjectPageInfo) {
                                    var oCurrentObjectNavPage = jQuery.extend(true, {}, oDataFromLastPage.nextObjectPageInfo);

                                    var oListBinding = oCurrentObjectNavPage.listBinding;
                                    var iEndIdx = oCurrentObjectNavPage.endIndex;
                                    var iNextIdx = oCurrentObjectNavPage.selectedRelativeIndex + 1;
                                    var aAllContexts = oCurrentObjectNavPage.objectPageNavigationContexts;
                                    var iTableMaxCount = oCurrentObjectNavPage.tableMaxItems;
                                    var iTableGrowingIncrement = oCurrentObjectNavPage.growingThreshold;
                                    var oComponent = oController.getOwnerComponent();
                                    var oTemplatePrivateModel = oComponent.getModel("_templPriv");

                                    if (iNextIdx && aAllContexts) {
                                        var oNextContext = aAllContexts[iNextIdx];

                                        if (oNextContext &&
                                            oNextContext.getPath &&
                                            iNextIdx < iEndIdx &&
                                            iNextIdx !== iTableMaxCount - 1) {
                                            oCurrentObjectNavPage.selectedRelativeIndex = iNextIdx;
                                            oController._templateEventHandlers.handleNavigateToObject(oNextContext, oCurrentObjectNavPage);
                                        } else if (iNextIdx === iEndIdx &&
                                            iNextIdx !== iTableMaxCount - 1) {
                                            var newEndIdx = iEndIdx + 1 + iTableGrowingIncrement;

                                            var fetchAndUpdateRecords = function (mParameters) {
                                                // get new fetched contexts and do stuff
                                                var aAllContexts = mParameters.oSource.getContexts(0, newEndIdx);
                                                oCurrentObjectNavPage.objectPageNavigationContexts = aAllContexts;
                                                oCurrentObjectNavPage.endIndex = newEndIdx;
                                                oNextContext = aAllContexts[iNextIdx];

                                                if (oNextContext && oNextContext.getPath) {
                                                    // enable the down button
                                                    oTemplatePrivateModel.setProperty("/objectPage/navDownEnabled", true);
                                                }
                                                oListBinding.detachDataReceived(fetchAndUpdateRecords);
                                            };

                                            oListBinding.attachDataReceived(fetchAndUpdateRecords);

                                            oListBinding.loadData(0, newEndIdx);

                                            // also.. navigate
                                            oCurrentObjectNavPage.selectedRelativeIndex = iNextIdx;
                                            oController._templateEventHandlers.handleNavigateToObject(oNextContext, oCurrentObjectNavPage);
                                        } else if (iNextIdx === iTableMaxCount - 1) {
                                            // just navigate
                                            oCurrentObjectNavPage.selectedRelativeIndex = iNextIdx;
                                            oController._templateEventHandlers.handleNavigateToObject(oNextContext, oCurrentObjectNavPage);
                                        }
                                    }
                                }
                            },

                            handleShowPrevObject: function (oEvent) {
                                // get data from "temp" model
                                var oDataFromLastPage = getDataFromPreviousPage() || oTemplateUtils.oComponentUtils.getCurrentDisplayObject().dataFromLastPage;
                                if (oDataFromLastPage && oDataFromLastPage.nextObjectPageInfo) {
                                    var oCurrentObjectNavPage = jQuery.extend(true, {}, oDataFromLastPage.nextObjectPageInfo);
                                    var iNextIdx = oCurrentObjectNavPage.selectedRelativeIndex - 1;
                                    var aAllContexts = oCurrentObjectNavPage.objectPageNavigationContexts;

                                    if (iNextIdx && aAllContexts) {
                                        var oNextContext = aAllContexts[iNextIdx];
                                        if (oNextContext &&
                                            oNextContext.getPath) {
                                            oCurrentObjectNavPage.selectedRelativeIndex = iNextIdx;
                                            oController._templateEventHandlers.handleNavigateToObject(oNextContext, oCurrentObjectNavPage);
                                        }
                                    }
                                }
                            },
							onShowMessages: function(oEvent) {
								oMessageButtonHelper.showMessagePopover(oEvent);
							},

							onEdit: function() {
								bIsObjectRoot = true; // temporarily logic until we know how to decide this in onInit

								// "Expired Lock Dialog" for "unsaved changes" in case of "lock of other user expired"
								// check whether Draft exists
								if (oTemplateUtils.oCommonUtils.isDraftEnabled) {
									var oDraftContext = oTemplateUtils.oServices.oDraftController.getDraftContext();
									var oComponent = oController.getOwnerComponent();
									var sEntitySet = oComponent.getEntitySet();
									if (oDraftContext.isDraftRoot(sEntitySet)) {
										//if edit action has preserveChanges parameter, directly start editing (with preserving changes)
										//otherwise, keep old logic (read DraftAdministrativeData first)
										var oBindingContext = oComponent.getBindingContext();
										if (oDraftContext.hasPreserveChanges(oBindingContext)){
											fnEditEntity(true); //add preserveChanges=true; consider unsaved changes
										} else {
											// In case of DeepLink the DraftAdministrativeData still is not retrieved
											var oModel = oComponent.getModel();
											oModel.read(oBindingContext.getPath(), {
												urlParameters: {
													"$expand": "DraftAdministrativeData"
												},
												success: function(oResponseData) {
													// check whether lock by other user is expired
													if (oResponseData.DraftAdministrativeData && !oResponseData.DraftAdministrativeData.DraftIsProcessedByMe && !oResponseData.DraftAdministrativeData
															.InProcessByUser) {
														// start "Expired Lock Dialog", because lock by other user is expired
														fnExpiredLockDialog(oResponseData.DraftAdministrativeData.CreatedByUserDescription || oResponseData.DraftAdministrativeData.CreatedByUser);
													} else {
														fnEditEntity();
													}
												}
											});
										}
										return;
									}
								}
								fnEditEntity(); //preserveChanges is not necessary in all other cases
							},

							// The event is only called in a non-draft scenario. For draft see onActivate
							onSave: function() {
								var oCurrentContext = oController.getView().getBindingContext();
								var oPendingChanges =  oController.getView().getModel().getPendingChanges();
								oPendingChanges = oPendingChanges && oPendingChanges[oCurrentContext.getPath().replace("/", "")] || {};
								var aPendingChanges = Object.keys(oPendingChanges) || [];

								var oSaveEntityPromise = oTemplateUtils.oServices.oCRUDManager.saveEntity();
								oSaveEntityPromise.then(function(oContext) {
									// switch to display mode
									if (!oTemplateUtils.oCommonUtils.isDraftEnabled() && bIsObjectRoot) {
										setEditable(false);
									}else if ( oTemplateUtils.oCommonUtils.isDraftEnabled() ){
										setEditable(false);
									}

									if (oTemplateUtils.oComponentUtils.getCreateMode()) {
										// in case of create mode navigate to new item
										if (oContext) {
											oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, undefined, true);
										}

										// setTimeout: assumption: needed because of navigation, navigationController should return a
										// promise better
										// sap.m.MessageToast - use via sap.ui.define?
										setTimeout(function() {
											MessageToast.show(oTemplateUtils.oCommonUtils.getText("OBJECT_CREATED")); // "Object was
											// created");
										}, 10);
									} else {
										MessageToast.show(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED")); // "Object was saved");
									  //for NON-Draf: navigate back after save if not root object
										if (!oTemplateUtils.oCommonUtils.isDraftEnabled() && !bIsObjectRoot) {
											window.history.back();
										}
									}

									if (oPendingChanges){
										oTemplateUtils.oServices.oApplicationController.executeSideEffects(oCurrentContext, aPendingChanges);
									}

								});
								var oEvent = {
									saveEntityPromise: oSaveEntityPromise
								};
								oTemplateUtils.oComponentUtils.fire(oController, "AfterSave", oEvent);
							},

							onActivate: function() {
								var oActivationPromise = oTemplateUtils.oServices.oCRUDManager.activateDraftEntity();
								oActivationPromise.then(function(oResponse) {
									MessageToast.show(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED"));
									if (oResponse && oResponse.context) {
										// Set Root to dirty
										oTemplateUtils.oServices.oNavigationController.setRootPageToDirty();
										oTemplateUtils.oServices.oNavigationController.unbindChildren(oController.getOwnerComponent());

										// navigate to activate document
										oTemplateUtils.oServices.oNavigationController.navigateToContext(
											oResponse.context, undefined, true);
									}
								});
								var oEvent = {
									activationPromise: oActivationPromise
								};
								oTemplateUtils.oComponentUtils.fire(oController, "AfterActivate", oEvent);
							},

							onChange: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
							},

							onDiscardDraft: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDiscardDraft(oEvent);
							},

							onDelete: function(oEvent) {
								showDeleteMsgBox();
							},

							onCallAction: function(oEvent) {
								var oComponent = oController.getOwnerComponent();
								var sNavigationProperty = oComponent.getNavigationProperty();

								var oCustomData = oTemplateUtils.oCommonUtils.getCustomData(oEvent);
								var aContext = [];
								aContext.push(oController.getView().getBindingContext());
								if (aContext[0] && oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
									var mParameters = {
										functionImportPath: oCustomData.Action,
										contexts: aContext,
										sourceControl: "",
										label: oCustomData.Label,
										operationGrouping: oCustomData.OperationGrouping,
										navigationProperty: oController.getOwnerComponent().getNavigationProperty()
									};
									oTemplateUtils.oServices.oCRUDManager.callAction(mParameters).then(function(aResponses){
										var oResponse = aResponses && aResponses[0];
										if (oResponse && oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())){
											// set my parent page to dirty
											oTemplateUtils.oServices.oNavigationController.setParentToDirty(oComponent, sNavigationProperty);
										}
									});
								}
							},
							onCallActionFromList: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onCallActionFromList(oEvent);
							},
							onBeforeRebindDetailTable: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);

								if (oEvent.getSource().getTable() instanceof AnalyticalTable) {
									var oBindingParams = oEvent.getParameter("bindingParams");
									oBindingParams.parameters.entitySet = oEvent.getSource().getEntitySet();
								}
							},
							onShowDetails: function(oEvent) {
								var oEventSource = oEvent.getSource();
								fnProcessNonDraftDataLossConfirmationAndFunction(function() {
									oTemplateUtils.oCommonEventHandlers.onShowDetails(oEventSource);
								});
							},
							onShowDetailsIntent: function(oEvent) {
								var oEventSource = oEvent.getSource();
								fnProcessNonDraftDataLossConfirmationAndFunction(function() {
									oTemplateUtils.oCommonEventHandlers.onShowDetailsIntent(oEventSource);
								});
							},
							onListNavigate: function(oEvent) {
								var oEventSource = oEvent.getSource();
								fnProcessNonDraftDataLossConfirmationAndFunction(function() {
									oTemplateUtils.oCommonEventHandlers.onListNavigate(oEventSource);
								});
							},
							onListNavigateIntent: function(oEvent) {
								var oEventSource = oEvent.getSource();
								fnProcessNonDraftDataLossConfirmationAndFunction(function() {
									oTemplateUtils.oCommonEventHandlers.onListNavigateIntent(oEventSource);
								});
							},
							onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {
								var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
								if (oNavigationHandler) {
									var sSelectionVariant = getSelectionVariant();
									var oParams = oEvent.getParameters();
									oNavigationHandler.processBeforeSmartLinkPopoverOpens(oParams, sSelectionVariant);
								} else {
									oEvent.getParameters().open();
								}
							},
							onDataReceived: function(oEvent) {
								var oPage = oController.getOwnerComponent().getAggregation("rootControl");
								var oSmartTable = oEvent.getSource().getTable();
								var oTableLengthText = oPage.byId(oSmartTable.sId + "-tableLengthText");

								// oTableLengthText is only available if long table feature is activated
								if (oTableLengthText) {
									var totalLength, visibleLength = 0;
									var oRowBinding = oSmartTable.getBinding("items"); // ResponsiveTable: binding is "items"
									if (!oRowBinding) {
										// GridTable or Analytical: binding is "rows"
										oRowBinding = oSmartTable.getBinding("rows");
									}

									totalLength = oRowBinding.getLength();
									if (totalLength > 5) {
										visibleLength = 5;
									} else {
										visibleLength = totalLength;
									}
									var oBundle = this.getView().getModel("i18n").getResourceBundle();
									oTableLengthText.setText(oBundle.getText("TABLE_LENGTH", [visibleLength, totalLength]));
								}
							},
							onShowAll: function(oEvent) {
								var oAppComponent = oController.getOwnerComponent().getAppComponent();
								var sEntitySet = oEvent.getSource().getParent().getParent().getEntitySet();
								var sNavProp = oTemplateUtils.oCommonUtils.getNavigationProperty(oAppComponent.getConfig().pages[0].pages, sEntitySet);
								oAppComponent.getNavigationController().navigateToContext(null, sNavProp);
							},
							onHeaderImagePress: function(oEvent) {
								var oImageDialog = getImageDialog();
								var oImageDialogModel = oImageDialog.getModel("headerImage");
								oImageDialogModel.setProperty("/src", oEvent.getSource().getSrc());

								if (sap.ui.Device.system.phone) {
									oImageDialog.setProperty("stretch", true);
								}

								oImageDialog.open();
							},
							onInlineDataFieldForAction: function(oEvent) {
								// Assuming that this action is triggered from an action inside a table row.
								// Also this action is intended for triggering an OData operation.
								// i.e: Action, ActionImport, Function, FunctionImport
								// We require some properties to be defined in the Button's customData:
								//   Action: Fully qualified name of an Action, ActionImport, Function or FunctionImport to be called
								//   Label: Used to display in error messages
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var oTable = oTemplateUtils.oCommonUtils.getParentTable(oButton);
								var sTablePath = oTable.getParent().getTableBindingPath();
								oTemplateUtils.oServices.oCRUDManager.callAction({
									functionImportPath: oCustomData.Action,
									contexts: [oButton.getBindingContext()],
									sourceControl: oTable,
									label: oCustomData.Label,
									operationGrouping: "",
									navigationProperty: ""
								}).then(function(aResponses) {
									if (aResponses) {
										var oResponse = aResponses[0];

										if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())) {
											oTemplateUtils.oServices.oNavigationController.setMeToDirty(this.getOwnerComponent(), sTablePath);
										}
									}
								});
							},
							onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
								// Assuming that this action is triggered from an action inside a table row.
								// Also this action is intended for triggering an intent based navigation.
								// We require some properties to be defined in the Button's customData:
								//   Action: The view to be displayed within the application
								//   Label: Used to display in error messages
								//   SemanticOject: Application to navigate to
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var oNavigationHandler = oTemplateUtils.oCommonUtils.getNavigationHandler();
								if (oNavigationHandler) {
									var mSemanticAttributes = {};
									mSemanticAttributes = oButton.getBindingContext().getObject();
									delete mSemanticAttributes.__metadata;
									jQuery.extend(mSemanticAttributes, this.getView().getBindingContext().getObject());
									var mOutboundParameters = oTemplateUtils.oCommonUtils.extractODataEntityPropertiesFromODataJSONFormattedEntity(mSemanticAttributes);
									mOutboundParameters = JSON.stringify(mOutboundParameters);
									var oInnerAppData = {};
									oNavigationHandler.navigate(oCustomData.SemanticObject, oCustomData.Action, mOutboundParameters, oInnerAppData, function(oError) {
										if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
											sap.m.MessageBox.show(oError.getErrorCode(), {
												title: oTemplateUtils.oCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
											});
										}
									});
								}
							},
							onBeforeRebindChart: function(oEvent) {
								var oSmartChart = oEvent.getSource();
								oSmartChart.oModels = oSmartChart.getChart().oPropagatedProperties.oModels;
							}
						},
						formatters: {
							formatDefaultObjectTitle: function(bCreateMode) {
								// return DefaultTitle in createMode
								var oContext = oController.getView().getBindingContext();
								var oObject = oContext && oContext.getObject();
								if (bCreateMode && oObject && (oObject.IsActiveEntity === undefined || oObject.IsActiveEntity === false || oObject.HasActiveEntity ===
									false)) {
									return getDefaultObjectTitleForCreated();
								}
							}
						},
						extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
					};
				}
			};

		});

}; // end of sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.view.Details.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.view.Details.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/view/Details.controller",["sap/suite/ui/generic/template/lib/TemplateAssembler",
		"sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation"], function(TemplateAssembler,
		ControllerImplementation) {
	"use strict";

	return TemplateAssembler.getTemplateController(ControllerImplementation.getMethods,
			"sap.suite.ui.generic.template.ObjectPage.view.Details", {});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/ObjectPage/view/Details.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper", "sap/ca/ui/utils/Lessifier"], function(TemplateAssembler, AnnotationHelper, QCAnnotationHelper, Lessifier) {
    "use strict";

    function getMethods(oComponent, oComponentUtils) {
        Lessifier.lessifyCSS("sap.suite.ui.generic.template.QuickCreate", "css/custom.css", true);
        return {};

    }

    return TemplateAssembler.getTemplateComponent(getMethods,
        "sap.suite.ui.generic.template.QuickCreate.Component", {

            metadata: {
                library: "sap.suite.ui.generic.template",
                properties: {
                    "templateName": {
                        "type": "string",
                        "defaultValue": "sap.suite.ui.generic.template.QuickCreate.view.QuickCreate"
                    }
                },
                "manifest": "json",
                "includes": ["css/custom.css"]
            }
        });

});

}; // end of sap/suite/ui/generic/template/QuickCreate/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/QuickView/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper"], function(TemplateAssembler, AnnotationHelper, QCAnnotationHelper) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		return {};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.QuickView.Component", {

			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.QuickView.view.QuickView"
					}
				},
				"manifest": "json"

			}
		});

});

}; // end of sap/suite/ui/generic/template/QuickView/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.extensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.extensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui
	.define("sap/suite/ui/generic/template/extensionAPI/extensionAPI",["sap/suite/ui/generic/template/lib/TemplateAssembler"],
		function(TemplateAssembler) {
			"use strict";

			/**
			 * Static access to extension API for Smart Template Application development
			 * @namespace sap.suite.ui.generic.template.extensionAPI.extensionAPI
			 * @public
			 */

			return /** @lends sap.suite.ui.generic.template.extensionAPI.extensionAPI */ {
				/**
				 * @deprecated use <code>getExtensionAPIPromise</code> instead.
				 */
				getExtensionAPI: function(oControl) {
					return TemplateAssembler.getExtensionAPI(oControl);
				},
				
				/**
				 * Get the extension API valid for the specified control embedded in a Smart Template view.  Note that extension API
				 * can also be retrieved directly from the controller of the Smart Template view. Therefore, this method needs only
				 * be called in scenarios where this controller is not directly accessible. The most prominent use case for this would be
				 * the context of a controller of a view extension. In this case it is recommended to pass the extending view to this method. </br>
				 * Note that this method does not return the extension API directly, but a Promise that resolves to the extension API.
				 * Thus, a typical use of this method might look as follows: </br>
				 * <code>extensionAPI.getExtensionAPIPromise(oView).then(function(oExtensionAPI){ oExtensionAPI.someMethod(); });</code>
				 *
				 * @param {sap.ui.core.Control} oControl a control which is embedded into a Smart Template view.
				 * @return {Promise} A <code>Promise</code> which resolves to the extension API for the embedding Smart Template view
				 * @public
				 */
				getExtensionAPIPromise: function(oControl) {
					return TemplateAssembler.getExtensionAPIPromise(oControl);
				}
			};
		});
}; // end of sap/suite/ui/generic/template/extensionAPI/extensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController",["sap/suite/ui/generic/template/lib/TemplateAssembler", "sap/m/MessageBox", "./AnnotationHelper"], function (TemplateAssembler, MessageBox, AnnotationHelper) {
    "use strict";

    function getMethods(oTemplateUtils, oController) {
        return {
            onInit: function () {
                oController.oTemplateUtils = oTemplateUtils;
                oController._initialize();
            }
        };
    }

    var BaseController = TemplateAssembler.getTemplateController(getMethods,
        "sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController", {

            _initialize: function() {
                if (!this._bIsInitialized) {
                    this._bIsInitialized = true;
                    var oComponent = this.getOwnerComponent();
                    var oView = this.getView();
                    oView.setModel(oComponent.getModel());
                    this.sEntitySet = oComponent.getEntitySet();

                    this.oDraftController = this.oTemplateUtils.oServices.oDraftController;
                    this.bDraftEnabled = this.oDraftController.getDraftContext().isDraftEnabled(this.sEntitySet);

                    var oMetaModel = this.getView().getModel().getMetaModel();

                    this.oEntitySetMeta = oMetaModel.getODataEntitySet(this.sEntitySet);
                    this.oEntityTypeMeta = oMetaModel.getODataEntityType(this.oEntitySetMeta.entityType);

                    this.oSmartFieldEventDelegate = {
                        onAfterRendering: jQuery.proxy(function (oEvent) {
                            this._onSmartFieldAfterRendering(oEvent);
                        }, this)
                    };
                }
            },

            _onMetaModelLoaded: function() {
                // redefine in subclass for initialization logic after meta data is available
            },

            _onSmartFieldAfterRendering: function(oEvent) {
              // redefine if controller needs to react to smart fields being created
            },

            onBeforeRendering: function () {
                if (!this._bMetaDataInit) {
                    this._bMetaDataInit = true;
                    this.getView().getModel().getMetaModel().loaded().then(jQuery.proxy(this._onMetaModelLoaded, this), jQuery.proxy(this.onError, this));
                }
                this.setBusy(false);
            },

            setBusy: function(bBusy) {
                if (this.getView().getModel("ui")) {
                    this.getView().getModel("ui").setProperty("/busy", bBusy);
                    this.getView().getModel("ui").updateBindings();
                }
            },

            bindView: function (oContext) {
                var oInterface = this._getFormatterInterface(oContext);

                var expandParam = AnnotationHelper.formatExpandBindingPathForHeaderObject(oInterface, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name);

                this.oContext = oContext;

                this.getView().bindElement({
                   path: oContext.getPath(),
                   parameters: {
                      expand: expandParam
                   }
                });

            },

            onError: function (oError) {
                this.setBusy(false);
                if (oError.message) {
                    this._showErrorMessage(oError);
                } else if (oError.response) {
                    this._showErrorMessage(oError.response);
                } else {
                    this._showErrorMessage({message: this.oTemplateUtils.oCommonUtils.getText("QuickAction_Generic_Error")});
                }
            },

            onSmartFieldsCreated: function (oEvent) {
                var control = oEvent.getParameters()[0];
                if (control && typeof control.addEventDelegate === 'function') {
                    control.removeEventDelegate(this.oSmartFieldEventDelegate);
                    control.addEventDelegate(this.oSmartFieldEventDelegate);
                }
            },


            // used by XML views
            formatI18NMessage: function() {
                if (arguments && arguments[0]) {
                    var sI18N = arguments[0];

                    var resBundle = this.getView().getModel("i18n").getResourceBundle();

                    if (arguments.length > 1) {
                        var args = Array.prototype.slice.call(arguments);
                        return resBundle.getText(sI18N, args.splice(1, arguments.length - 1));
                    }
                    return resBundle.getText(sI18N);
                }

                return arguments;
            },

            _getFormatterInterface: function(oContext) {
                var context = oContext ? oContext : this.getView().getBindingContext();
                return AnnotationHelper.createFormatterInterface(context);
            },

            _setBindingContext: function(oContext) {
                this.getView().setBindingContext(oContext);
                this.setBusy(false);
            },

            _showErrorMessage: function (oError) {
                var error = oError.response || oError;
                var sDetails = error.message;
                if (error.statusText) {
                    sDetails = error.statusText;
                }
                if (error && error.responseText) {
                    try {
                        var oErrObj = jQuery.parseJSON(error.responseText);
                        var sErrDetail = this._getErrorDetail(oErrObj);
                        sDetails = (sErrDetail && sErrDetail.length > 0) ? sErrDetail : sDetails;
                    } catch (exc) {
                        // not a valid JSON string
                    }
                }
                //return details;
                MessageBox.show(sDetails, {
                        icon: MessageBox.Icon.ERROR,
                        title: this.oTemplateUtils.oCommonUtils.getText("QuickAction_Error_Popover"),
                        actions: [MessageBox.Action.OK]
                    }
                );
            },

            _getErrorDetail: function (oErrObj) {
                var sDetails = "";
                if (oErrObj && oErrObj.error && oErrObj.error.message) {
                    if (oErrObj.error.innererror && oErrObj.error.innererror.errordetails && oErrObj.error.innererror.errordetails.length > 0) {
                        jQuery.each(oErrObj.error.innererror.errordetails, jQuery.proxy(function (i, errorDetail) {
                            sDetails += errorDetail.severity + ": " + errorDetail.message + "\n\n";
                        }, this));
                    } else if (oErrObj.error.message.value) {
                        sDetails = oErrObj.error.message.value;
                    }
                }
                return sDetails;
            }


        });


        return BaseController;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// Provides base class sap.suite.ui.generic.template.lib.AppComponent for all generic app components
// ----------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.ApplicationController'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/AppComponent",[
	"sap/ui/core/UIComponent", "sap/m/NavContainer", "sap/ui/generic/app/ApplicationController",
	"sap/suite/ui/generic/template/lib/BusyHelper",
	"sap/suite/ui/generic/template/lib/NavigationController",
	"sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/library"
], function(UIComponent, NavContainer, ApplicationController, BusyHelper, NavigationController, TemplateAssembler) {
	"use strict";

	function getMethods(oAppComponent, oTemplateContract) {

		var oApplicationController;
		var oNavigationController;

		var oConfig; // initialized on demand
		function getConfig() {
			if (!oConfig) {
				var oMeta = oAppComponent.getMetadata();
				oConfig = oMeta.getManifestEntry("sap.ui.generic.app");
			}
			return oConfig;
		}

		return {
			init: function() {
				var oModel = oAppComponent.getModel();
				if (oModel) {
					// workaround until Modules Factory is available
					oApplicationController = new ApplicationController(oModel);
					oNavigationController = new NavigationController(oAppComponent, oTemplateContract);

					oApplicationController.attachEvent("beforeSideEffectExecution", function(oEvent){
						if (oEvent.getParameter("valueChange") || oEvent.getParameter("fieldControl")){
							var oPromise = oEvent.getParameter("promise");
							oTemplateContract.oBusyHelper.setBusy(oPromise);
						}
					});

					// Error handling for erroneous metadata request
					// TODO replace access to oModel.oMetadata with official API call when available (recheck after 03.2016)
					// TODO move error handling to central place (e.g. create new MessageUtil.js)
					if (!oModel.oMetadata || !oModel.oMetadata.isLoaded()) {
						oModel.attachMetadataFailed(
							function() {
								oNavigationController.navigateToMessagePage({
									title: oTemplateContract.getText("ST_GENERIC_ERROR_LOAD_DATA_TITLE"),
									text: oTemplateContract.getText("ST_GENERIC_ERROR_LOAD_DATA_TEXT")
								});
							});
					} else if (oModel.oMetadata.isFailed()) {
						oNavigationController.navigateToMessagePage({
							title: oTemplateContract.getText("ST_GENERIC_ERROR_LOAD_DATA_TITLE"),
							text: oTemplateContract.getText("ST_GENERIC_ERROR_LOAD_DATA_TEXT")
						});
					}
				}
				oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", false);
			},
			exit: function() {
				if (oTemplateContract.oNavContainer) {
					oTemplateContract.oNavContainer.destroy();
				}
				if (oApplicationController) {
					oApplicationController.destroy();
				}
				if (oNavigationController) {
					oNavigationController.destroy();
				}
			},
			publicMethods: {
				createContent: function() {
					// Method must only be called once
					if (oTemplateContract.oNavContainer){
						return "";
					}
					// assign message model
					oAppComponent.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "message");

					oTemplateContract.oNavContainer = new NavContainer({
						id: oAppComponent.getId() + "-appContent"
					});
					oTemplateContract.oBusyHelper = new BusyHelper(oTemplateContract);
					oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", true, true);
					// TODO: Check
					if (sap.ui.Device.system.desktop) {
						oTemplateContract.oNavContainer.addStyleClass("sapUiSizeCompact");
					}
					// done
					oTemplateContract.oNavContainer.attachAfterNavigate(oTemplateContract.oApplication.onAfterNavigate);
					return oTemplateContract.oNavContainer;
				},

				getConfig: getConfig,

				getTransactionController: function() {
					return oApplicationController.getTransactionController();
				},

				getApplicationController: function() {
					return oApplicationController;
				},

				/*
				 * Returns the reference to the navigation controller instance that has been created by AppComponent.
				 *
				 * @returns {sap.suite.ui.generic.template.lib.NavigationController} the navigation controller instance
				 * @public
				 */
				getNavigationController: function() {
					return oNavigationController;
				}
			}
		};
	}

	var AppComponent = TemplateAssembler.getAppComponent(getMethods, UIComponent, "sap.suite.ui.generic.template.lib.AppComponent", {
		metadata: {
			config: {
				"title": "SAP UI Application Component", // TODO: This should be set from App descriptor
				fullWidth: true
			},
			routing: {
				config: {
					routerClass: "sap.m.routing.Router",
					viewType: "XML",
					viewPath: "",
					clearTarget: false
				},
				routes: []
			},
			library: "sap.suite.ui.generic.template"
		}
	});
	delete TemplateAssembler.getAppComponent; // this method is used exactly once (in order to instantiate this class)
	return AppComponent;
});

}; // end of sap/suite/ui/generic/template/lib/AppComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller",["../../js/QuickTemplates/QuickActionBaseController", "../../js/QuickTemplates/QuickCreateAPI", "sap/m/MessageToast",
    "../../js/QuickTemplates/AnnotationHelper", "sap/ui/model/odata/AnnotationHelper", "../../js/QuickTemplates/ODataModelHelper", "sap/ui/model/json/JSONModel", "sap/ui/model/Context"],
    function (BaseController, QuickCreateAPI, MessageToast, QCAnnotationHelper, ModelAnnotationHelper, ODataModelHelper, JSONModel, Context) {
    "use strict";

    var QCController = BaseController.extend("sap.suite.ui.generic.template.QuickCreate.view.QuickCreate", {

        _initialize: function () {
            if (!this._bIsInitialized) {
                BaseController.prototype._initialize.apply(this);

                this.oQuickCreateAPI = this.getOwnerComponent().getAppComponent().oQuickCreateAPI;

                if (this.oQuickCreateAPI) {
                  this.oQuickCreateAPI.setRootView(this.getView());
                }

                this.sDraftEntityPath = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().draftid : undefined;
                this.bIsCreator = this.oQuickCreateAPI ? this.oQuickCreateAPI.isCurrentUserCreator() : true;
                this.sQuickCreateUserName = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().createdByName : "";

                this.bFormEnabled = !this.bDraftEnabled || this.bIsCreator;
                this._sDeferredGroupId = "QuickCreateChanges";

                var quickCreateModel = new JSONModel({});

                this._sQuickCreateUIModelName = "quickCreate";

                this.getView().setModel(quickCreateModel, this._sQuickCreateUIModelName);

                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/quickCreateUser", this.sQuickCreateUserName);

                if (!this.bDraftEnabled) {
                    this.getView().getModel().setDeferredGroups([this._sDeferredGroupId]);
                }

                // subscribe to line items found on quick create
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.attachAutofillLineItems(this._onLineItemsFound, this);
                }
            }
        },


        onExit: function () {

            if (this._bIsBeingDestroyed || this._bDestroyed) {
                return;
            }

            this._bIsBeingDestroyed = true;

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.destroy();
            }

            if (BaseController.prototype.onExit) {
                BaseController.prototype.onExit.apply(this);
            }

            this._bDestroyed = true;
            delete this._bIsBeingDestroyed;
        },

        onBeforeRendering: function () {
            BaseController.prototype.onBeforeRendering.apply(this);
            this.getView().getModel("ui").setProperty("/enabled", this.bFormEnabled);
            this.getView().getModel("ui").setProperty("/editable", true);
        },


        _onMetaModelLoaded: function () {
            var that = this;
            this.setBusy(true);

            if (this.sDraftEntityPath) {
                // Open Existing QuickCreate
                var oContext = new Context(this.getView().getModel(), this.sDraftEntityPath);

                if (this.bDraftEnabled && !this.bIsCreator) {
                    oContext._bLocalBinding = true;
                } else if (!this.bDraftEnabled) {
                    oContext._bLocalBinding = true;
                }

                if (oContext._bLocalBinding) {
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.loadQuickCreateModelFromJSON().then(jQuery.proxy(function () {
                            if (oContext.getObject()) {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            } else {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            }
                            this.bindView(oContext);
                        }, this));
                    }
                } else {
                    //check if draft still exists
                    this.getView().getModel().read(this.sDraftEntityPath, {

                        success: jQuery.proxy(function (oData, oResponse) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            this.bindView(oContext);
                        }, this),

                        error: jQuery.proxy(function (oError) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            this.bindView(oContext);
                        }, this)

                    });
                }
            } else if (this.bDraftEnabled) {
                    // create new Draft case
                    this.oDraftController.createNewDraftEntity(this.sEntitySet, "/" + this.sEntitySet).then(function (oResponse) {
                        if (that.oQuickCreateAPI) {
                            that.oQuickCreateAPI.updateDraftID(oResponse.context.getPath());
                        }

                        that.bindView(oResponse.context);

                    }, jQuery.proxy(this.onError, this));

             } else {
                    // create new non-Draft case
                    var context = this.getView().getModel().createEntry("/" + this.sEntitySet, {groupId: this._sDeferredGroupId});
                    context._bLocalBinding = true;
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.updateDraftID(context.getPath());
                    }
                    this._initializeObject(context, "FieldGroup");
                    this.bindView(context);
             }


        },

        onChange: function (oEvent) {
            if (this.bDraftEnabled) {
                this.oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
            }
        },

        onCreatePress: function (evt) {
            var that = this;
            this._createButton = evt.getSource();
            this._createButton.setEnabled(false);
            this.setBusy(true);


            var resolve = function (oResponse) {
                that.setBusy(false);
                var context = null;

                // search for odata entities in response
                var objects = [];

                var params = {
                    key: "__metadata",
                    matchCallback: function (parent, current, match) {
                        objects.push(current);
                        return false;
                    }
                };

                ODataModelHelper.findObjects(oResponse, params);


                var entityType = that.oEntityTypeMeta.namespace + "." + that.oEntityTypeMeta.name;
                jQuery.each(objects, function (i, obj) {
                    if (!context && obj.__metadata && obj.__metadata.type === entityType) {
                        var key = that.getView().getModel().getKey(obj);
                        context = new Context(that.getView().getModel(), "/" + key);
                    }
                });

                if (context) {
                    MessageToast.show(that.oTemplateUtils.oCommonUtils.getText("QuickCreate_Success_CreateObject"));
                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.objectCreated(context);
                    }
                } else {
                    this._showErrorMessage({message: that.oTemplateUtils.oCommonUtils.getText("QuickCreate_No_Created_Object")});
                }
            };

            var reject = function (oError) {
                that.setBusy(false);
                if (that._createButton) {
                    that._createButton.setEnabled(true);
                }
                that.onError(oError);
            };

            if (this.bDraftEnabled) {
                this.oDraftController.activateDraftEntity(this.getView().getBindingContext()).then(resolve, reject);
            } else {

                var context = this.getView().getBindingContext();
                var oModelObject = this.getView().getModel().getProperty(context.getPath(), context, /* make sure to expand all nav properties */ true);


                // remove "results" arrays from object by setting the array directly as the navigation property
                var params = {
                    key: "results",
                    matchCallback: function(parent, current, match) {
                        if (current.__nestedKey && Array.isArray(match)) {
                            parent[current.__nestedKey] = match;
                        }
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);


                // delete all "__metadata" properties from objects
                params = {
                    key: "__metadata",
                    matchCallback: function(parent, current, match) {
                        delete current["__metadata"];
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);

                this.getView().getModel().create("/" + this.sEntitySet, oModelObject, {
                    success: resolve,
                    error: reject
                });
            }
        },

        onAddLineItemPress: function (oEvent) {
            var that = this;
            this.setBusy(true);
            var context = this.getView().getBindingContext();

            var createLineItem = function(submitChangesResponse) {
                that._createLineItem(context).then(function (oCreateResponse) {
                    that._refreshLineItems();

                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.calculateViewHeight(that.getView(), true);
                    }
                    that.setBusy(false);

                }, jQuery.proxy(that.onError, that));
            };

            if (this.bDraftEnabled) {
                this.oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges().then(function (oSubmitResponse) {
                    createLineItem(oSubmitResponse);
                }, jQuery.proxy(this.onError, this));
            } else {
                createLineItem();
            }
        },

        onRemoveLineItemPress: function (oEvent) {
            var that = this;
            this.setBusy(true);
            var context = oEvent.getSource().getBindingContext();

            if (this.bDraftEnabled) {
                this.oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges().then(function (oResponse) {
                    that._deleteLineItem(context);
                }, jQuery.proxy(function (oError) {
                    this.setBusy(false);
                    this.onError(oError);

                }, this));
            } else {
                this.getView().getModel().deleteCreatedEntry(context);
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }
                this._refreshLineItems();

            }
        },


        bindView: function (oContext) {
            this.setBusy(false);

            if (this.getView().getModel(this._sQuickCreateUIModelName).getProperty("/draftExists") === false) {
                return;
            }

            if (oContext._bLocalBinding) {
                    this._setBindingContext(oContext);

                    if (!this.bFormEnabled) {
                        // no backend requests in read-only mode
                        if (typeof this.getView().getModel()._submitRequest === 'function') {
                            this.getView().getModel()._submitRequest = function () {};
                        }
                    }

                    this._refreshLineItems();
            } else {
                BaseController.prototype.bindView.apply(this, arguments);
            }

            this._updateFieldControl(oContext);

        },

        hasLineItemAnnotation: function () {
            var oInterface = this._getFormatterInterface();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            return oMetaDataContext !== null;
        },

        _onLineItemsFound: function (oEvent) {
            if (!this.hasLineItemAnnotation()) {
                return;
            }

            var numberLineItems = oEvent.getParameter("numberOfLineItems");
            if (numberLineItems <= 0) {
                return;
            }

            this.setBusy(true);
            var oMainEntityContext = this.getView().getBindingContext();
            var promises = [];
            for (var i = 0; i < numberLineItems; i++) {
                promises.push(this._createLineItem(oMainEntityContext));
            }

            Promise.all(promises).then(jQuery.proxy(function (result) {
                this._refreshLineItems();
                this.setBusy(false);
            }, this));
        },

        _createLineItem: function (oMainEntityContext) {
            var that = this;
            var oInterface = this._getFormatterInterface(oMainEntityContext);

            var oMetaModel = this.getView().getModel().getMetaModel();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            var sChildPropertyPath = ModelAnnotationHelper.getNavigationPath(oMetaDataContext);
            sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
            var oListEntityAssociationEnd = oMetaModel.getODataAssociationEnd(this.oEntityTypeMeta, sChildPropertyPath);
            var oListEntityTypeMeta = oMetaModel.getODataEntityType(oListEntityAssociationEnd.type);


            if (this.bDraftEnabled) {
                return this.oDraftController.createNewDraftEntity(oListEntityTypeMeta.name, oMainEntityContext.sPath + "/" + sChildPropertyPath);
            } else {
                return new Promise(function (resolve, reject) {
                    var context = that.getView().getModel().createEntry(oMainEntityContext.sPath + "/" + sChildPropertyPath, {groupId: that._sDeferredGroupId});
                    that._initializeObject(context, "LineItem");
                    resolve(context);
                });
            }
        },

        _deleteLineItem: function (oContext) {
            this.oTemplateUtils.oServices.oTransactionController.deleteEntity(oContext).then(jQuery.proxy(function (oResponse) {
                this._refreshLineItems();
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }

            }, this), jQuery.proxy(function (oError) {
                this.setBusy(false);
                this.onError(oError);

            }, this));
        },


        _onSmartFieldAfterRendering: function (oEvent) {
            if (typeof oEvent.srcControl.setEnabled == 'function') {
                oEvent.srcControl.setEnabled(this.bFormEnabled);
            }

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.calculateViewHeight(this.getView(), true);
            }

            // remove element style so that we can style it via the CSS classes
            jQuery(".copilotQuickCreateContainerBox .sapQuickCreateFieldGroup label").css("text-align", "");

            jQuery(".sapQuickActionCreateButtonContainer > div").addClass("sapUiSmallMarginEnd");
            jQuery(".sapQuickActionCreateButtonContainer .sapMBtnInner").css("padding", "0");
        },

        _refreshLineItems: function() {
          if (this._lineItemsTable) {
            var context = this.getView().getBindingContext();
            if (context && context._bLocalBinding) {
              ODataModelHelper.restoreLineItemReferences(this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, context);
              this._lineItemsTable.getModel().updateBindings();
            } else {
              this._lineItemsTable.getModel().refresh();
            }
          }
        },

        onTableUpdateStarted: function (oEvent) {
            this._lineItemsTable = oEvent.getSource();

        },

        onTableUpdateFinished: function (oEvent) {
            // ensure header fields are editable in case Field control is overwriting this
            this._updateFieldControl();

        },

        _initializeObject: function(oContext, facetType) {

            var oMainContext = this.getView().getBindingContext() ? this.getView().getBindingContext() : oContext;

            var propertyPaths = QCAnnotationHelper.getAllPropertyPathsFromFacet(oMainContext, facetType);
            if (propertyPaths && propertyPaths.length > 0) {
                ODataModelHelper.initializeObjectProperties(oContext, propertyPaths, {groupId: this._sDeferredGroupId});
            }

        },

        _updateFieldControl: function (oContext) {
            // Find out more how to handle this, for demo purposes make sure header fields are editable!
            var context = oContext ? oContext : this.getView().getBindingContext();
            if (context && this.getView().getModel().getProperty(context.getPath() + "/Update_mc") !== undefined) {
                this.getView().getModel().setProperty(context.getPath() + "/Update_mc", true);
            }

            // REMOVE THIS AFTER STABILIZATION!!!!
            if (context) {
              var headerProps = QCAnnotationHelper.getAllPropertyPathsFromFacet(context, "FieldGroup");
              var fc = 0;
              jQuery.each(headerProps, jQuery.proxy(function(i, path){
                fc = this.getView().getModel().getProperty(context.getPath() + "/" + path + "_fc");
                if ( fc !== undefined && (fc === 0 || fc === 1)) {
                  if (path.indexOf("BillToParty") >= 0 || path.indexOf("CustomerContact") >= 0) {
                    this.getView().getModel().setProperty(context.getPath() + "/" + path + "_fc", 7);
                  } else {
                    this.getView().getModel().setProperty(context.getPath() + "/" + path + "_fc", 3);
                  }
                }
              }, this));
            }
        }

    });

    return QCController;

}, /* bExports */ true);

}; // end of sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.view.QuickView.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.view.QuickView.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickView/view/QuickView.controller",["sap/ui/model/Context", "../../js/QuickTemplates/QuickActionBaseController"], function (Context, BaseController) {
    "use strict";


    return BaseController.extend("sap.suite.ui.generic.template.QuickView.view.QuickView", {

            _initialize: function() {
                if (!this._bIsInitialized) {
                    BaseController.prototype._initialize.apply(this);
                    this.sEntityPath = decodeURIComponent(this.getOwnerComponent().getAppComponent().getComponentData().startupParameters["entityPath"]);
                }
            },

            _onMetaModelLoaded: function () {
                var oContext = new Context(this.getView().getModel(), this.sEntityPath);
                this.bindView(oContext);
            }

        }
    );
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/QuickView/view/QuickView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides inactive support for controls
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport",["jquery.sap.global", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel",
		"sap/suite/ui/generic/template/extensionAPI/extensionAPI"
	],
	function(jQuery, UIComponent, JSONModel, extensionAPI) {
		"use strict";
		var ReuseComponentSupport = {},
			sJQueryDebugLogName = "sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport";

		function fnAttachContextReady(oControl, fnCallback) {
			oControl.attachEvent("modelContextChange", function() {
				var oDefaultModelBindingContext = this.getBindingContext(),
					oModel = oControl.getModel(),
					oParameter = {
						defaultModelAvailable: !!oModel,
						model: oModel,
						bindingContextPath: oDefaultModelBindingContext && oDefaultModelBindingContext.getPath(),
						bindingContext: oDefaultModelBindingContext,
						firstTime: oControl._stContext.firstTime
					};
				jQuery.sap.log.debug(oControl.getId() + ":" + oControl.getMetadata().getName() + ": modelAvailable=" + oParameter.defaultModelAvailable +
					" : context=" + oParameter.bindingContextPath, sJQueryDebugLogName);
				if (oParameter.defaultModelAvailable && oParameter.bindingContextPath && oControl._stContext.lastBindingContextPath !==
					oParameter.bindingContextPath) {
					//Remember the current binding context
					oControl._stContext.lastBindingContextPath = oParameter.bindingContextPath;
					if (oControl._stContext.firstTime) {
						oControl._stContext.extensionAPIPromise = extensionAPI.getExtensionAPIPromise(this.oContainer);
						oControl._stContext.firstTime = false;
					}
					//Context has changed
					fnCallback(oParameter, oControl._stContext.extensionAPIPromise);
				}
			});
		}

		function fnDefaultOnAttachContextReady(oParameter, oExtensionAPIPromise) {
			// Determine the callback to be called. On the first call it is this.stStart, if this function exists. On subsequent calls (or if this.stStart does not exist) it is this.stRefresh.
			var fnCurrentCallback = (oParameter.firstTime && this.stStart) || this.stRefresh;
			if (fnCurrentCallback){
				// The callback is called as soon as the extensionAPI is available. Note that the promise resolves to the extensionAPI. Thus, we finally call fnCurrentCallback(oParameter.model, oParameter.bindingContext, oExtensionAPI).
				oExtensionAPIPromise.then(fnCurrentCallback.bind(this, oParameter.model, oParameter.bindingContext));
			}
		}

		function getComponentModel() {
			/* It maybe helpful to have a model that allows to access all properties via data binding
			 * so they can be used declaratively in views of the components
			 */
			if (!this._oComponentModel) {
				this._oComponentModel = new JSONModel({});
			}
			return this._oComponentModel;
		}

		function mixInto(oComponent, sComponentModelName) {
			/* Initialize smart template context at component */
			oComponent._stContext = {
				lastBindingContextPath: "",
				firstTime: true
			};

			//Only subscribe to events if the reuse components shows interest by defining the corresponding functions
			if (oComponent.stRefresh || oComponent.stStart) {
				fnAttachContextReady(oComponent, fnDefaultOnAttachContextReady.bind(oComponent));
			}

			//Create component model in case specified
			if (sComponentModelName) {
				//overwrite set property
				oComponent.setProperty = function(sName, value) {
					/* we overwrite the set property function of UI5 to automatically update the component model
					 * but first we need to call the original (aka super in other languages)
					 */
					UIComponent.prototype.setProperty.apply(this, arguments);
					this.getComponentModel().setProperty("/" + sName, value);
					jQuery.sap.log.debug(this.getId() + ":" + this.getMetadata().getName() + ": setProperty " + sName + "=" + value, sJQueryDebugLogName);
				};
				oComponent.getComponentModel = getComponentModel.bind(oComponent);
				oComponent.setModel(oComponent.getComponentModel(), sComponentModelName);
			}
			//.........expose extensionAPI
		}

		/**
		 * Mixin function to transform a regular UIComponent instance into a reuse component for smart templates
		 *
		 * By using the mixInto method the existing component is checked if it implements the following functions:
		 * <ul>
		 *  <li>stStart(oModel, oBindingContext, oExtensionAPI) - is called when the model and the context is set for the first time above the compoenent</li>
		 *  <li>stRefresh(oModel, oBindingContext, oExtensionAPI) - is called everytime a new context is set above the component</li>
		 * </ui>
		 *
		 * @name sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport.mixInto
		 * @param {sap.ui.core.UIComponent} oComponent instance of UIComponent
		 * @param {string} componentModelName if set it will create a component model of the properties of a component and set the model to the component
		 *
		 * @private
		 */
		ReuseComponentSupport.mixInto = function(oComponent, sComponentModelName) {
		    jQuery.sap.assert(oComponent instanceof UIComponent, "ReuseComponentSupport: mixinto expects an implementation of sap.ui.core.UIComponent for", oComponent.getMetadata().getName());
			mixInto(oComponent, sComponentModelName);
		};

		return ReuseComponentSupport;
	});
}; // end of sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport.js
