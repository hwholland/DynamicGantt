<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.comp" xmlns:n2="sap.ui.unified" xmlns:n1="sap.m" xmlns:n3="sap.ui.table" xmlns:n4="sap.ui.fl" xmlns:n5="sap.suite.ui.microchart" xmlns:n0="sap.ui.core" xmlns:n6="sap.ui.comp">
<xsd:import namespace="sap.ui.unified"/>
<xsd:import namespace="sap.m"/>
<xsd:import namespace="sap.ui.table"/>
<xsd:import namespace="sap.ui.fl"/>
<xsd:import namespace="sap.suite.ui.microchart"/>
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="FilterBar" type="n6:_FilterBarType" substitutionGroup=":Grid">
<xsd:annotation>
<xsd:documentation>The control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the
       {@link sap.ui.comp.variants.VariantManagement VariantManagement} control, the related buttons, and an area underneath displaying the
       filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The
       area containing the filters can be hidden or shown using the Hide Filter Bar / Show Filter Bar button. The Go button triggers the search
       event, and the Filters button shows the filter dialog.&lt;br&gt;
       In this dialog, the consumer has full control over the filter bar. The filters in this dialog are displayed in one column and organized
       in groups. The filter items of the &lt;code&gt;filterItems&lt;/code&gt; aggregation are grouped in the Basic group . Each filter can be marked as
       visible in the filter bar by selecting Add to Filter Bar. In addition, the items in the &lt;code&gt;filterGroupItems&lt;/code&gt; aggregation can
       be marked as part of the current variant. The FilterBar also supports a different UI layout when used inside a value help dialog. In
       this case the FilterBar consists of two logical areas, one containing the general search button and in the Advanced Search area. The
       Advanced Search is a collapsible area displaying the advanced filters in two columns.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterGroupItem" type="n6:_FilterGroupItemType" substitutionGroup="n6:FilterItem">
<xsd:annotation>
<xsd:documentation>Represents a filter belonging to a group other than basic.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterItem" type="n6:_FilterItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a filter belonging to the basic group.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="LinkData" type="n6:_LinkDataType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Stores display text together with a navigation target hyperlink.&lt;br&gt;
       The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and
       {@link sap.ui.comp.navpopover.SemanticObjectController SemanticObjectController} to define the visible links on
       {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavigationPopover" type="n6:_NavigationPopoverType" substitutionGroup="n1:Popover">
<xsd:annotation>
<xsd:documentation>The NavigationPopover allows navigating to different destinations by providing links on a popover.&lt;br&gt;
       The links are fetched using the {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} service of the unified
       shell.&lt;br&gt;
       This class gets instantiated by {@link sap.ui.comp.navpopover.SmartLink SmartLink}. It is recommended to use
       {@link sap.ui.comp.navpopover.SmartLink SmartLink} instead of creating NavigationPopover manually.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavigationPopoverHandler" type="n6:_NavigationPopoverHandlerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The NavigationPopoverHandler control uses a semantic object to display
       {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover} for further navigation steps.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticObjectController" type="n6:_SemanticObjectControllerType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The SemanticObjectController allows the user to register against semantic object navigation events as well as define semantic objects
       which should be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartLink" type="n6:_SmartLinkType" substitutionGroup="n1:Link">
<xsd:annotation>
<xsd:documentation>The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover} for further
       navigation steps.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FieldSelector" type="n6:_FieldSelectorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Reuse control which displays the properties of OData entity sets.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartChart" type="n6:_SmartChartType" substitutionGroup="n1:VBox">
<xsd:annotation>
<xsd:documentation>The SmartChart control creates a chart based on OData metadata and the configuration specified. The entitySet property must be specified
       to use the control. This property is used to fetch fields from OData metadata, from which the chart UI will be generated. It can also be
       used to fetch the actual chart data.&lt;br&gt;
       Based on the chartType property, this control will render the corresponding chart.&lt;br&gt;
       &lt;b&gt;Note:&lt;/b&gt; Most of the attributes are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Configuration" type="n6:_ConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The configuration allows to further define the behavior of a SmartField.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ControlProposal" type="n6:_ControlProposalType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectStatus" type="n6:_ObjectStatusType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Defines a possible object status control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartField" type="n6:_SmartFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartField control is a wrapper for other controls. It interprets OData metadata to determine the control that has to be
       instantiated. The OData entity is derived from the control's binding context. The OData entity's property that is changed or displayed
       with the control is derived from the control's value property.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartLabel" type="n6:_SmartLabelType" substitutionGroup="n1:Label">
<xsd:annotation>
<xsd:documentation>The SmartLabel control extends {@link sap.m.Label sap.m.Label} and displays the label for
       {@link sap.ui.comp.smartfield.SmartField SmartField}. It uses the annotations &lt;code&gt;sap:label&lt;/code&gt; or
       &lt;code&gt;com.sap.vocabularies.Common.v1.Label&lt;/code&gt; for the label text and &lt;code&gt;sap:quickinfo&lt;/code&gt; or
       &lt;code&gt;com.sap.vocabularies.Common.v1.QuickInfo&lt;/code&gt; for the tooltip. The mandatory indicator is obtained from the SmartField
       control. The association with a SmartField control is built using the setLabelFor method.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ControlConfiguration" type="n6:_ControlConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar control, in order to overwrite
       the default settings from the OData metadata. For instance, it is possible to change the label, index or control type of a filter field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupConfiguration" type="n6:_GroupConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectOption" type="n6:_SelectOptionType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartFilterBar" type="n6:_SmartFilterBarType" substitutionGroup="n6:FilterBar">
<xsd:annotation>
<xsd:documentation>The SmartFilterBar control uses the OData metadata of an entity in order to create a filter bar.&lt;br&gt;
       Whether a field is visible on the filter bar, supports type-ahead and value help, for example, is automatically determined. When you use
       control configurations and group configurations it is possible to configure the filter bar and adapt it according to your needs.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Group" type="n6:_GroupType" substitutionGroup=":FormContainer">
<xsd:annotation>
<xsd:documentation>Groups are used to group group elements.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupElement" type="n6:_GroupElementType" substitutionGroup=":FormElement">
<xsd:annotation>
<xsd:documentation>A GroupElement is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Layout" type="n6:_LayoutType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Layout settings to adjust ResponsiveGridLayout.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartForm" type="n6:_SmartFormType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartForm control renders a form (sap.ui.layout.form.Form) and supports key user personalization, such as adding/hiding fields and
       groups, changing the order of fields and groups, and changing labels. When used with the SmartField control the label is taken from the
       metadata annotation &lt;code&gt;sap:label&lt;/code&gt; if not specified in the XML view.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DialogContent" type="n6:_DialogContentType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The content of the personalization dialog of the SmartForm</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FieldList" type="n6:_FieldListType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Contains list of forms, groups and fields which can could be modified by the SAPUI5 flexibility services</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FieldListNode" type="n6:_FieldListNodeType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A node within the field list control</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Input" type="n6:_InputType" substitutionGroup="n1:Input">
<xsd:annotation>
<xsd:documentation>Input field with special focus handling</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartAreaMicroChart" type="n6:_SmartAreaMicroChartType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
       specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
       fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to fetch
       the actual chart data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been
       initialised.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartBulletMicroChart" type="n6:_SmartBulletMicroChartType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartBulletMicroChart control creates a &lt;code&gt;sap.suite.ui.microchart.BulletMicroChart&lt;/code&gt;
based on OData metadata and the configuration specified by &lt;code&gt;mSettings&lt;/code&gt;.
The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
annotation information from the given default OData model. Based on this, the BulletMicroChart UI
is created.
&lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
Most of the attributes/properties are not dynamic and cannot be changed once the control has been
initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartMicroChart" type="n6:_SmartMicroChartType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartMicroChart control creates a chart based on OData metadata and the configuration specified by &lt;code&gt;mSettings&lt;/code&gt;.
The entitySet property must be specified in order to use the control. This property is used to fetch metadata and
annotation information from the given default OData model. Depending on the UI/ChartType annotation, the control
creates a corresponding &lt;code&gt;SmartBulletMicroChart&lt;/code&gt; or &lt;code&gt;SmartAreaMicroChart&lt;/code&gt; instance and delegates to the internal control.
       &lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;i&gt;&lt;/b&gt; Most of the attributes are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartTable" type="n6:_SmartTableType" substitutionGroup="n1:VBox">
<xsd:annotation>
<xsd:documentation>The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
       specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated; it can
       also be used to fetch the actual table data.&lt;br&gt;
       Based on the tableType property, this control will render a standard, analytical, or responsive table.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PersonalizableInfo" type="n6:_PersonalizableInfoType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The PersonalizableInfo class describes the personalizable control associated with the SmartVariantManagement control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartVariantManagement" type="n6:_SmartVariantManagementType" substitutionGroup="n6:VariantManagement">
<xsd:annotation>
<xsd:documentation>The SmartVariantManagement control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement} control
       and communicates with the layer that offers SAPUI5 flexibility services to manage the variants.&lt;br&gt;
       For more information about SAPUI5 flexibility, refer to the Developer Guide.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartVariantManagementUi2" type="n6:_SmartVariantManagementUi2Type" substitutionGroup="n6:VariantManagement">
<xsd:annotation>
<xsd:documentation>The SmartVariantManagementUi2 control is a specialization of the {@link "sap.ui.comp.variants.VariantManagement VariantManagement}
       control and communicates with the Ui2 personalization layer to manage the variants.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ValueHelpDialog" type="n6:_ValueHelpDialogType" substitutionGroup="n1:Dialog">
<xsd:annotation>
<xsd:documentation>The ValueHelpDialog control can be used to implement a value help for an input field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EditableVariantItem" type="n6:_EditableVariantItemType" substitutionGroup="n1:ColumnListItem">
<xsd:annotation>
<xsd:documentation>The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VariantItem" type="n6:_VariantItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The VariantItem class describes a variant item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VariantManagement" type="n6:_VariantManagementType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterBar'-->
<xsd:complexType name="_FilterBarType">
<xsd:complexContent>
<xsd:extension base=":_GridType">
<xsd:sequence>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Filters belonging to the basic group.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:FilterItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filterGroupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Filters belonging to groups other than the basic group.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:FilterGroupItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="advancedMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The advanced mode overwrites the standard behavior and is used in the value help scenario.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Collapses/expands the advanced area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/disables the Search button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterBarExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows/hides the filter row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="considerGroupTitle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set, then the label for filters will be prefixed with the group title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showClearButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Clear button on the Filters dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRestoreButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Restore button on the Filters dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGoOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Go button on the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRestoreOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Restore button on the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showClearOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Clear button on the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGoButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Go button on the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deltaVariantMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Stores the delta as compared to the standard variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterContainerWidth" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the width of the filters container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines what design should be used. Default is the design with the toolbar. In mobile scenarios this property is ignored - the
design with the toolbar will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in the toolbar on the first position. This property is ignored, when &lt;code&gt;useToolbar&lt;/code&gt;
is set to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFilterConfiguration" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Filters button on the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="basicSearch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Populates the basic search area on the filter bar and the Filters dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Restore button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Go button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
as variant later.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeVariantFetch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before a variant is fetched.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantLoad" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
with data from the variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a filter has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="clear" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Clear button is pressed. The consumer has to clear all filters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the filter bar is initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the filter bar was initialized and the standard variant was obtained. Eventual navigation related actions
should be triggered by this event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved. ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogClosed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the filters dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="assignedFiltersChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the filters information has changed. It indicates specifically that the count of assigned filters may be
changed. One of the intended reaction to this event would be to call &lt;code&gt;retrieveFiltersWithValuesAsText&lt;/code&gt; method.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterGroupItem'-->
<xsd:complexType name="_FilterGroupItemType">
<xsd:complexContent>
<xsd:extension base="n6:_FilterItemType">
<xsd:attribute name="groupTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, this filter is visible on the filter bar by default.
Mapped against the &lt;code&gt;visibleInFilterBar&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterItem'-->
<xsd:complexType name="_FilterItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="control" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The control of the filter.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label of the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the filter. This is an identifier for the filter and has to be unique.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Mandatory flag.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Visibility state of the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tooltip for the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="partOfCurrentVariant" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if a filter is part of the currently selected variant. This property is ONLY used internally and must not be used by the
filter bar consumers.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInFilterBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of a filter item in the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when one of the properties is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.LinkData'-->
<xsd:complexType name="_LinkDataType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text which can be displayed on the UI</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Destination link for a navigation operation in internal format. &lt;b&gt;Note&lt;/b&gt;: The link will be encoded before it is shown in external
format using the &lt;code&gt;hrefForExternal&lt;/code&gt; method of the CrossApplicationNavigation service.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The standard values for the &lt;code&gt;target&lt;/code&gt; property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
can be entered. This property is only used if the &lt;code&gt;href&lt;/code&gt; property is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.NavigationPopover'-->
<xsd:complexType name="_NavigationPopoverType">
<xsd:complexContent>
<xsd:extension base="n1:_PopoverType">
<xsd:sequence>
<xsd:element name="availableActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list of available actions shown to the user.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="mainNavigation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The main navigation displayed first on the popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="ownNavigation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The navigation taking the user back to the source application.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="semanticObjectName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>the name of the semantic object</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticAttributes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>describes the semantic attributes. The attribute has to be a map</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appStateKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The application state key passed to retrieve the navigation targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mainNavigationId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the visible text for the main navigation. If empty, the navigationPopover will try to get the Id from the given sourceObject.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="source" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Source control for which the popover is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="extraContent" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ExtraContent is displayed between the main navigation and the additional available links.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="component" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The parent component.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="targetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The navigation targets that are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is triggered when a link is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.NavigationPopoverHandler'-->
<xsd:complexType name="_NavigationPopoverHandlerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="semanticObject" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of semantic object which is used to fill the navigation popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectController" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not set
manually, it tries to find a SemanticObjectController in its parent hierarchy.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The metadata field name for this NavigationPopoverHandler control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Shown label of semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mapFieldToSemanticObject" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the NavigationPopoverHandler control will not replace its field name with the according
&lt;code&gt;semanticObject&lt;/code&gt; property during the calculation of the semantic attributes. This enables the usage of several
NavigationPopoverHandler on the same semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticAttributes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="control" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler, the
&lt;code&gt;beforePopoverOpens&lt;/code&gt; is fired after the link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets are retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and provides the possibility to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.SemanticObjectController'-->
<xsd:complexType name="_SemanticObjectControllerType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Comma-separated list of field names that must not be displayed as links.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="prefetchNavigationTargets" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the SemanticObjectController will retrieve all navigation targets once and will disable links for
which no targets were found. Setting this value to &lt;code&gt;true&lt;/code&gt; will trigger an additional roundtrip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldSemanticObjectMap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Maps the field names to the related semantic objects. When accessing this property for the first time, the mapping will be
calculated from the metadata within the provided model.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the entity set used. If &lt;code&gt;entitySet&lt;/code&gt; has not been defined, the SemanticObjectController tries to retrieve
the name from its parents. &lt;b&gt;Note:&lt;/b&gt; This is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets have been retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and makes it possible you to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
the parameters used to retrieve the navigation targets. In case of SmartLink, &lt;code&gt;beforePopoverOpens&lt;/code&gt; is fired after the
link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="prefetchDone" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the property &lt;code&gt;prefetchNavigationTargets&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, event &lt;code&gt;prefetchDone&lt;/code&gt; is fired
after all navigation targets have been retrieved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.SmartLink'-->
<xsd:complexType name="_SmartLinkType">
<xsd:complexContent>
<xsd:extension base="n1:_LinkType">
<xsd:sequence>
<xsd:element name="innerControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control that is displayed instead of SmartLink, if the SmartLink is disabled (for example, if no navigation targets are available).
If &lt;code&gt;innerControl&lt;/code&gt; is not provided, the SmartLink control tries to create one with property
&lt;code&gt;createControlCallback&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="semanticObject" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of semantic object which is used to fill the navigation popover. &lt;b&gt;Note&lt;/b&gt;: Setting a value triggers an asynchronous
determination, so the effect can be delayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectController" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
find a SemanticObjectController in its parent hierarchy. &lt;b&gt;Note&lt;/b&gt;: Setting a value triggers an asynchronous determination, so
the effect can be delayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The metadata field name for this SmartLink control. &lt;b&gt;Note&lt;/b&gt;: Setting a value triggers an asynchronous determination, so the
effect can be delayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Shown label of semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="createControlCallback" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
available. The function has no parameters and has to return an instance of sap.ui.core.Control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mapFieldToSemanticObject" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the SmartLink control will not replace its field name with the according
&lt;code&gt;semanticObject&lt;/code&gt; property during the calculation of the semantic attributes. This enables the usage of several
SmartLinks on the same semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreLinkRendering" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the SmartLink control will render the &lt;code&gt;innerControl&lt;/code&gt; or the control provided by
&lt;code&gt;createControlCallback&lt;/code&gt; instead of the actual link. This is used for example by the SemanticObjectController if this
SmartLink is listed in its &lt;code&gt;ignoredFields&lt;/code&gt; or no navigation targets were found during prefetch. &lt;b&gt;Note&lt;/b&gt;: Setting
a value triggers an asynchronous determination, so the effect can be delayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
change the parameters used to retrieve the navigation targets. In case of SmartLink, the &lt;code&gt;beforePopoverOpens&lt;/code&gt; is fired
after the link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets are retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and provides the possibility to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.odata.FieldSelector'-->
<xsd:complexType name="_FieldSelectorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content of the control itself</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="showSearchBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates to show a search bar for property names inside a selected entity set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldSelectionChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>User selected a different field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartchart.SmartChart'-->
<xsd:complexType name="_SmartChartType">
<xsd:complexContent>
<xsd:extension base="n1:_VBoxType">
<xsd:sequence>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartChart
control does not create an additional toolbar, but uses this one.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from which to fetch data and generate the columns.&lt;br&gt;
&lt;b&gt;Note&lt;/b&gt; This is not a dynamic property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartFilterId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartChart control.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="requestAtLeastFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be always requested by the backend system.&lt;br&gt;
This property is mainly meant to be used if there is no PresentationVariant annotation.&lt;br&gt;
If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
of both.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreFromPersonalisation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the personalization dialog.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of chart to be created by the SmartChart control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredChartTypes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the list of available chart types.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, variants are used. As a prerequisite, you need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useChartPersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, personalized chart settings are defined. If you want to persist the chart personalization, you need
to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currentVariantId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Retrieves or applies the current variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
property. This happens right after the &lt;code&gt;initialise&lt;/code&gt; event has been fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
only if binding is established internally/automatically - See enableAutoBinding)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDrillButtons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Drill Up and Drill Down buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showZoomButtons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Zoom In and Zoom Out buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSemanticNavigationButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Navigation button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Variant Management.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDetailsButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Details button. If set to &lt;code&gt;true&lt;/code&gt;, the datapoint tooltip will be disabled as the
information of selected datapoints will be found in the details popover. This will also set the drill-down button to invisible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDrillBreadcrumbs" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If set to &lt;code&gt;true&lt;/code&gt;,
the toolbar header will be replaced by the Breadcrumbs control. This will also set the drill-up button to invisible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showChartTooltip" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the chart tooltip. If set to &lt;code&gt;true &lt;/code&gt;, the chart tooltip will be shown when hovering over a
data point.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLegendButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Navigation button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set chart's legend properties.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionMode" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Chart selection mode. Supported values are {@link sap.chart.SelectionMode.Single} or {@link sap.chart.SelectionMode.Multi}, case
insensitive, always return in upper case. Unsupported values will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFullScreenButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the FullScreen button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useTooltip" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the usage either of the tooltip or the popover. If set to &lt;code&gt;true&lt;/code&gt;, a tooltip will be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useListForChartTypeSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visualization for chart type selection. If set to &lt;code&gt;true&lt;/code&gt;, the list of available chart types will be
displayed. If set to &lt;code&gt;false&lt;/code&gt; and there are three or fewer available chart types, the chart types will be displayed as
separate buttons in the toolbar. If there are more than three chart types, a list will be shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeRebindChart" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right before the binding is done.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataReceived" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
control itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantInitialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the variant management in the SmartChart control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantApply" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right before the overlay is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.Configuration'-->
<xsd:complexType name="_ConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="controlType" type="n6:_ControlTypeType">
<xsd:annotation>
<xsd:documentation>By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property allows to overwrite the
default behavior to some extent. For example makes it possible to define that an OData property of type Edm.Boolean is displayed as
a combo box.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayBehaviour" type="n6:_DisplayBehaviourType">
<xsd:annotation>
<xsd:documentation>The property specifies how value help, that is available for input fields, is presented. For example, it specifies whether the
descriptions of the values shown in the result after a query are displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preventInitialDataFetchInValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If there are value help annotations for a smart field, it is possible to specify whether the table in the value help dialog for
this field will be filled initially. The default value is &lt;code&gt;true&lt;/code&gt;, which means the table will not be filled as the
data fetch is prevented.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.ControlProposal'-->
<xsd:complexType name="_ControlProposalType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="objectStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Optional definition to further qualify how an object status control should be rendered.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:ObjectStatus"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="controlType" type="n6:_ControlProposalTypeType">
<xsd:annotation>
<xsd:documentation>By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.ObjectStatus'-->
<xsd:complexType name="_ObjectStatusType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="criticality" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional attribute, which can be set, if the control type has the value ObjectStatus.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="criticalityRepresentationType" type="n6:_CriticalityRepresentationTypeType">
<xsd:annotation>
<xsd:documentation>Optional attribute, which can be set to control how the criticality is visualized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.SmartField'-->
<xsd:complexType name="_SmartFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="configuration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Optional configuration for SmartField.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:Configuration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="controlProposal" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:ControlProposal"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
property of an OData entity.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of an entity set for which the control manages values. This is an optional property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the control into an editable mode or a display mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contextEditable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Notifies the control whether controls using the SmartField are editable or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width can be set to an absolute value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text shown when no value available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes warnings or errors.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text which is shown in the value state message popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueStateMessage" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The text which is shown in the value state message popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="jsontype" type="n6:_JSONTypeType">
<xsd:annotation>
<xsd:documentation>Data types to be used, if the SmartField control is interacting with a JSON model. If the value property of the control is bound to
a property of an OData entity set, this property is not considered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Mandatory property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value &lt;code&gt;0&lt;/code&gt; means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSuggestion" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the suggestion feature for a hosted control is enabled, if the hosted control supports it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, a value help indicator will be displayed inside the hosted control, if the hosted control supports this.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to false the label is not displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the text of an associated smart label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tooltipLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the tool tip of the associated smart label.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Visible state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its associated
currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEditable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Editable state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its
associated currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enabled state of the unit, if the SmartField control addresses unit of measure use cases, for example, an amount and its associated
currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="url" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Contains a URL which is used to render a link. The link is rendered, if the OData property which the value property of the control
is bound to is of type &lt;code&gt;Edm.String&lt;/code&gt; and the Smart Field is in display mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEditState" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property is for internal use only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="controlContext" type="n6:_ControlContextTypeType">
<xsd:annotation>
<xsd:documentation>Defines in which context the layout of the smart field has to be interpreted.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="proposedControl" type="n6:_ControlProposalTypeType">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the control break lines (in display mode) to prevent overflow.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="clientSideMandatoryCheck" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the mandatory check happens on the client side &lt;code&gt;true&lt;/code&gt; or on the server side &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association with controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySetFound" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
is specified. In both cases this event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the text in the field has changed and the focus leaves the TextField or Enter is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the smart field has calculated its metadata.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the visibility of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editableChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the value of editable property of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contextEditableChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the context editable property of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerControlsCreated" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the inner controls have been created.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueListChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.SmartLabel'-->
<xsd:complexType name="_SmartLabelType">
<xsd:complexContent>
<xsd:extension base="n1:_LabelType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.ControlConfiguration'-->
<xsd:complexType name="_ControlConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="defaultFilterValues" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Default value for a filter field.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:SelectOption"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>If a custom control is specified, the Smart Filter Bar will not create a control but use the custom control. Additional services
like TypeAhead have to implemented manually.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key property corresponds to the field name from the OData service $metadata document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using this flag it is possible to hide fields from the OData metadata.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hasValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether a value help dialog is available or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="controlType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
annotations. Using this property it is possible to overwrite the OData metadata. Possible values can be found here:
sap.ui.comp.smartfilterbar.ControlConfiguration.CONTROLTYPE</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval. The filter type is being
calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
Possible value scan be found here: sap.ui.comp.smartfilterbar.ControlConfiguration.FILTERTYPE</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The zero based index can be used to specify the initial order of fields (without any variants).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hasTypeAhead" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
DrodDownListbox</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property can be used to overwrite the mandatory state of a filter field. Possible values:
sap.ui.comp.smartfilterbar.ControlConfiguration.MANDATORY Property can only be set during initialisation. Changes at runtime will
be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The width of the filter field in a CSS compatible format. The width can be set only once during initialisation. Changes at runtime
will not be reflected. The width will not be applied to custom controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preventInitialDataFetchInValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
dialog for this field will be filled initially. The default value is flase, which menas the table will be filled as the data fetch
is not being prevented.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayBehaviour" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
text) , Description and ID for MultiInput (token text) Possible values can be found here:
sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="conditionType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The condition Type class name to use for this filter item
Implemantation should derive from sap.ui.comp.config.condition.Type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the value of a property, for example isVisible, has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.GroupConfiguration'-->
<xsd:complexType name="_GroupConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key property shall correspond to the name EntityTypeName from the OData service $metadata document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Zero based integer index.
The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the value of a property, for example label, has changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.SelectOption'-->
<xsd:complexType name="_SelectOptionType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="sign" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The sign for a Select Option. Possible values are I for include or E for exclude. Constants can be found here: sap.ui.comp.smartfilterbar.SelectOption.SIGN</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="operator" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The operator for a select option. The default value is EQ "for equals". Possible values can be found here: sap.ui.comp.smartfilterbar.SelectOption.OPERATOR.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="low" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The low value for a select option.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="high" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The high value for a select option. The high value is only required for a few operators, e.g. BT (between).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.SmartFilterBar'-->
<xsd:complexType name="_SmartFilterBarType">
<xsd:complexContent>
<xsd:extension base="n6:_FilterBarType">
<xsd:sequence>
<xsd:element name="controlConfiguration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
of fields, or change the filter field control type. Note: Changing the values here after the SmartFilter is initialized (initialise
event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:ControlConfiguration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="groupConfiguration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. Note: Changing
the values here after the SmartFilter is initialized (initialise event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:GroupConfiguration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entityType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity type whose metadata is used to create the SmartFilterBar. Note: Changing this value after the SmartFilterBar is
initialized (initialise event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resourceUri" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used. Note:
Changing this value after the SmartFilterBar is initialized (initialise event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="basicSearchFieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the field that has to be the focus of basic search. This is only relevant for SmartFilterBar in combination with
ValueHelpDialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableBasicSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables basic search field in the SmartFilterBar control. This must only be enabled for entities that support such search behavior.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pendingChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the pending state of the FilterBar control changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.Group'-->
<xsd:complexType name="_GroupType">
<xsd:complexContent>
<xsd:extension base=":_FormContainerType">
<xsd:sequence>
<!--default aggregation 'groupElements'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:GroupElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="groupElements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A GroupElement is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:GroupElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Layout to specify how the group shall be rendered (e.g. span and line-break)</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="null:GridData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups shall be rendered in a ResponsiveLayout with label on top of the group element. Each group will be
rendered in a new line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label for the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.GroupElement'-->
<xsd:complexType name="_GroupElementType">
<xsd:complexContent>
<xsd:extension base=":_FormElementType">
<xsd:sequence>
<!--default aggregation 'elements'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="elements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of controls to be displayed together with a label.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups shall be rendered in a ResponsiveLayout with label on top of the group element. Each group will be
rendered in a new line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="elementForLabel" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Index of element to be used for label determination</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the visibility of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.Layout'-->
<xsd:complexType name="_LayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="labelSpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in extra large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
the line the labelSpanM value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
labelSpanL is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on extra large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for extra large size.&lt;br&gt;
The number of columns for extra large size must not be smaller than the number of columns for large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for large size.&lt;br&gt;
The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleGroupFullSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the SmartForm contains only one single Group and this property is set, the Group is displayed using the full size of the
SmartForm. In this case the properties columnsL and columnsM are ignored.&lt;br&gt;
In all other cases the Group is displayed in the size of one column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between large size and extra large (XL) size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between Medium size and Large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>reakpoint (in pixel) between Small size and Medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridDataSpan" type="null:_GridSpanType">
<xsd:annotation>
<xsd:documentation>A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
m4". Note that the parameters has to be provided in the order large medium small.&lt;br&gt;
The value set here will be set to all group elements when used with horizontal layout (smart form property useHorizontalLayout)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.SmartForm'-->
<xsd:complexType name="_SmartFormType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'groups'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:Group"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="groups" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Groups are used to group form elements.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:Group"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Layout settings to adjust ResponsiveGridLayout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:Layout"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the form.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout} with the label above
the field. Each group is rendered in a new line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="checkButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether a check button is added to the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entityType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of entity types for which the flexibility features are available.&lt;br&gt;
For more information about SAPUI5 flexibility, refer to the Developer Guide.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the control is expandable. Per default the control is not rendered as expanded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editTogglable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the editable property is togglable via button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the form is editable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartForm control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="flexEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the form enables flexibility features, such as adding new fields.&lt;br&gt;
For more information about SAPUI5 flexibility, refer to the Developer Guide.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the editable property is toggled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="checked" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after check was performed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.flexibility.DialogContent'-->
<xsd:complexType name="_DialogContentType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content of the control itself</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.flexibility.FieldList'-->
<xsd:complexType name="_FieldListType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="nodes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Nodes representing either a Form, a Group or a field</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:FieldListNode"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectionChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the selected node has changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the label of the node has changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nodeHidden" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when a node was hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.flexibility.FieldListNode'-->
<xsd:complexType name="_FieldListNodeType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="nodes" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Nodes representing either a Form, a Group or a field</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:FieldListNode"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>private aggregation</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>is visible flag</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isSelected" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>is node selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selected" type="xsd:string">
<xsd:annotation>
<xsd:documentation>node was selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>label of node was changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="nodeHidden" type="xsd:string">
<xsd:annotation>
<xsd:documentation>node was hidden</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.flexibility.Input'-->
<xsd:complexType name="_InputType">
<xsd:complexContent>
<xsd:extension base="n1:_InputType">
<xsd:attribute name="selectedByKeyboard" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the field is readonly, focused and user pressed Space</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartAreaMicroChart'-->
<xsd:complexType name="_SmartAreaMicroChartType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation '_chart'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n5:AreaMicroChart"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from where the data is fetched and the internal AreaMicroChart representation is created. Note that this is not a dynamic UI5
property</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the target value and actual value
are displayed or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of Chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Only &lt;code&gt;true&lt;/code&gt; value is supported: the chart will be bound to the chartBindingPath or to the entitySet</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the relative path ( without '/') to an entitySet ( not a single entity)
that is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path.
If not specified, the entitySet attribute is used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isResponsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size and Width properties are ignored in such case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its Text property is set to the Title property of the Chart annotation.
Title property of the DataPoint annotation is ignored.
since version 1.38</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its Text property is set to the Description property of the Chart annotation.
Description property of the DataPoint annotation is ignored.
since version 1.38</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitOfMeasure" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its Text property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartBulletMicroChart'-->
<xsd:complexType name="_SmartBulletMicroChartType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation '_chart'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n5:BulletMicroChart"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from from where the data is fetched and and the internal BulletMicroChart representation is created.
Note that this is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if any label is shown or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the chart type. Note that this property is read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists)
property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isResponsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this is set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
&lt;code&gt;width&lt;/code&gt; property is ignored in such case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Title property of the Chart annotation.
Title property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Description property of the Chart annotation.
Description property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitOfMeasure" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartMicroChart'-->
<xsd:complexType name="_SmartMicroChartType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation '_chart'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name to fetch data and create the internal chart representation from.
Note that this is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if any label is shown or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the path that
is used during the binding of the chart. If not
specified, the entitySet attribute is used instead and also stored in this property.
Calling &lt;code&gt;bindElement&lt;/code&gt; binds the control and sets this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of chart. Note that this property is read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the height.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isResponsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties are ignored in such case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Title property of the Chart annotation.
Title property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Description property of the Chart annotation.
Description property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitOfMeasure" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smarttable.SmartTable'-->
<xsd:complexType name="_SmartTableType">
<xsd:complexContent>
<xsd:extension base="n1:_VBoxType">
<xsd:sequence>
<xsd:element name="customToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartTable
control does not create an additional toolbar, but makes use of this one.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="noData" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The value for the noData aggregation can be either a string value or a control instance.&lt;br&gt;
The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no
data text.&lt;br&gt;
Currently the Responsive Table only supports string values.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticKeyAdditionalControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Allows users to specify an additional control that will be added to a VBox for the first semantic key field.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
This property is not meant for public use.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartFilterId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartTable control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initiallyVisibleFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.&lt;br&gt;
This property is mainly meant to be used when no LineItem annotation exists.&lt;br&gt;
If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
finally based on this property.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="requestAtLeastFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be always requested from the backend&lt;br&gt;
This property is mainly meant to be used when there is no PresentationVariant annotation.&lt;br&gt;
If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
of both.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
This property has no effect when AnalyticalTable is used.&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreFromPersonalisation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the personalization dialog.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tableType" type="n6:_TableTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of table to be created in the SmartTable control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If you add a table to the content of the SmartTable in the view, this property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useExportToExcel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be set to true or false depending on whether you want to export data to MS Excel®.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useTablePersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
settings. If you want to persist the table personalization, you need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTablePersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The showTablePersonalisation attribute can be set to true or false for controlling the visibility of the TablePersonalisation
button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRowCount" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the showRowCount attribute is set to true number of rows is shown along with the header text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in table</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toolbarStyleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A style class which is defined for the toolbar of the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableCustomFilter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useOnlyOneSolidToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
style.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currentVariantId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Retrieves or sets the current variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify if the controls created by the SmartTable control are editable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
happens just after the &lt;code&gt;initialise&lt;/code&gt; event has been fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tableBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editTogglable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
for the SmartField scenario)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="demandPopin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
table</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFullScreenButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the FullScreen button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeRebindTable" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired just before the binding is being done.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired when display/edit button is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataReceived" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantInitialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired after variant management in the SmartTable has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantApply" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired after a variant has been applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired just before the overlay is being shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired when an editable field, created internally by the SmartTable control, is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.PersonalizableInfo'-->
<xsd:complexType name="_PersonalizableInfoType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Describes the type of variant management.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataSource" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the data service</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keyName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the property name of the personalization key.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="control" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Contains the control that can be personalized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.SmartVariantManagement'-->
<xsd:complexType name="_SmartVariantManagementType">
<xsd:complexContent>
<xsd:extension base="n6:_VariantManagementType">
<xsd:sequence>
<xsd:element name="personalizableControls" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All controls that rely on variant handling have to be added to this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:PersonalizableInfo"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the SmartVariantManagement control is initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.SmartVariantManagementUi2'-->
<xsd:complexType name="_SmartVariantManagementUi2Type">
<xsd:complexContent>
<xsd:extension base="n6:_VariantManagementType">
<xsd:sequence>
<xsd:element name="personalizableControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All controls that rely on variant handling have to be added to this aggregation. The only consumer currently known is the FilterBar
control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:PersonalizableInfo"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Once the SmartVariantManagement control has been initialized, and especially after retrieving the variants via the UI2
personalization service, the registered consumer will be notified that this phase has completed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.valuehelpdialog.ValueHelpDialog'-->
<xsd:complexType name="_ValueHelpDialogType">
<xsd:complexContent>
<xsd:extension base="n1:_DialogType">
<xsd:sequence>
<xsd:element name="filterBar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar SmartFilterBar} control to the value help dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n6:FilterBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="basicSearchText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value for the basic search field.
The value is set into the basic search field of the filter bar used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportMultiselect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables multi-selection in the table used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportRanges" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the ranges (conditions) feature in the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportRangesOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set to true, the value help dialog only supports the ranges (conditions) feature.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to identify the row in the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keys" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the list of additional keys of the column used for the internal key handling.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="descriptionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the key of the column used for the token text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxIncludeRanges" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of include ranges.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxExcludeRanges" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of exclude ranges.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Represents the display format of the range values. With the &lt;code&gt;displayFormat&lt;/code&gt; value UpperCase, the entered value of the range (condition) is converted to uppercase letters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenDisplayBehaviour" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Represents how the item token text should be displayed in ValueHelpDialog.
Use one of the valid sap.ui.comp.smartfilterbar.ControlConfiguration.DISPLAYBEHAVIOUR values.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ok" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the OK button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Cancel button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user selects an item in the items table.
The event will only be raised when the dialog gets a table instance from outside via setTable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenRemove" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user removes one or multiple existing token(s) from the dialog.
The event will only be raised when the dialog gets a table instance from outside via setTable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateSelection" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the table gets an update and all existing tokens must be selected in the table.
The event will only be raised when the dialog gets a table instance from outside via setTable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.EditableVariantItem'-->
<xsd:complexType name="_EditableVariantItemType">
<xsd:complexContent>
<xsd:extension base="n1:_ColumnListItemType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the List Item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="global" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicator if a variant is visible for all users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecyclePackage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ABAP Package the variant is assigned. Used for transport functionality</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleTransportId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifier of the transport object the variant is assigned to.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="namespace" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Variant namespace</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="readOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indication if variant can be changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessOptions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Flags for a variant to indicate why it might be read-only</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelReadOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the variant label can be changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="author" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Author of the variant</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.VariantItem'-->
<xsd:complexType name="_VariantItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="executeOnSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Attribute for usage in Smart Filter Bar</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="readOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Is the user allowed to change the item's data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleTransportId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifier of the transport object the variant is assigned to.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="global" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicator if a variant is visible for all users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecyclePackage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ABAP package the variant is assigned to. Used for transport functionality.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="namespace" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Variant namespace</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessOptions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Flags for a variant to indicate why it might be read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelReadOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the variant title can be changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="author" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Author of the variant</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.VariantManagement'-->
<xsd:complexType name="_VariantManagementType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items displayed by the VariantManagement control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="variantItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Variant items displayed by the VariantManagement control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n6:VariantItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialSelectionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Enables the setting of the initially selected variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be set to true or false depending on whether you want to enable or disable the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultVariantKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key of the currently selected item. Returns null if the default item list is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCreateTile" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that a Create Tile is visible in the Create dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showExecuteOnSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showShare" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that Share is visible in the Save Variant and the Manage Variants dialogs. Share allows you to share variants with other
users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleSupport" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="standardItemText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Overwrites the default Standard variant title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="industrySolutionMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to&lt;code&gt;true&lt;/code&gt;, the scenario is an industry-specific solution. This flag is only used internally in the app variant
scenarios.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="save" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Save Variant dialog is closed with OK for a variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="manage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when users apply changes to variants in the Manage Variants dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a new variant is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_AggregationRoleType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Dimension">
<xsd:annotation>
<xsd:documentation>Dimension role.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Measure">
<xsd:annotation>
<xsd:documentation>Measure role.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="NotDimeasure">
<xsd:annotation>
<xsd:documentation>Role which is neither dimension nor measure.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ChangeTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Unchanged">
<xsd:annotation>
<xsd:documentation>Not changed</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ModelChanged">
<xsd:annotation>
<xsd:documentation>Change is applied to model but not applied to table</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TableChanged">
<xsd:annotation>
<xsd:documentation>Change is applied to model and to table</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ResetTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ResetFull">
<xsd:annotation>
<xsd:documentation>Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter updated) was triggered
(either via API or via reset button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResetPartial">
<xsd:annotation>
<xsd:documentation>Reset back to the CurrentVariant was triggered</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlContextTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No special context is selected. The Smart Field applies its internal defaults.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResponsiveTable">
<xsd:annotation>
<xsd:documentation>Also the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Form">
<xsd:annotation>
<xsd:documentation>Behaves currently exactly like &lt;code&gt;sap.ui.comp.smartfield.ControlContextType.None&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Table">
<xsd:annotation>
<xsd:documentation>If this is selected the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SmartFormGrid">
<xsd:annotation>
<xsd:documentation>If this is selected the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlProposalTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No special context is selected. The Smart Field applies its internal defaults.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ObjectNumber">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectNumber control is used to display units of measure. If the value property of the Smart Field is not
bound to a unit of measure, the property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ObjectIdentifier">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable. The current OData property is
assumed to have a text annotation. Otherwise the configuration is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>The SmartField chooses the control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dropDownList">
<xsd:annotation>
<xsd:documentation>The SmartField uses a drop down list box.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="input">
<xsd:annotation>
<xsd:documentation>The SmartField displays an input field.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="datePicker">
<xsd:annotation>
<xsd:documentation>The SmartField displays a date picker.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="checkBox">
<xsd:annotation>
<xsd:documentation>The SmartField displays a check box.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="selection">
<xsd:annotation>
<xsd:documentation>The SmartField displays a &lt;code&gt;sap.m.Selection&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_CriticalityRepresentationTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="WithoutIcon">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectStatus control does not visualize the criticality using an icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="WithIcon">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectStatus control visualizes the criticality using an icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DisplayBehaviourType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>The SmartField chooses the display behavior.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionOnly">
<xsd:annotation>
<xsd:documentation>Only the description of the available values is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionAndId">
<xsd:annotation>
<xsd:documentation>Description and ID are displayed for available values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idAndDescription">
<xsd:annotation>
<xsd:documentation>ID and description are displayed for available values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idOnly">
<xsd:annotation>
<xsd:documentation>Shows the ID only.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TrueFalse">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as True/False</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="OnOff">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as On/Off</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="YesNo">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as Yes/No</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_JSONTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="String">
<xsd:annotation>
<xsd:documentation>The JavaScript primary type String</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>The JavaScript Date Object</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Float">
<xsd:annotation>
<xsd:documentation>Float type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Integer">
<xsd:annotation>
<xsd:documentation>Integer type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Boolean">
<xsd:annotation>
<xsd:documentation>Boolean Type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>Date Time Type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TableTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Table">
<xsd:annotation>
<xsd:documentation>A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResponsiveTable">
<xsd:annotation>
<xsd:documentation>A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table
already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AnalyticalTable">
<xsd:annotation>
<xsd:documentation>An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TreeTable">
<xsd:annotation>
<xsd:documentation>A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists (TODO)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
